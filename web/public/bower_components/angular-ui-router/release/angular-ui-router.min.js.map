{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6","webpack:///angular-ui-router.min.js","webpack:///webpack/bootstrap 69c9f233a4cccf4daf10?018b","webpack:///./ng1.ts?319c","webpack:///./core.ts?b26d","webpack:///./common/module.ts?216c","webpack:///./common/common.ts?a996","webpack:///./common/predicates.ts?3346","webpack:///./common/hof.ts?2590","webpack:///./common/coreservices.ts?cb79","webpack:///./common/glob.ts?9f85","webpack:///./common/queue.ts?8dfe","webpack:///./common/strings.ts?4a12","webpack:///./transition/rejectFactory.ts?39fa","webpack:///./transition/transition.ts?e0c6","webpack:///./common/trace.ts?3953","webpack:///./transition/transitionHook.ts?c175","webpack:///./state/targetState.ts?636d","webpack:///./transition/hookRegistry.ts?78c1","webpack:///./transition/hookBuilder.ts?5cba","webpack:///./resolve/resolveContext.ts?db0c","webpack:///./resolve/interface.ts?9672","webpack:///./resolve/resolvable.ts?7476","webpack:///./path/pathFactory.ts?5cf3","webpack:///./path/node.ts?f81c","webpack:///./params/param.ts?aa0b","webpack:///./url/urlMatcherConfig.ts?a46d","webpack:///./params/type.ts?5680","webpack:///./params/paramTypes.ts?33e0","webpack:///./router.ts?40b8","webpack:///./url/urlMatcherFactory.ts?0f3e","webpack:///./url/urlMatcher.ts?0536","webpack:///./url/urlRouter.ts?9e8a","webpack:///./state/state.ts?0c7b","webpack:///./transition/transitionService.ts?5ce0","webpack:///./hooks/resolve.ts?8bdd","webpack:///./hooks/views.ts?6163","webpack:///./hooks/url.ts?3bd9","webpack:///./hooks/redirectTo.ts?7129","webpack:///./hooks/onEnterExitRetain.ts?06b0","webpack:///./view/view.ts?e0c9","webpack:///./state/stateRegistry.ts?fafa","webpack:///./state/stateMatcher.ts?e974","webpack:///./state/stateBuilder.ts?59db","webpack:///./state/stateQueueManager.ts?3dba","webpack:///./state/stateObject.ts?1897","webpack:///./state/stateService.ts?6000","webpack:///./globals.ts?3d7d","webpack:///./params/stateParams.ts?1d6b","webpack:///./params/module.ts?b035","webpack:///./path/module.ts?805c","webpack:///./resolve/module.ts?ed8e","webpack:///./state/module.ts?4f0c","webpack:///./transition/module.ts?dde7","webpack:///./url/module.ts?b91a","webpack:///./view/module.ts?7429","webpack:///./ng1/services.ts?ba07","webpack:///./ng1/legacy/resolveService.ts?1cac","webpack:///./ng1/statebuilders/views.ts?0d8c","webpack:///./ng1/templateFactory.ts?4945","webpack:///./ng1/statebuilders/onEnterExitRetain.ts?0160","webpack:///./ng1/directives/stateDirectives.ts?a57f","webpack:///./ng1/stateFilters.ts?ad8f","webpack:///./ng1/directives/viewDirective.ts?2925","webpack:///./ng1/viewScroll.ts?698f"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","__export","hasOwnProperty","Object","defineProperty","value","router_1","UIRouter","bindFunctions","from","to","bindTo","fnNames","keys","filter","name","forEach","bind","defaults","opts","defaultsList","_i","arguments","length","merge","apply","concat","extend","pick","dst","objs","obj","key","ancestors","first","second","path","n","push","equalForKeys","a","b","i","k","pickOmitImpl","predicate","objCopy","restArgs","inArray","omit","hof_1","not","pluck","collection","propName","map","prop","callback","arr","predicates_1","isArray","result","accept","x","item","find","pushR","assertPredicate","errMsg","Error","isFunction","arrayTuples","arrayArgs","reduce","min","Math","Array","ignored","idx","applyPairs","memo","keyValTuple","isString","tail","undefined","_copy","src","dest","_forEach","cb","_this","_copyProps","_extend","toObj","rest","identity","_equals","o1","o2","t1","t2","tup","all","_arraysEq","isDate","getTime","isRegExp","toString","predicates","any","fn","a1","a2","t","coreservices_1","w","window","angular","fromJson","JSON","parse","toJson","stringify","copy","equals","noop","abstractKey","inherit","parent","extra","prototype","args","slice","array","indexOf","removeFrom","curry","splice","mergeR","mapObj","values","allTrueR","elem","anyTrueR","unnestR","flattenR","uniqR","acc","token","unnest","flatten","pairs","object","silenceUncaughtInPromise","promise","e","silentRejection","error","services","$q","reject","isInjectable","val","head","toStr","tis","isUndefined","isDefined","isNull","o","isNumber","isObject","isPromise","and","pipe","curried","func_args_length","initial_args","compose","start","funcs","reverse","fn1","fn2","or","invoke","fnName","pattern","struct","propEq","split","none","is","ctor","constructor","eq","other","v","notImplemented","fnname","$injector","location","locationConfig","template","Glob","text","glob","matches","segments","l","unshift","Number","MAX_VALUE","join","fromString","Queue","_items","_limit","enqueue","items","shift","dequeue","size","clear","current","remove","peekTail","peekHead","maxLength","max","str","substr","padString","kebobString","camelCase","replace","$1","toLowerCase","functionToString","fnStr","fnToString","namedFunctionMatch","match","_fn","format","seen","stringifyPattern","rejectFactory_1","common_1","transition_1","resolvable_1","stringifyPatternFn","isTransitionRejectionPromise","Rejection","_transitionRejection","Transition","Resolvable","beforeAfterSubstr","char","strings_1","RejectType","type","message","detail","detailString","d","toPromise","then","superseded","options","rejection","SUPERSEDED","redirected","invalid","INVALID","IGNORED","aborted","ABORTED","errored","ERROR","trace_1","transitionHook_1","hookRegistry_1","hookBuilder_1","node_1","pathFactory_1","targetState_1","param_1","resolveContext_1","transitionCount","stateSelf","fromPath","targetState","router","_deferred","defer","treeChanges","_treeChanges","isActive","_options","valid","HookRegistry","mixin","$id","toPath","PathFactory","buildToPath","reloadState","enteringStates","entering","node","state","applyViewConfigs","transitionService","$view","rootResolvables","params","rootNode","context","ResolveContext","addResolvables","onBefore","matchCriteria","onStart","onExit","onRetain","onEnter","onFinish","onSuccess","onError","$from","$to","self","compare","matchState","pathname","injector","subPath","getResolveTokens","getTokens","getResolveValue","resolveContext","getData","resolvable","getResolvable","data","addResolvable","stateName","topath","targetNode","previous","exiting","retained","views","redirect","newOptions","TargetState","identifier","$state","newTransition","create","originalEnteringNodes","redirectEnteringNodes","nodeIsReloading","includes","matchingEnteringNodes","PathNode","matching","resolvables","_changedParams","_a","reload","nodeSchemas","paramSchema","_b","paramValues","toValues","fromValues","tuples","schema","toVals","fromVals","Param","changed","dynamic","changes","hookBuilder","HookBuilder","transition","run","runSynchronousHooks","TransitionHook","globals","transitionHistory","syncResult","getOnBeforeHooks","rejectReason","trace","traceTransitionIgnored","transitionSuccess","traceSuccess","success","resolve","getOnSuccessHooks","transitionError","traceError","getOnErrorHooks","traceTransitionStart","appendHookToChain","prev","nextHook","invokeHook","asyncHooks","validates","parameters","fromStateOrName","toStateOrName","avoidEmptyHash","fromParams","toValid","toParams","diToken","uiViewString","viewData","creationContext","fqn","normalizedCat","input","Category","viewConfigString","viewConfig","viewDecl","$context","$uiViewName","$uiViewContextAnchor","Trace","_enabled","approximateDigests","_set","enabled","categories","isNaN","parseInt","category","enable","disable","TRANSITION","tid","digest","transitionStr","console","log","trans","traceHookInvocation","step","HOOK","event","traceHookResult","hookResult","transitionResult","transitionOptions","hookResultStr","transitionResultStr","traceResolvePath","when","RESOLVE","pathStr","traceResolvableResolved","resolvableStr","finalState","traceUIViewEvent","UIVIEW","traceUIViewConfigUpdated","traceUIViewScopeCreated","newScope","traceUIViewFill","html","traceViewServiceEvent","VIEWCONFIG","traceViewServiceUIViewEvent","defaultOptions","async","rejectIfSuperseded","traceData","stateContext","hookFn","isSuperseded","handleHookResult","mapHookResult","target","hooks","swallowExceptions","results","exception","rejections","chain","_identifier","_definition","_params","exists","base","relative","criterion","matchGlobs","_state","globStrings","toMatch","glob_1","matchFn","makeHookRegistrationFn","matchObject","eventHook","EventHook","priority","_matchingNodes","nodes","mc","allMatched","_transitionEvents","getHooks","source","tupleSort","reverseDepthSort","r","factor","depthDelta","hook","$transitions","baseHookOptions","_buildNodeHooks","getOnStartHooks","getOnExitHooks","stateHook","getOnRetainHooks","getOnEnterHooks","getOnFinishHooks","toState","fromState","onStartHooks","onExitHooks","onRetainHooks","onEnterHooks","onFinishHooks","hookType","matchingNodesProp","sortHooksFn","matchingHooks","_matchingHooks","makeTransitionHooks","matchingNodes","resolvePath","subContext","transitionHook","sort","tuple","hookName","reg","interface_1","resolvePolicies","ALL_WHENS","EAGER","LAZY","EAGER_WHENS","_path","newResolvables","whenOption","matchedWhens","promises","matchesRequestedPolicy","getPolicy","nodeResolvables","getResult","get","UIInjectorImpl","findNode","getDependencies","availableResolvables","res","getDependency","fromInjector","deps","resolved","getAsync","WAIT","NOWAIT","RXWAIT","defaultResolvePolicy","arg1","resolveFn","policy","literal","thisPolicy","statePolicy","resolvePolicy","getResolvableDependencies","invokeResolveFn","resolvedDeps","waitForRx","observable$","cached","cache","maybeWaitForRx","applyResolvedValue","resolvedValue","clone","makeTargetState","buildPath","applyRawParams","inheritParams","states","viewDecls","viewConfigs","view","createViewConfig","toKeys","nodeParamVals","makeInheritedParamsNode","toNode","toParamVals","incomingParamVals","fromParamVals","ownParamVals","applyToParams","retainedNode","cloned","keep","staticParams","nodesMatch","node1","node2","retainedWithToParams","elementIdx","getParamVal","paramDef","pDef","parameter","paramValsEq","pathA","pathB","unwrapShorthand","cfg","isShorthand","$$fn","getType","urlType","paramTypes_1","paramTypes","type_1","ParamType","DefType","CONFIG","getSquashPolicy","config","isOptional","squash","urlMatcherConfig_1","matcherConfig","defaultSquashPolicy","getReplace","arrayMode","configuredKeys","defaultPolicy","hasOwn","getArrayMode","arrayDefaults","SEARCH","arrayParamNomenclature","$asArray","isDefaultValue","$$getDefaultValue","defaultValue","$replace","replacement","$normalize","isSearch","normalized","encoded","encode","exec","fromConfig","PATH","fromSearch","param","values1","values2","MatcherConfig","_isCaseInsensitive","_isStrictMode","_defaultSquashPolicy","caseInsensitive","strictMode","ArrayType","mode","arrayWrap","arrayUnwrap","arrayHandler","allTruthyMode","arrayEqualsHandler","val1","val2","left","right","$arrayMode","def","decode","$subPattern","sub","valToString","valFromString","ParamTypes","typeQueue","defaultTypes","hash","String","string","int","bool","Boolean","date","getFullYear","getMonth","getDate","capture","Date","valueOf","json","makeType","definition","types","definitionFn","_flushTypeQueue","urlMatcherFactory_1","urlRouter_1","state_1","urlRouter_2","transitionService_1","view_1","stateRegistry_1","stateService_1","globals_1","viewService","ViewService","TransitionService","Globals","urlMatcherFactory","UrlMatcherFactory","urlRouterProvider","UrlRouterProvider","urlRouter","UrlRouter","stateRegistry","StateRegistry","stateProvider","StateProvider","stateService","StateService","rootContext","$current","getDefaultConfig","strict","urlMatcher_1","UrlMatcher","compile","isMatcher","$get","quoteRegExp","surroundPattern","predicates_2","param_2","common_2","common_3","memoizeTo","_cache","_children","_segments","_compiled","paramMap","segment","placeholder","searchPlaceholder","last","patterns","checkParamErrors","nameValidator","test","matchDetails","regexp","substring","index","RegExp","lastIndex","search","prefix","freeze","append","url","isRoot","decodePathArray","reverseString","unquoteDashes","allReversed","allParams","pathParams","searchParams","nPathSegments","urlm","j","validParamVal","getDetails","urlMatchers","pathSegmentsAndParams","queryParams","pathString","encodeDashes","raw","encodeURIComponent","queryString","charCodeAt","toUpperCase","matcher","staticSegments","regExpPrefix","re","interpolate","what","handleIfMatch","$stateParams","handler","$match","appendBasePath","isHtml5","absolute","baseHref","update","rules","otherwiseFn","evt","check","rule","handled","$location","defaultPrevented","$urlMatcherFactory","interceptDeferred","otherwise","handlerIsString","strategies","_what","_handler","regex","global","sticky","deferIntercept","sync","listen","listener","onChange","read","urlMatcher","href","html5Mode","hashPrefix","slash","port","protocol","host","invalidCallbacks","decorator","func","register","onInvalid","resolve_1","views_1","url_1","redirectTo_1","onEnterExitRetain_1","defaultTransOpts","notify","custom","_router","_deregisterHookFns","registerTransitionHooks","fns","redirectTo","redirectToHook","onExitHook","onRetainHook","onEnterHook","eagerResolve","eagerResolvePath","lazyResolve","lazyResolveState","loadViews","loadEnteringViews","activateViews","updateUrl","enteringViews","load","exitingViews","vc","deactivateViewConfig","activateViewConfig","$urlRouter","navigable","urlOptions","handleResult","makeEnterExitRetainHook","uiViews","_viewConfigFactories","uiViewDepth","uiView","viewConfigDepth","count","uiViewsByFqn","uiv","$type","vcSegments","uivSegments","negOffset","fqnToFirstSegment","uiViewContext","depthCompare","depthFn","posNeg","matchingConfigPair","matchingConfigs","configureUIView","configUpdated","_rootContext","viewConfigFactory","viewType","decl","cfgFactory","cfgs","registerUIView","fqnMatches","available","active","normalizeUIViewTarget","rawViewName","viewAtContext","uiViewName","uiViewContextAnchor","relativeViewNameSugar","charAt","relativeMatch","anchor","stateMatcher_1","stateBuilder_1","stateQueueManager_1","StateMatcher","builder","StateBuilder","stateQueue","StateQueueManager","rootStateDef","#","abstract","_root","stateDefinition","stateOrName","found","_states","isRelative","isStr","baseState","splitName","pathLength","relName","selfBuilder","$$state","dataBuilder","paramsBuilder","makeConfigParam","urlParams","nonUrlParams","pathBuilder","includesBuilder","resolvablesBuilder","obj2Tuples","annotate","$inject","strictDi","isResolveLiteral","isLikeNg2Provider","provide","useValue","useFactory","useExisting","useClass","isTupleFromObj","literal2Resolvable","dependencies","tuple2Resolvable","item2Resolvable","parseUrl","getUrlBuilder","$urlMatcherFactoryProvider","stateDec","parsed","paramConfig","reloadOnSearch","getNavigableBuilder","parentBuilder","parentName","builders","build","parentFn","lastIndexOf","stateObject_1","$urlRouterProvider","queue","State","flush","orphanIdx","orphans","previousQueueLength","attachRoute","autoFlush","transitionTo","ref","inherited","queue_1","_defaultErrorHandler","$error$","stack","getters","boundFns","enumerable","configurable","_handleInvalidTargetState","$to$","invokeNextCallback","nextCallback","callbackQueue","invokeCallback","checkForRedirect","latestThing","latest","$from$","go","defautGoOpts","transOpts","transHistory","latestSuccess","successfulTransitions","rootPath","currentPath","rejectedTransitionHandler","errorHandler","defaultErrorHandler","transitionToPromise","include","defaultHrefOpts","lossy","$inherit","nav","stateParams_1","StateParams","beforeNewTransition","$transition$","updateGlobalState","clearCurrentTransition","newParams","parentParams","parents","inheritList","annotateController","controllerExpression","$controller","oldInstantiate","instantiate","deps_1","constructorFunction","$scope","runBlock","ng1UIRouter","$locationProvider","$browser","$sniffer","$rootScope","$http","$templateCache","$on","urlListeners","history","headers","Accept","ng1ViewsBuilder","getStateHookBuilder","ng1ViewConfigFactory","getUrlRouterProvider","getStateProvider","getTransitionsProvider","watchDigests","$watch","resolveService_1","templateFactory_1","app","provider","TemplateFactory","resolveFactory","service","getLocals","ctx","tokens","$resolve","invocables","locals","parentNode","resolveData","parentLocals","rewrap","_locals","local","tuples2ObjR","tplKeys","ctrlKeys","compKeys","nonCompKeys","allKeys","viewsObject","$default","component","templateProvider","resolveFor","bindings","version","minor","attributeTpl","attrName","resolveName","attrs","getComponentInputs","kebobName","resolveAs","$name","cmpDefs","getBindings","Ng1ViewConfig","scopeBindings","bindingsObj","bindToController","scope","hasTemplate","getTemplate","controller","getController","templateUrl","$factory","controllerProvider","providerFn","fromUrl","fromProvider","services_1","decoratedNg1Hook","$state$","parseStateRef","preparsed","paramExpr","el","$uiView","inheritedData","getTypeInfo","isSvg","isForm","nodeName","attr","isAnchor","clickable","clickHook","$timeout","button","which","ctrlKey","metaKey","shiftKey","preventDefault","ignorePreventDefaultCount","cancel","defaultOpts","uiSref","restrict","require","link","element","uiSrefActive","unlinkInfoFn","uiSrefOpts","$eval","$$addStateInfo","$set","uiState","runStateRefLink","group","uiStateParams","uiStateOpts","watch","$interpolate","$element","$attrs","addState","stateParams","activeClass","stateHash","createStateHash","stateInfo","activeClasses","anyMatch","addClass","removeClass","exactMatch","activeEqClass","className","uiSrefActiveEq","newState","deregister","directive","$IsStateFilter","isFilter","$stateful","$IncludedByStateFilter","includesFilter","$ViewDirectiveFill","$compile","getControllerAs","getResolveAs","tElement","initial","$cfg","contents","controllerAs","resolveCtx","controllerInstance","children","registerControllerCallbacks","cmp_1","kebobName_1","getComponentController","directiveEl","tagName","deregisterWatch_1","ctrlInstance","$onInit","hasComponentImpl","viewState","hookOptions","uiOnParamsChanged","viewCreationTrans_1","paramsUpdated","toSchema","fromSchema","changedToParams","changedKeys_1","uiCanExit","criteria","$animate","$uiViewScroll","getRenderer","enter","leave","configsEqual","config1","config2","rootData","terminal","transclude","tAttrs","$transclude","configUpdatedCallback","activeUIView","updateView","cleanupLastView","previousEl","currentScope","$destroy","currentEl","_viewData_1","renderer","$$animLeave","$new","animEnter","animLeave","$uiViewData","$animEnter","$animLeave","$emit","autoScrollExp","onloadExp","unregister","onload","autoscroll","$ViewScrollProvider","useAnchorScroll","$anchorScroll","scrollIntoView"],"mappings":"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","file":"angular-ui-router.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"angular-ui-router\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"angular-ui-router\"] = factory();\n\telse\n\t\troot[\"angular-ui-router\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"angular-ui-router\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"angular-ui-router\"] = factory();\n\telse\n\t\troot[\"angular-ui-router\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Main entry point for angular 1.x build\n\t * @module ng1\n\t */\n\t/** for typedoc */\n\t\"use strict\";\n\tfunction __export(m) {\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t}\n\t__export(__webpack_require__(1));\n\t__export(__webpack_require__(53));\n\t__export(__webpack_require__(55));\n\t__webpack_require__(58);\n\t__webpack_require__(59);\n\t__webpack_require__(60);\n\t__webpack_require__(61);\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = \"ui.router\";\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/** @module common */ /** */\n\t\"use strict\";\n\tfunction __export(m) {\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t}\n\t__export(__webpack_require__(2));\n\t__export(__webpack_require__(46));\n\t__export(__webpack_require__(47));\n\t__export(__webpack_require__(48));\n\t__export(__webpack_require__(49));\n\t__export(__webpack_require__(50));\n\t__export(__webpack_require__(51));\n\t__export(__webpack_require__(52));\n\t__export(__webpack_require__(44));\n\tvar router_1 = __webpack_require__(26);\n\texports.UIRouter = router_1.UIRouter;\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tfunction __export(m) {\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t}\n\t/** @module common */ /** for typedoc */\n\t__export(__webpack_require__(3));\n\t__export(__webpack_require__(6));\n\t__export(__webpack_require__(7));\n\t__export(__webpack_require__(5));\n\t__export(__webpack_require__(4));\n\t__export(__webpack_require__(8));\n\t__export(__webpack_require__(9));\n\t__export(__webpack_require__(12));\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Random utility functions used in the UI-Router code\n\t *\n\t * @preferred @module common\n\t */ /** for typedoc */\n\t\"use strict\";\n\tvar predicates_1 = __webpack_require__(4);\n\tvar hof_1 = __webpack_require__(5);\n\tvar coreservices_1 = __webpack_require__(6);\n\tvar w = typeof window === 'undefined' ? {} : window;\n\tvar angular = w.angular || {};\n\texports.fromJson = angular.fromJson || JSON.parse.bind(JSON);\n\texports.toJson = angular.toJson || JSON.stringify.bind(JSON);\n\texports.copy = angular.copy || _copy;\n\texports.forEach = angular.forEach || _forEach;\n\texports.extend = angular.extend || _extend;\n\texports.equals = angular.equals || _equals;\n\texports.identity = function (x) { return x; };\n\texports.noop = function () { return undefined; };\n\texports.abstractKey = 'abstract';\n\t/**\n\t * Binds and copies functions onto an object\n\t *\n\t * Takes functions from the 'from' object, binds those functions to the _this object, and puts the bound functions\n\t * on the 'to' object.\n\t *\n\t * This example creates an new class instance whose functions are prebound to the new'd object.\n\t * @example\n\t * ```\n\t *\n\t * class Foo {\n\t *   constructor(data) {\n\t *     // Binds all functions from Foo.prototype to 'this',\n\t *     // then copies them to 'this'\n\t *     bindFunctions(Foo.prototype, this, this);\n\t *     this.data = data;\n\t *   }\n\t *\n\t *   log() {\n\t *     console.log(this.data);\n\t *   }\n\t * }\n\t *\n\t * let myFoo = new Foo([1,2,3]);\n\t * var logit = myFoo.log;\n\t * logit(); // logs [1, 2, 3] from the myFoo 'this' instance\n\t * ```\n\t *\n\t * This example creates a bound version of a service function, and copies it to another object\n\t * @example\n\t * ```\n\t *\n\t * var SomeService = {\n\t *   this.data = [3, 4, 5];\n\t *   this.log = function() {\n\t *     console.log(this.data);\n\t *   }\n\t * }\n\t *\n\t * // Constructor fn\n\t * function OtherThing() {\n\t *   // Binds all functions from SomeService to SomeService,\n\t *   // then copies them to 'this'\n\t *   bindFunctions(SomeService, this, SomeService);\n\t * }\n\t *\n\t * let myOtherThing = new OtherThing();\n\t * myOtherThing.log(); // logs [3, 4, 5] from SomeService's 'this'\n\t * ```\n\t *\n\t * @param from The object which contains the functions to be bound\n\t * @param to The object which will receive the bound functions\n\t * @param bindTo The object which the functions will be bound to\n\t * @param fnNames The function names which will be bound (Defaults to all the functions found on the 'from' object)\n\t */\n\tfunction bindFunctions(from, to, bindTo, fnNames) {\n\t    if (fnNames === void 0) { fnNames = Object.keys(from); }\n\t    return fnNames.filter(function (name) { return typeof from[name] === 'function'; })\n\t        .forEach(function (name) { return to[name] = from[name].bind(bindTo); });\n\t}\n\texports.bindFunctions = bindFunctions;\n\t/**\n\t * prototypal inheritance helper.\n\t * Creates a new object which has `parent` object as its prototype, and then copies the properties from `extra` onto it\n\t */\n\texports.inherit = function (parent, extra) {\n\t    return exports.extend(new (exports.extend(function () { }, { prototype: parent }))(), extra);\n\t};\n\t/**\n\t * Given an arguments object, converts the arguments at index idx and above to an array.\n\t * This is similar to es6 rest parameters.\n\t *\n\t * Optionally, the argument at index idx may itself already be an array.\n\t *\n\t * For example,\n\t * given either:\n\t *        arguments = [ obj, \"foo\", \"bar\" ]\n\t * or:\n\t *        arguments = [ obj, [\"foo\", \"bar\"] ]\n\t * then:\n\t *        restArgs(arguments, 1) == [\"foo\", \"bar\"]\n\t *\n\t * This allows functions like pick() to be implemented such that it allows either a bunch\n\t * of string arguments (like es6 rest parameters), or a single array of strings:\n\t *\n\t * given:\n\t *        var obj = { foo: 1, bar: 2, baz: 3 };\n\t * then:\n\t *        pick(obj, \"foo\", \"bar\");   // returns { foo: 1, bar: 2 }\n\t *        pick(obj, [\"foo\", \"bar\"]); // returns { foo: 1, bar: 2 }\n\t */\n\tvar restArgs = function (args, idx) {\n\t    if (idx === void 0) { idx = 0; }\n\t    return Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(args, idx));\n\t};\n\t/** Given an array, returns true if the object is found in the array, (using indexOf) */\n\texports.inArray = function (array, obj) { return array.indexOf(obj) !== -1; };\n\t/** Given an array, and an item, if the item is found in the array, it removes it (in-place).  The same array is returned */\n\texports.removeFrom = hof_1.curry(function (array, obj) {\n\t    var idx = array.indexOf(obj);\n\t    if (idx >= 0)\n\t        array.splice(idx, 1);\n\t    return array;\n\t});\n\t/**\n\t * Applies a set of defaults to an options object.  The options object is filtered\n\t * to only those properties of the objects in the defaultsList.\n\t * Earlier objects in the defaultsList take precedence when applying defaults.\n\t */\n\tfunction defaults(opts) {\n\t    if (opts === void 0) { opts = {}; }\n\t    var defaultsList = [];\n\t    for (var _i = 1; _i < arguments.length; _i++) {\n\t        defaultsList[_i - 1] = arguments[_i];\n\t    }\n\t    var defaults = merge.apply(null, [{}].concat(defaultsList));\n\t    return exports.extend({}, defaults, pick(opts || {}, Object.keys(defaults)));\n\t}\n\texports.defaults = defaults;\n\t/**\n\t * Merges properties from the list of objects to the destination object.\n\t * If a property already exists in the destination object, then it is not overwritten.\n\t */\n\tfunction merge(dst) {\n\t    var objs = [];\n\t    for (var _i = 1; _i < arguments.length; _i++) {\n\t        objs[_i - 1] = arguments[_i];\n\t    }\n\t    exports.forEach(objs, function (obj) {\n\t        exports.forEach(obj, function (value, key) {\n\t            if (!dst.hasOwnProperty(key))\n\t                dst[key] = value;\n\t        });\n\t    });\n\t    return dst;\n\t}\n\texports.merge = merge;\n\t/** Reduce function that merges each element of the list into a single object, using extend */\n\texports.mergeR = function (memo, item) { return exports.extend(memo, item); };\n\t/**\n\t * Finds the common ancestor path between two states.\n\t *\n\t * @param {Object} first The first state.\n\t * @param {Object} second The second state.\n\t * @return {Array} Returns an array of state names in descending order, not including the root.\n\t */\n\tfunction ancestors(first, second) {\n\t    var path = [];\n\t    for (var n in first.path) {\n\t        if (first.path[n] !== second.path[n])\n\t            break;\n\t        path.push(first.path[n]);\n\t    }\n\t    return path;\n\t}\n\texports.ancestors = ancestors;\n\t/**\n\t * Performs a non-strict comparison of the subset of two objects, defined by a list of keys.\n\t *\n\t * @param {Object} a The first object.\n\t * @param {Object} b The second object.\n\t * @param {Array} keys The list of keys within each object to compare. If the list is empty or not specified,\n\t *                     it defaults to the list of keys in `a`.\n\t * @return {Boolean} Returns `true` if the keys match, otherwise `false`.\n\t */\n\tfunction equalForKeys(a, b, keys) {\n\t    if (keys === void 0) { keys = Object.keys(a); }\n\t    for (var i = 0; i < keys.length; i++) {\n\t        var k = keys[i];\n\t        if (a[k] != b[k])\n\t            return false; // Not '===', values aren't necessarily normalized\n\t    }\n\t    return true;\n\t}\n\texports.equalForKeys = equalForKeys;\n\tfunction pickOmitImpl(predicate, obj) {\n\t    var objCopy = {}, keys = restArgs(arguments, 2);\n\t    for (var key in obj) {\n\t        if (predicate(keys, key))\n\t            objCopy[key] = obj[key];\n\t    }\n\t    return objCopy;\n\t}\n\t/** Return a copy of the object only containing the whitelisted properties. */\n\tfunction pick(obj) { return pickOmitImpl.apply(null, [exports.inArray].concat(restArgs(arguments))); }\n\texports.pick = pick;\n\t/** Return a copy of the object omitting the blacklisted properties. */\n\tfunction omit(obj) { return pickOmitImpl.apply(null, [hof_1.not(exports.inArray)].concat(restArgs(arguments))); }\n\texports.omit = omit;\n\t/**\n\t * Maps an array, or object to a property (by name)\n\t */\n\tfunction pluck(collection, propName) {\n\t    return map(collection, hof_1.prop(propName));\n\t}\n\texports.pluck = pluck;\n\t/** Filters an Array or an Object's properties based on a predicate */\n\tfunction filter(collection, callback) {\n\t    var arr = predicates_1.isArray(collection), result = arr ? [] : {};\n\t    var accept = arr ? function (x) { return result.push(x); } : function (x, key) { return result[key] = x; };\n\t    exports.forEach(collection, function (item, i) {\n\t        if (callback(item, i))\n\t            accept(item, i);\n\t    });\n\t    return result;\n\t}\n\texports.filter = filter;\n\t/** Finds an object from an array, or a property of an object, that matches a predicate */\n\tfunction find(collection, callback) {\n\t    var result;\n\t    exports.forEach(collection, function (item, i) {\n\t        if (result)\n\t            return;\n\t        if (callback(item, i))\n\t            result = item;\n\t    });\n\t    return result;\n\t}\n\texports.find = find;\n\t/** Given an object, returns a new object, where each property is transformed by the callback function */\n\texports.mapObj = map;\n\t/** Maps an array or object properties using a callback function */\n\tfunction map(collection, callback) {\n\t    var result = predicates_1.isArray(collection) ? [] : {};\n\t    exports.forEach(collection, function (item, i) { return result[i] = callback(item, i); });\n\t    return result;\n\t}\n\texports.map = map;\n\t/**\n\t * Given an object, return its enumerable property values\n\t *\n\t * @example\n\t * ```\n\t *\n\t * let foo = { a: 1, b: 2, c: 3 }\n\t * let vals = values(foo); // [ 1, 2, 3 ]\n\t * ```\n\t */\n\texports.values = function (obj) { return Object.keys(obj).map(function (key) { return obj[key]; }); };\n\t/**\n\t * Reduce function that returns true if all of the values are truthy.\n\t *\n\t * @example\n\t * ```\n\t *\n\t * let vals = [ 1, true, {}, \"hello world\"];\n\t * vals.reduce(allTrueR, true); // true\n\t *\n\t * vals.push(0);\n\t * vals.reduce(allTrueR, true); // false\n\t * ```\n\t */\n\texports.allTrueR = function (memo, elem) { return memo && elem; };\n\t/**\n\t * Reduce function that returns true if any of the values are truthy.\n\t *\n\t *  * @example\n\t * ```\n\t *\n\t * let vals = [ 0, null, undefined ];\n\t * vals.reduce(anyTrueR, true); // false\n\t *\n\t * vals.push(\"hello world\");\n\t * vals.reduce(anyTrueR, true); // true\n\t * ```\n\t */\n\texports.anyTrueR = function (memo, elem) { return memo || elem; };\n\t/**\n\t * Reduce function which un-nests a single level of arrays\n\t * @example\n\t * ```\n\t *\n\t * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n\t * input.reduce(unnestR, []) // [ \"a\", \"b\", \"c\", \"d\", [ \"double, \"nested\" ] ]\n\t * ```\n\t */\n\texports.unnestR = function (memo, elem) { return memo.concat(elem); };\n\t/**\n\t * Reduce function which recursively un-nests all arrays\n\t *\n\t * @example\n\t * ```\n\t *\n\t * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n\t * input.reduce(unnestR, []) // [ \"a\", \"b\", \"c\", \"d\", \"double, \"nested\" ]\n\t * ```\n\t */\n\texports.flattenR = function (memo, elem) { return predicates_1.isArray(elem) ? memo.concat(elem.reduce(exports.flattenR, [])) : pushR(memo, elem); };\n\t/** Reduce function that pushes an object to an array, then returns the array.  Mostly just for [[flattenR]] */\n\tfunction pushR(arr, obj) { arr.push(obj); return arr; }\n\texports.pushR = pushR;\n\t/** Reduce function that filters out duplicates */\n\texports.uniqR = function (acc, token) { return exports.inArray(acc, token) ? acc : pushR(acc, token); };\n\t/**\n\t * Return a new array with a single level of arrays unnested.\n\t *\n\t * @example\n\t * ```\n\t *\n\t * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n\t * unnest(input) // [ \"a\", \"b\", \"c\", \"d\", [ \"double, \"nested\" ] ]\n\t * ```\n\t */\n\texports.unnest = function (arr) { return arr.reduce(exports.unnestR, []); };\n\t/**\n\t * Return a completely flattened version of an array.\n\t *\n\t * @example\n\t * ```\n\t *\n\t * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n\t * flatten(input) // [ \"a\", \"b\", \"c\", \"d\", \"double, \"nested\" ]\n\t * ```\n\t */\n\texports.flatten = function (arr) { return arr.reduce(exports.flattenR, []); };\n\t/**\n\t * Given a .filter Predicate, builds a .filter Predicate which throws an error if any elements do not pass.\n\t * @example\n\t * ```\n\t *\n\t * let isNumber = (obj) => typeof(obj) === 'number';\n\t * let allNumbers = [ 1, 2, 3, 4, 5 ];\n\t * allNumbers.filter(assertPredicate(isNumber)); //OK\n\t *\n\t * let oneString = [ 1, 2, 3, 4, \"5\" ];\n\t * oneString.filter(assertPredicate(isNumber, \"Not all numbers\")); // throws Error(\"\"Not all numbers\"\");\n\t * ```\n\t */\n\tfunction assertPredicate(predicate, errMsg) {\n\t    if (errMsg === void 0) { errMsg = \"assert failure\"; }\n\t    return function (obj) {\n\t        if (!predicate(obj)) {\n\t            throw new Error(predicates_1.isFunction(errMsg) ? errMsg(obj) : errMsg);\n\t        }\n\t        return true;\n\t    };\n\t}\n\texports.assertPredicate = assertPredicate;\n\t/**\n\t * Like _.pairs: Given an object, returns an array of key/value pairs\n\t *\n\t * @example\n\t * ```\n\t *\n\t * pairs({ foo: \"FOO\", bar: \"BAR }) // [ [ \"foo\", \"FOO\" ], [ \"bar\": \"BAR\" ] ]\n\t * ```\n\t */\n\texports.pairs = function (object) { return Object.keys(object).map(function (key) { return [key, object[key]]; }); };\n\t/**\n\t * Given two or more parallel arrays, returns an array of tuples where\n\t * each tuple is composed of [ a[i], b[i], ... z[i] ]\n\t *\n\t * @example\n\t * ```\n\t *\n\t * let foo = [ 0, 2, 4, 6 ];\n\t * let bar = [ 1, 3, 5, 7 ];\n\t * let baz = [ 10, 30, 50, 70 ];\n\t * arrayTuples(foo, bar);       // [ [0, 1], [2, 3], [4, 5], [6, 7] ]\n\t * arrayTuples(foo, bar, baz);  // [ [0, 1, 10], [2, 3, 30], [4, 5, 50], [6, 7, 70] ]\n\t * ```\n\t */\n\tfunction arrayTuples() {\n\t    var arrayArgs = [];\n\t    for (var _i = 0; _i < arguments.length; _i++) {\n\t        arrayArgs[_i - 0] = arguments[_i];\n\t    }\n\t    if (arrayArgs.length === 0)\n\t        return [];\n\t    var length = arrayArgs.reduce(function (min, arr) { return Math.min(arr.length, min); }, 9007199254740991); // aka 2^53 − 1 aka Number.MAX_SAFE_INTEGER\n\t    return Array.apply(null, Array(length)).map(function (ignored, idx) { return arrayArgs.map(function (arr) { return arr[idx]; }); });\n\t}\n\texports.arrayTuples = arrayTuples;\n\t/**\n\t * Reduce function which builds an object from an array of [key, value] pairs.\n\t *\n\t * Each iteration sets the key/val pair on the memo object, then returns the memo for the next iteration.\n\t *\n\t * Each keyValueTuple should be an array with values [ key: string, value: any ]\n\t *\n\t * @example\n\t * ```\n\t *\n\t * var pairs = [ [\"fookey\", \"fooval\"], [\"barkey\", \"barval\"] ]\n\t *\n\t * var pairsToObj = pairs.reduce((memo, pair) => applyPairs(memo, pair), {})\n\t * // pairsToObj == { fookey: \"fooval\", barkey: \"barval\" }\n\t *\n\t * // Or, more simply:\n\t * var pairsToObj = pairs.reduce(applyPairs, {})\n\t * // pairsToObj == { fookey: \"fooval\", barkey: \"barval\" }\n\t * ```\n\t */\n\tfunction applyPairs(memo, keyValTuple) {\n\t    var key, value;\n\t    if (predicates_1.isArray(keyValTuple))\n\t        key = keyValTuple[0], value = keyValTuple[1];\n\t    if (!predicates_1.isString(key))\n\t        throw new Error(\"invalid parameters to applyPairs\");\n\t    memo[key] = value;\n\t    return memo;\n\t}\n\texports.applyPairs = applyPairs;\n\t/** Get the last element of an array */\n\tfunction tail(arr) {\n\t    return arr.length && arr[arr.length - 1] || undefined;\n\t}\n\texports.tail = tail;\n\t/**\n\t * shallow copy from src to dest\n\t *\n\t * note: This is a shallow copy, while angular.copy is a deep copy.\n\t * ui-router uses `copy` only to make copies of state parameters.\n\t */\n\tfunction _copy(src, dest) {\n\t    if (dest)\n\t        Object.keys(dest).forEach(function (key) { return delete dest[key]; });\n\t    if (!dest)\n\t        dest = {};\n\t    return exports.extend(dest, src);\n\t}\n\tfunction _forEach(obj, cb, _this) {\n\t    if (predicates_1.isArray(obj))\n\t        return obj.forEach(cb, _this);\n\t    Object.keys(obj).forEach(function (key) { return cb(obj[key], key); });\n\t}\n\tfunction _copyProps(to, from) { Object.keys(from).forEach(function (key) { return to[key] = from[key]; }); return to; }\n\tfunction _extend(toObj, rest) {\n\t    return restArgs(arguments, 1).filter(exports.identity).reduce(_copyProps, toObj);\n\t}\n\tfunction _equals(o1, o2) {\n\t    if (o1 === o2)\n\t        return true;\n\t    if (o1 === null || o2 === null)\n\t        return false;\n\t    if (o1 !== o1 && o2 !== o2)\n\t        return true; // NaN === NaN\n\t    var t1 = typeof o1, t2 = typeof o2;\n\t    if (t1 !== t2 || t1 !== 'object')\n\t        return false;\n\t    var tup = [o1, o2];\n\t    if (hof_1.all(predicates_1.isArray)(tup))\n\t        return _arraysEq(o1, o2);\n\t    if (hof_1.all(predicates_1.isDate)(tup))\n\t        return o1.getTime() === o2.getTime();\n\t    if (hof_1.all(predicates_1.isRegExp)(tup))\n\t        return o1.toString() === o2.toString();\n\t    if (hof_1.all(predicates_1.isFunction)(tup))\n\t        return true; // meh\n\t    var predicates = [predicates_1.isFunction, predicates_1.isArray, predicates_1.isDate, predicates_1.isRegExp];\n\t    if (predicates.map(hof_1.any).reduce(function (b, fn) { return b || !!fn(tup); }, false))\n\t        return false;\n\t    var key, keys = {};\n\t    for (key in o1) {\n\t        if (!_equals(o1[key], o2[key]))\n\t            return false;\n\t        keys[key] = true;\n\t    }\n\t    for (key in o2) {\n\t        if (!keys[key])\n\t            return false;\n\t    }\n\t    return true;\n\t}\n\tfunction _arraysEq(a1, a2) {\n\t    if (a1.length !== a2.length)\n\t        return false;\n\t    return arrayTuples(a1, a2).reduce(function (b, t) { return b && _equals(t[0], t[1]); }, true);\n\t}\n\t// issue #2676\n\texports.silenceUncaughtInPromise = function (promise) {\n\t    return promise.catch(function (e) { return 0; }) && promise;\n\t};\n\texports.silentRejection = function (error) {\n\t    return exports.silenceUncaughtInPromise(coreservices_1.services.$q.reject(error));\n\t};\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** Predicates @module common_predicates */ /** */\n\tvar hof_1 = __webpack_require__(5);\n\tvar toStr = Object.prototype.toString;\n\tvar tis = function (t) { return function (x) { return typeof (x) === t; }; };\n\texports.isUndefined = tis('undefined');\n\texports.isDefined = hof_1.not(exports.isUndefined);\n\texports.isNull = function (o) { return o === null; };\n\texports.isFunction = tis('function');\n\texports.isNumber = tis('number');\n\texports.isString = tis('string');\n\texports.isObject = function (x) { return x !== null && typeof x === 'object'; };\n\texports.isArray = Array.isArray;\n\texports.isDate = (function (x) { return toStr.call(x) === '[object Date]'; });\n\texports.isRegExp = (function (x) { return toStr.call(x) === '[object RegExp]'; });\n\t/**\n\t * Predicate which checks if a value is injectable\n\t *\n\t * A value is \"injectable\" if it is a function, or if it is an ng1 array-notation-style array\n\t * where all the elements in the array are Strings, except the last one, which is a Function\n\t */\n\tfunction isInjectable(val) {\n\t    if (exports.isArray(val) && val.length) {\n\t        var head = val.slice(0, -1), tail = val.slice(-1);\n\t        return !(head.filter(hof_1.not(exports.isString)).length || tail.filter(hof_1.not(exports.isFunction)).length);\n\t    }\n\t    return exports.isFunction(val);\n\t}\n\texports.isInjectable = isInjectable;\n\t/**\n\t * Predicate which checks if a value looks like a Promise\n\t *\n\t * It is probably a Promise if it's an object, and it has a `then` property which is a Function\n\t */\n\texports.isPromise = hof_1.and(exports.isObject, hof_1.pipe(hof_1.prop('then'), exports.isFunction));\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t/**\n\t * Higher order functions\n\t *\n\t * @module common_hof\n\t */ /** */\n\t\"use strict\";\n\t/**\n\t * Returns a new function for [Partial Application](https://en.wikipedia.org/wiki/Partial_application) of the original function.\n\t *\n\t * Given a function with N parameters, returns a new function that supports partial application.\n\t * The new function accepts anywhere from 1 to N parameters.  When that function is called with M parameters,\n\t * where M is less than N, it returns a new function that accepts the remaining parameters.  It continues to\n\t * accept more parameters until all N parameters have been supplied.\n\t *\n\t *\n\t * This contrived example uses a partially applied function as an predicate, which returns true\n\t * if an object is found in both arrays.\n\t * @example\n\t * ```\n\t * // returns true if an object is in both of the two arrays\n\t * function inBoth(array1, array2, object) {\n\t *   return array1.indexOf(object) !== -1 &&\n\t *          array2.indexOf(object) !== 1;\n\t * }\n\t * let obj1, obj2, obj3, obj4, obj5, obj6, obj7\n\t * let foos = [obj1, obj3]\n\t * let bars = [obj3, obj4, obj5]\n\t *\n\t * // A curried \"copy\" of inBoth\n\t * let curriedInBoth = curry(inBoth);\n\t * // Partially apply both the array1 and array2\n\t * let inFoosAndBars = curriedInBoth(foos, bars);\n\t *\n\t * // Supply the final argument; since all arguments are\n\t * // supplied, the original inBoth function is then called.\n\t * let obj1InBoth = inFoosAndBars(obj1); // false\n\t *\n\t * // Use the inFoosAndBars as a predicate.\n\t * // Filter, on each iteration, supplies the final argument\n\t * let allObjs = [ obj1, obj2, obj3, obj4, obj5, obj6, obj7 ];\n\t * let foundInBoth = allObjs.filter(inFoosAndBars); // [ obj3 ]\n\t *\n\t * ```\n\t *\n\t * Stolen from: http://stackoverflow.com/questions/4394747/javascript-curry-function\n\t *\n\t * @param fn\n\t * @returns {*|function(): (*|any)}\n\t */\n\tfunction curry(fn) {\n\t    var initial_args = [].slice.apply(arguments, [1]);\n\t    var func_args_length = fn.length;\n\t    function curried(args) {\n\t        if (args.length >= func_args_length)\n\t            return fn.apply(null, args);\n\t        return function () {\n\t            return curried(args.concat([].slice.apply(arguments)));\n\t        };\n\t    }\n\t    return curried(initial_args);\n\t}\n\texports.curry = curry;\n\t/**\n\t * Given a varargs list of functions, returns a function that composes the argument functions, right-to-left\n\t * given: f(x), g(x), h(x)\n\t * let composed = compose(f,g,h)\n\t * then, composed is: f(g(h(x)))\n\t */\n\tfunction compose() {\n\t    var args = arguments;\n\t    var start = args.length - 1;\n\t    return function () {\n\t        var i = start, result = args[start].apply(this, arguments);\n\t        while (i--)\n\t            result = args[i].call(this, result);\n\t        return result;\n\t    };\n\t}\n\texports.compose = compose;\n\t/**\n\t * Given a varargs list of functions, returns a function that is composes the argument functions, left-to-right\n\t * given: f(x), g(x), h(x)\n\t * let piped = pipe(f,g,h);\n\t * then, piped is: h(g(f(x)))\n\t */\n\tfunction pipe() {\n\t    var funcs = [];\n\t    for (var _i = 0; _i < arguments.length; _i++) {\n\t        funcs[_i - 0] = arguments[_i];\n\t    }\n\t    return compose.apply(null, [].slice.call(arguments).reverse());\n\t}\n\texports.pipe = pipe;\n\t/**\n\t * Given a property name, returns a function that returns that property from an object\n\t * let obj = { foo: 1, name: \"blarg\" };\n\t * let getName = prop(\"name\");\n\t * getName(obj) === \"blarg\"\n\t */\n\texports.prop = function (name) { return function (obj) { return obj && obj[name]; }; };\n\t/**\n\t * Given a property name and a value, returns a function that returns a boolean based on whether\n\t * the passed object has a property that matches the value\n\t * let obj = { foo: 1, name: \"blarg\" };\n\t * let getName = propEq(\"name\", \"blarg\");\n\t * getName(obj) === true\n\t */\n\texports.propEq = curry(function (name, val, obj) { return obj && obj[name] === val; });\n\t/**\n\t * Given a dotted property name, returns a function that returns a nested property from an object, or undefined\n\t * let obj = { id: 1, nestedObj: { foo: 1, name: \"blarg\" }, };\n\t * let getName = prop(\"nestedObj.name\");\n\t * getName(obj) === \"blarg\"\n\t * let propNotFound = prop(\"this.property.doesnt.exist\");\n\t * propNotFound(obj) === undefined\n\t */\n\texports.parse = function (name) { return pipe.apply(null, name.split(\".\").map(exports.prop)); };\n\t/**\n\t * Given a function that returns a truthy or falsey value, returns a\n\t * function that returns the opposite (falsey or truthy) value given the same inputs\n\t */\n\texports.not = function (fn) { return function () {\n\t    var args = [];\n\t    for (var _i = 0; _i < arguments.length; _i++) {\n\t        args[_i - 0] = arguments[_i];\n\t    }\n\t    return !fn.apply(null, args);\n\t}; };\n\t/**\n\t * Given two functions that return truthy or falsey values, returns a function that returns truthy\n\t * if both functions return truthy for the given arguments\n\t */\n\tfunction and(fn1, fn2) {\n\t    return function () {\n\t        var args = [];\n\t        for (var _i = 0; _i < arguments.length; _i++) {\n\t            args[_i - 0] = arguments[_i];\n\t        }\n\t        return fn1.apply(null, args) && fn2.apply(null, args);\n\t    };\n\t}\n\texports.and = and;\n\t/**\n\t * Given two functions that return truthy or falsey values, returns a function that returns truthy\n\t * if at least one of the functions returns truthy for the given arguments\n\t */\n\tfunction or(fn1, fn2) {\n\t    return function () {\n\t        var args = [];\n\t        for (var _i = 0; _i < arguments.length; _i++) {\n\t            args[_i - 0] = arguments[_i];\n\t        }\n\t        return fn1.apply(null, args) || fn2.apply(null, args);\n\t    };\n\t}\n\texports.or = or;\n\t/**\n\t * Check if all the elements of an array match a predicate function\n\t *\n\t * @param fn1 a predicate function `fn1`\n\t * @returns a function which takes an array and returns true if `fn1` is true for all elements of the array\n\t */\n\texports.all = function (fn1) { return function (arr) { return arr.reduce(function (b, x) { return b && !!fn1(x); }, true); }; };\n\texports.any = function (fn1) { return function (arr) { return arr.reduce(function (b, x) { return b || !!fn1(x); }, false); }; };\n\texports.none = exports.not(exports.any);\n\t/** Given a class, returns a Predicate function that returns true if the object is of that class */\n\texports.is = function (ctor) { return function (obj) { return (obj != null && obj.constructor === ctor || obj instanceof ctor); }; };\n\t/** Given a value, returns a Predicate function that returns true if another value is === equal to the original value */\n\texports.eq = function (val) { return function (other) { return val === other; }; };\n\t/** Given a value, returns a function which returns the value */\n\texports.val = function (v) { return function () { return v; }; };\n\tfunction invoke(fnName, args) {\n\t    return function (obj) { return obj[fnName].apply(obj, args); };\n\t}\n\texports.invoke = invoke;\n\t/**\n\t * Sorta like Pattern Matching (a functional programming conditional construct)\n\t *\n\t * See http://c2.com/cgi/wiki?PatternMatching\n\t *\n\t * This is a conditional construct which allows a series of predicates and output functions\n\t * to be checked and then applied.  Each predicate receives the input.  If the predicate\n\t * returns truthy, then its matching output function (mapping function) is provided with\n\t * the input and, then the result is returned.\n\t *\n\t * Each combination (2-tuple) of predicate + output function should be placed in an array\n\t * of size 2: [ predicate, mapFn ]\n\t *\n\t * These 2-tuples should be put in an outer array.\n\t *\n\t * @example\n\t * ```\n\t *\n\t * // Here's a 2-tuple where the first element is the isString predicate\n\t * // and the second element is a function that returns a description of the input\n\t * let firstTuple = [ angular.isString, (input) => `Heres your string ${input}` ];\n\t *\n\t * // Second tuple: predicate \"isNumber\", mapfn returns a description\n\t * let secondTuple = [ angular.isNumber, (input) => `(${input}) That's a number!` ];\n\t *\n\t * let third = [ (input) => input === null,  (input) => `Oh, null...` ];\n\t *\n\t * let fourth = [ (input) => input === undefined,  (input) => `notdefined` ];\n\t *\n\t * let descriptionOf = pattern([ firstTuple, secondTuple, third, fourth ]);\n\t *\n\t * console.log(descriptionOf(undefined)); // 'notdefined'\n\t * console.log(descriptionOf(55)); // '(55) That's a number!'\n\t * console.log(descriptionOf(\"foo\")); // 'Here's your string foo'\n\t * ```\n\t *\n\t * @param struct A 2D array.  Each element of the array should be an array, a 2-tuple,\n\t * with a Predicate and a mapping/output function\n\t * @returns {function(any): *}\n\t */\n\tfunction pattern(struct) {\n\t    return function (x) {\n\t        for (var i = 0; i < struct.length; i++) {\n\t            if (struct[i][0](x))\n\t                return struct[i][1](x);\n\t        }\n\t    };\n\t}\n\texports.pattern = pattern;\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t/**\n\t * This module is a stub for core services such as Dependency Injection or Browser Location.\n\t * Core services may be implemented by a specific framework, such as ng1 or ng2, or be pure javascript.\n\t *\n\t * @module common\n\t */\n\t\"use strict\";\n\t/** for typedoc */\n\t//import {IQService} from \"angular\";\n\t//import {IInjectorService} from \"angular\";\n\tvar notImplemented = function (fnname) { return function () {\n\t    throw new Error(fnname + \"(): No coreservices implementation for UI-Router is loaded. You should include one of: ['angular1.js']\");\n\t}; };\n\tvar services = {\n\t    $q: undefined,\n\t    $injector: undefined,\n\t    location: {},\n\t    locationConfig: {},\n\t    template: {}\n\t};\n\texports.services = services;\n\t[\"replace\", \"url\", \"path\", \"search\", \"hash\", \"onChange\"]\n\t    .forEach(function (key) { return services.location[key] = notImplemented(key); });\n\t[\"port\", \"protocol\", \"host\", \"baseHref\", \"html5Mode\", \"hashPrefix\"]\n\t    .forEach(function (key) { return services.locationConfig[key] = notImplemented(key); });\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t/** @module common */\n\t/**\n\t * Matches state names using glob-like patterns.\n\t *\n\t * See: [[StateService.includes]]\n\t */\n\tvar Glob = (function () {\n\t    function Glob(text) {\n\t        this.text = text;\n\t        this.glob = text.split('.');\n\t    }\n\t    Glob.prototype.matches = function (name) {\n\t        var segments = name.split('.');\n\t        // match single stars\n\t        for (var i = 0, l = this.glob.length; i < l; i++) {\n\t            if (this.glob[i] === '*')\n\t                segments[i] = '*';\n\t        }\n\t        // match greedy starts\n\t        if (this.glob[0] === '**') {\n\t            segments = segments.slice(segments.indexOf(this.glob[1]));\n\t            segments.unshift('**');\n\t        }\n\t        // match greedy ends\n\t        if (this.glob[this.glob.length - 1] === '**') {\n\t            segments.splice(segments.indexOf(this.glob[this.glob.length - 2]) + 1, Number.MAX_VALUE);\n\t            segments.push('**');\n\t        }\n\t        if (this.glob.length != segments.length)\n\t            return false;\n\t        return segments.join('') === this.glob.join('');\n\t    };\n\t    Glob.is = function (text) {\n\t        return text.indexOf('*') > -1;\n\t    };\n\t    Glob.fromString = function (text) {\n\t        if (!this.is(text))\n\t            return null;\n\t        return new Glob(text);\n\t    };\n\t    return Glob;\n\t}());\n\texports.Glob = Glob;\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\t/** @module common */ /** for typedoc */\n\t\"use strict\";\n\tvar Queue = (function () {\n\t    function Queue(_items, _limit) {\n\t        if (_items === void 0) { _items = []; }\n\t        if (_limit === void 0) { _limit = null; }\n\t        this._items = _items;\n\t        this._limit = _limit;\n\t    }\n\t    Queue.prototype.enqueue = function (item) {\n\t        var items = this._items;\n\t        items.push(item);\n\t        if (this._limit && items.length > this._limit)\n\t            items.shift();\n\t        return item;\n\t    };\n\t    Queue.prototype.dequeue = function () {\n\t        if (this.size())\n\t            return this._items.splice(0, 1)[0];\n\t    };\n\t    Queue.prototype.clear = function () {\n\t        var current = this._items;\n\t        this._items = [];\n\t        return current;\n\t    };\n\t    Queue.prototype.size = function () {\n\t        return this._items.length;\n\t    };\n\t    Queue.prototype.remove = function (item) {\n\t        var idx = this._items.indexOf(item);\n\t        return idx > -1 && this._items.splice(idx, 1)[0];\n\t    };\n\t    Queue.prototype.peekTail = function () {\n\t        return this._items[this._items.length - 1];\n\t    };\n\t    Queue.prototype.peekHead = function () {\n\t        if (this.size())\n\t            return this._items[0];\n\t    };\n\t    return Queue;\n\t}());\n\texports.Queue = Queue;\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/** @module common_strings */ /** */\n\t\"use strict\";\n\tvar predicates_1 = __webpack_require__(4);\n\tvar rejectFactory_1 = __webpack_require__(10);\n\tvar common_1 = __webpack_require__(3);\n\tvar hof_1 = __webpack_require__(5);\n\tvar transition_1 = __webpack_require__(11);\n\tvar resolvable_1 = __webpack_require__(19);\n\t/**\n\t * Returns a string shortened to a maximum length\n\t *\n\t * If the string is already less than the `max` length, return the string.\n\t * Else return the string, shortened to `max - 3` and append three dots (\"...\").\n\t *\n\t * @param max the maximum length of the string to return\n\t * @param str the input string\n\t */\n\tfunction maxLength(max, str) {\n\t    if (str.length <= max)\n\t        return str;\n\t    return str.substr(0, max - 3) + \"...\";\n\t}\n\texports.maxLength = maxLength;\n\t/**\n\t * Returns a string, with spaces added to the end, up to a desired str length\n\t *\n\t * If the string is already longer than the desired length, return the string.\n\t * Else returns the string, with extra spaces on the end, such that it reaches `length` characters.\n\t *\n\t * @param length the desired length of the string to return\n\t * @param str the input string\n\t */\n\tfunction padString(length, str) {\n\t    while (str.length < length)\n\t        str += \" \";\n\t    return str;\n\t}\n\texports.padString = padString;\n\tfunction kebobString(camelCase) {\n\t    return camelCase\n\t        .replace(/^([A-Z])/, function ($1) { return $1.toLowerCase(); }) // replace first char\n\t        .replace(/([A-Z])/g, function ($1) { return \"-\" + $1.toLowerCase(); }); // replace rest\n\t}\n\texports.kebobString = kebobString;\n\tfunction _toJson(obj) {\n\t    return JSON.stringify(obj);\n\t}\n\tfunction _fromJson(json) {\n\t    return predicates_1.isString(json) ? JSON.parse(json) : json;\n\t}\n\tfunction promiseToString(p) {\n\t    return \"Promise(\" + JSON.stringify(p) + \")\";\n\t}\n\tfunction functionToString(fn) {\n\t    var fnStr = fnToString(fn);\n\t    var namedFunctionMatch = fnStr.match(/^(function [^ ]+\\([^)]*\\))/);\n\t    return namedFunctionMatch ? namedFunctionMatch[1] : fnStr;\n\t}\n\texports.functionToString = functionToString;\n\tfunction fnToString(fn) {\n\t    var _fn = predicates_1.isArray(fn) ? fn.slice(-1)[0] : fn;\n\t    return _fn && _fn.toString() || \"undefined\";\n\t}\n\texports.fnToString = fnToString;\n\tvar stringifyPatternFn = null;\n\tvar stringifyPattern = function (value) {\n\t    var isTransitionRejectionPromise = rejectFactory_1.Rejection.isTransitionRejectionPromise;\n\t    stringifyPatternFn = stringifyPatternFn || hof_1.pattern([\n\t        [hof_1.not(predicates_1.isDefined), hof_1.val(\"undefined\")],\n\t        [predicates_1.isNull, hof_1.val(\"null\")],\n\t        [predicates_1.isPromise, hof_1.val(\"[Promise]\")],\n\t        [isTransitionRejectionPromise, function (x) { return x._transitionRejection.toString(); }],\n\t        [hof_1.is(rejectFactory_1.Rejection), hof_1.invoke(\"toString\")],\n\t        [hof_1.is(transition_1.Transition), hof_1.invoke(\"toString\")],\n\t        [hof_1.is(resolvable_1.Resolvable), hof_1.invoke(\"toString\")],\n\t        [predicates_1.isInjectable, functionToString],\n\t        [hof_1.val(true), common_1.identity]\n\t    ]);\n\t    return stringifyPatternFn(value);\n\t};\n\tfunction stringify(o) {\n\t    var seen = [];\n\t    function format(val) {\n\t        if (predicates_1.isObject(val)) {\n\t            if (seen.indexOf(val) !== -1)\n\t                return '[circular ref]';\n\t            seen.push(val);\n\t        }\n\t        return stringifyPattern(val);\n\t    }\n\t    return JSON.stringify(o, function (key, val) { return format(val); }).replace(/\\\\\"/g, '\"');\n\t}\n\texports.stringify = stringify;\n\t/** Returns a function that splits a string on a character or substring */\n\texports.beforeAfterSubstr = function (char) { return function (str) {\n\t    if (!str)\n\t        return [\"\", \"\"];\n\t    var idx = str.indexOf(char);\n\t    if (idx === -1)\n\t        return [str, \"\"];\n\t    return [str.substr(0, idx), str.substr(idx + 1)];\n\t}; };\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/** @module transition */ /** for typedoc */\n\t\"use strict\";\n\tvar common_1 = __webpack_require__(3);\n\tvar strings_1 = __webpack_require__(9);\n\t(function (RejectType) {\n\t    RejectType[RejectType[\"SUPERSEDED\"] = 2] = \"SUPERSEDED\";\n\t    RejectType[RejectType[\"ABORTED\"] = 3] = \"ABORTED\";\n\t    RejectType[RejectType[\"INVALID\"] = 4] = \"INVALID\";\n\t    RejectType[RejectType[\"IGNORED\"] = 5] = \"IGNORED\";\n\t    RejectType[RejectType[\"ERROR\"] = 6] = \"ERROR\";\n\t})(exports.RejectType || (exports.RejectType = {}));\n\tvar RejectType = exports.RejectType;\n\tvar Rejection = (function () {\n\t    function Rejection(type, message, detail) {\n\t        this.type = type;\n\t        this.message = message;\n\t        this.detail = detail;\n\t    }\n\t    Rejection.prototype.toString = function () {\n\t        var detailString = function (d) { return d && d.toString !== Object.prototype.toString ? d.toString() : strings_1.stringify(d); };\n\t        var type = this.type, message = this.message, detail = detailString(this.detail);\n\t        return \"TransitionRejection(type: \" + type + \", message: \" + message + \", detail: \" + detail + \")\";\n\t    };\n\t    Rejection.prototype.toPromise = function () {\n\t        return common_1.extend(common_1.silentRejection(this), { _transitionRejection: this });\n\t    };\n\t    /** Returns true if the obj is a rejected promise created from the `asPromise` factory */\n\t    Rejection.isTransitionRejectionPromise = function (obj) {\n\t        return obj && (typeof obj.then === 'function') && obj._transitionRejection instanceof Rejection;\n\t    };\n\t    /** Returns a TransitionRejection due to transition superseded */\n\t    Rejection.superseded = function (detail, options) {\n\t        var message = \"The transition has been superseded by a different transition (see detail).\";\n\t        var rejection = new Rejection(RejectType.SUPERSEDED, message, detail);\n\t        if (options && options.redirected) {\n\t            rejection.redirected = true;\n\t        }\n\t        return rejection;\n\t    };\n\t    /** Returns a TransitionRejection due to redirected transition */\n\t    Rejection.redirected = function (detail) {\n\t        return Rejection.superseded(detail, { redirected: true });\n\t    };\n\t    /** Returns a TransitionRejection due to invalid transition */\n\t    Rejection.invalid = function (detail) {\n\t        var message = \"This transition is invalid (see detail)\";\n\t        return new Rejection(RejectType.INVALID, message, detail);\n\t    };\n\t    /** Returns a TransitionRejection due to ignored transition */\n\t    Rejection.ignored = function (detail) {\n\t        var message = \"The transition was ignored.\";\n\t        return new Rejection(RejectType.IGNORED, message, detail);\n\t    };\n\t    /** Returns a TransitionRejection due to aborted transition */\n\t    Rejection.aborted = function (detail) {\n\t        // TODO think about how to encapsulate an Error() object\n\t        var message = \"The transition has been aborted.\";\n\t        return new Rejection(RejectType.ABORTED, message, detail);\n\t    };\n\t    /** Returns a TransitionRejection due to aborted transition */\n\t    Rejection.errored = function (detail) {\n\t        // TODO think about how to encapsulate an Error() object\n\t        var message = \"The transition errored.\";\n\t        return new Rejection(RejectType.ERROR, message, detail);\n\t    };\n\t    return Rejection;\n\t}());\n\texports.Rejection = Rejection;\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module transition */ /** for typedoc */\n\tvar trace_1 = __webpack_require__(12);\n\tvar coreservices_1 = __webpack_require__(6);\n\tvar common_1 = __webpack_require__(3);\n\tvar predicates_1 = __webpack_require__(4);\n\tvar hof_1 = __webpack_require__(5);\n\tvar transitionHook_1 = __webpack_require__(13);\n\tvar hookRegistry_1 = __webpack_require__(15);\n\tvar hookBuilder_1 = __webpack_require__(16);\n\tvar node_1 = __webpack_require__(21);\n\tvar pathFactory_1 = __webpack_require__(20);\n\tvar targetState_1 = __webpack_require__(14);\n\tvar param_1 = __webpack_require__(22);\n\tvar resolvable_1 = __webpack_require__(19);\n\tvar rejectFactory_1 = __webpack_require__(10);\n\tvar resolveContext_1 = __webpack_require__(17);\n\tvar router_1 = __webpack_require__(26);\n\tvar transitionCount = 0;\n\tvar stateSelf = hof_1.prop(\"self\");\n\t/**\n\t * Represents a transition between two states.\n\t *\n\t * When navigating to a state, we are transitioning **from** the current state **to** the new state.\n\t *\n\t * This object contains all contextual information about the to/from states, parameters, resolves.\n\t * It has information about all states being entered and exited as a result of the transition.\n\t */\n\tvar Transition = (function () {\n\t    /**\n\t     * Creates a new Transition object.\n\t     *\n\t     * If the target state is not valid, an error is thrown.\n\t     *\n\t     * @param fromPath The path of [[PathNode]]s from which the transition is leaving.  The last node in the `fromPath`\n\t     *        encapsulates the \"from state\".\n\t     * @param targetState The target state and parameters being transitioned to (also, the transition options)\n\t     * @param router The [[UIRouter]] instance\n\t     */\n\t    function Transition(fromPath, targetState, router) {\n\t        var _this = this;\n\t        /** @hidden */\n\t        this._deferred = coreservices_1.services.$q.defer();\n\t        /**\n\t         * This promise is resolved or rejected based on the outcome of the Transition.\n\t         *\n\t         * When the transition is successful, the promise is resolved\n\t         * When the transition is unsuccessful, the promise is rejected with the [[TransitionRejection]] or javascript error\n\t         */\n\t        this.promise = this._deferred.promise;\n\t        this.treeChanges = function () { return _this._treeChanges; };\n\t        this.isActive = function () { return _this === _this._options.current(); };\n\t        this.router = router;\n\t        if (!targetState.valid()) {\n\t            throw new Error(targetState.error());\n\t        }\n\t        // Makes the Transition instance a hook registry (onStart, etc)\n\t        hookRegistry_1.HookRegistry.mixin(new hookRegistry_1.HookRegistry(), this);\n\t        // current() is assumed to come from targetState.options, but provide a naive implementation otherwise.\n\t        this._options = common_1.extend({ current: hof_1.val(this) }, targetState.options());\n\t        this.$id = transitionCount++;\n\t        var toPath = pathFactory_1.PathFactory.buildToPath(fromPath, targetState);\n\t        this._treeChanges = pathFactory_1.PathFactory.treeChanges(fromPath, toPath, this._options.reloadState);\n\t        var enteringStates = this._treeChanges.entering.map(function (node) { return node.state; });\n\t        pathFactory_1.PathFactory.applyViewConfigs(router.transitionService.$view, this._treeChanges.to, enteringStates);\n\t        var rootResolvables = [\n\t            new resolvable_1.Resolvable(router_1.UIRouter, function () { return router; }, [], undefined, router),\n\t            new resolvable_1.Resolvable(Transition, function () { return _this; }, [], undefined, this),\n\t            new resolvable_1.Resolvable('$transition$', function () { return _this; }, [], undefined, this),\n\t            new resolvable_1.Resolvable('$stateParams', function () { return _this.params(); }, [], undefined, this.params())\n\t        ];\n\t        var rootNode = this._treeChanges.to[0];\n\t        var context = new resolveContext_1.ResolveContext(this._treeChanges.to);\n\t        context.addResolvables(rootResolvables, rootNode.state);\n\t    }\n\t    /** @inheritdoc */\n\t    Transition.prototype.onBefore = function (matchCriteria, callback, options) { throw \"\"; };\n\t    ;\n\t    /** @inheritdoc */\n\t    Transition.prototype.onStart = function (matchCriteria, callback, options) { throw \"\"; };\n\t    ;\n\t    /** @inheritdoc */\n\t    Transition.prototype.onExit = function (matchCriteria, callback, options) { throw \"\"; };\n\t    ;\n\t    /** @inheritdoc */\n\t    Transition.prototype.onRetain = function (matchCriteria, callback, options) { throw \"\"; };\n\t    ;\n\t    /** @inheritdoc */\n\t    Transition.prototype.onEnter = function (matchCriteria, callback, options) { throw \"\"; };\n\t    ;\n\t    /** @inheritdoc */\n\t    Transition.prototype.onFinish = function (matchCriteria, callback, options) { throw \"\"; };\n\t    ;\n\t    /** @inheritdoc */\n\t    Transition.prototype.onSuccess = function (matchCriteria, callback, options) { throw \"\"; };\n\t    ;\n\t    /** @inheritdoc */\n\t    Transition.prototype.onError = function (matchCriteria, callback, options) { throw \"\"; };\n\t    ;\n\t    Transition.prototype.$from = function () {\n\t        return common_1.tail(this._treeChanges.from).state;\n\t    };\n\t    Transition.prototype.$to = function () {\n\t        return common_1.tail(this._treeChanges.to).state;\n\t    };\n\t    /**\n\t     * Returns the \"from state\"\n\t     *\n\t     * @returns The state object for the Transition's \"from state\".\n\t     */\n\t    Transition.prototype.from = function () {\n\t        return this.$from().self;\n\t    };\n\t    /**\n\t     * Returns the \"to state\"\n\t     *\n\t     * @returns The state object for the Transition's target state (\"to state\").\n\t     */\n\t    Transition.prototype.to = function () {\n\t        return this.$to().self;\n\t    };\n\t    /**\n\t     * Determines whether two transitions are equivalent.\n\t     */\n\t    Transition.prototype.is = function (compare) {\n\t        if (compare instanceof Transition) {\n\t            // TODO: Also compare parameters\n\t            return this.is({ to: compare.$to().name, from: compare.$from().name });\n\t        }\n\t        return !((compare.to && !hookRegistry_1.matchState(this.$to(), compare.to)) ||\n\t            (compare.from && !hookRegistry_1.matchState(this.$from(), compare.from)));\n\t    };\n\t    /**\n\t     * Gets transition parameter values\n\t     *\n\t     * @param pathname Pick which treeChanges path to get parameters for:\n\t     *   (`'to'`, `'from'`, `'entering'`, `'exiting'`, `'retained'`)\n\t     * @returns transition parameter values for the desired path.\n\t     */\n\t    Transition.prototype.params = function (pathname) {\n\t        if (pathname === void 0) { pathname = \"to\"; }\n\t        return this._treeChanges[pathname].map(hof_1.prop(\"paramValues\")).reduce(common_1.mergeR, {});\n\t    };\n\t    /**\n\t     * Creates a [[UIInjector]] Dependency Injector\n\t     *\n\t     * Returns a Dependency Injector for the Transition's target state (to state).\n\t     * The injector provides resolve values which the target state has access to.\n\t     *\n\t     * The `UIInjector` can also provide values from the native root/global injector (ng1/ng2).\n\t     *\n\t     * If a `state` is provided, the injector that is returned will be limited to resolve values that the provided state has access to.\n\t     *\n\t     * @param state Limits the resolves provided to only the resolves the provided state has access to.\n\t     * @returns a [[UIInjector]]\n\t     */\n\t    Transition.prototype.injector = function (state) {\n\t        var path = this.treeChanges().to;\n\t        if (state)\n\t            path = pathFactory_1.PathFactory.subPath(path, function (node) { return node.state === state || node.state.name === state; });\n\t        return new resolveContext_1.ResolveContext(path).injector();\n\t    };\n\t    /**\n\t     * Gets all available resolve tokens (keys)\n\t     *\n\t     * This method can be used in conjunction with [[getResolve]] to inspect the resolve values\n\t     * available to the Transition.\n\t     *\n\t     * The returned tokens include those defined on [[StateDeclaration.resolve]] blocks, for the states\n\t     * in the Transition's [[TreeChanges.to]] path.\n\t     *\n\t     * @returns an array of resolve tokens (keys)\n\t     */\n\t    Transition.prototype.getResolveTokens = function () {\n\t        return new resolveContext_1.ResolveContext(this._treeChanges.to).getTokens();\n\t    };\n\t    /**\n\t     * Gets resolved values\n\t     *\n\t     * This method can be used in conjunction with [[getResolveTokens]] to inspect what resolve values\n\t     * are available to the Transition.\n\t     *\n\t     * Given a token, returns the resolved data for that token.\n\t     * Given an array of tokens, returns an array of resolved data for those tokens.\n\t     *\n\t     * If a resolvable hasn't yet been fetched, returns `undefined` for that token\n\t     * If a resolvable doesn't exist for the token, throws an error.\n\t     *\n\t     * @param token the token (or array of tokens)\n\t     *\n\t     * @returns an array of resolve tokens (keys)\n\t     */\n\t    Transition.prototype.getResolveValue = function (token) {\n\t        var resolveContext = new resolveContext_1.ResolveContext(this._treeChanges.to);\n\t        var getData = function (token) {\n\t            var resolvable = resolveContext.getResolvable(token);\n\t            if (resolvable === undefined) {\n\t                throw new Error(\"Dependency Injection token not found: ${stringify(token)}\");\n\t            }\n\t            return resolvable.data;\n\t        };\n\t        if (predicates_1.isArray(token)) {\n\t            return token.map(getData);\n\t        }\n\t        return getData(token);\n\t    };\n\t    /**\n\t     * Dynamically adds a new [[Resolvable]] (`resolve`) to this transition.\n\t     *\n\t     * @param resolvable an [[Resolvable]] object\n\t     * @param state the state in the \"to path\" which should receive the new resolve (otherwise, the root state)\n\t     */\n\t    Transition.prototype.addResolvable = function (resolvable, state) {\n\t        if (state === void 0) { state = \"\"; }\n\t        var stateName = (typeof state === \"string\") ? state : state.name;\n\t        var topath = this._treeChanges.to;\n\t        var targetNode = common_1.find(topath, function (node) { return node.state.name === stateName; });\n\t        var resolveContext = new resolveContext_1.ResolveContext(topath);\n\t        resolveContext.addResolvables([resolvable], targetNode.state);\n\t    };\n\t    /**\n\t     * Gets the previous transition, from which this transition was redirected.\n\t     *\n\t     * @returns The previous Transition, or null if this Transition is not the result of a redirection\n\t     */\n\t    Transition.prototype.previous = function () {\n\t        return this._options.previous || null;\n\t    };\n\t    /**\n\t     * Get the transition options\n\t     *\n\t     * @returns the options for this Transition.\n\t     */\n\t    Transition.prototype.options = function () {\n\t        return this._options;\n\t    };\n\t    /**\n\t     * Gets the states being entered.\n\t     *\n\t     * @returns an array of states that will be entered during this transition.\n\t     */\n\t    Transition.prototype.entering = function () {\n\t        return common_1.map(this._treeChanges.entering, hof_1.prop('state')).map(stateSelf);\n\t    };\n\t    /**\n\t     * Gets the states being exited.\n\t     *\n\t     * @returns an array of states that will be exited during this transition.\n\t     */\n\t    Transition.prototype.exiting = function () {\n\t        return common_1.map(this._treeChanges.exiting, hof_1.prop('state')).map(stateSelf).reverse();\n\t    };\n\t    /**\n\t     * Gets the states being retained.\n\t     *\n\t     * @returns an array of states that are already entered from a previous Transition, that will not be\n\t     *    exited during this Transition\n\t     */\n\t    Transition.prototype.retained = function () {\n\t        return common_1.map(this._treeChanges.retained, hof_1.prop('state')).map(stateSelf);\n\t    };\n\t    /**\n\t     * Get the [[ViewConfig]]s associated with this Transition\n\t     *\n\t     * Each state can define one or more views (template/controller), which are encapsulated as `ViewConfig` objects.\n\t     * This method fetches the `ViewConfigs` for a given path in the Transition (e.g., \"to\" or \"entering\").\n\t     *\n\t     * @param pathname the name of the path to fetch views for:\n\t     *   (`'to'`, `'from'`, `'entering'`, `'exiting'`, `'retained'`)\n\t     * @param state If provided, only returns the `ViewConfig`s for a single state in the path\n\t     *\n\t     * @returns a list of ViewConfig objects for the given path.\n\t     */\n\t    Transition.prototype.views = function (pathname, state) {\n\t        if (pathname === void 0) { pathname = \"entering\"; }\n\t        var path = this._treeChanges[pathname];\n\t        path = !state ? path : path.filter(hof_1.propEq('state', state));\n\t        return path.map(hof_1.prop(\"views\")).filter(common_1.identity).reduce(common_1.unnestR, []);\n\t    };\n\t    /**\n\t     * Creates a new transition that is a redirection of the current one.\n\t     *\n\t     * This transition can be returned from a [[TransitionService]] hook to\n\t     * redirect a transition to a new state and/or set of parameters.\n\t     *\n\t     * @returns Returns a new [[Transition]] instance.\n\t     */\n\t    Transition.prototype.redirect = function (targetState) {\n\t        var newOptions = common_1.extend({}, this.options(), targetState.options(), { previous: this });\n\t        targetState = new targetState_1.TargetState(targetState.identifier(), targetState.$state(), targetState.params(), newOptions);\n\t        var newTransition = this.router.transitionService.create(this._treeChanges.from, targetState);\n\t        var originalEnteringNodes = this.treeChanges().entering;\n\t        var redirectEnteringNodes = newTransition.treeChanges().entering;\n\t        // --- Re-use resolve data from original transition ---\n\t        // When redirecting from a parent state to a child state where the parent parameter values haven't changed\n\t        // (because of the redirect), the resolves fetched by the original transition are still valid in the\n\t        // redirected transition.\n\t        //\n\t        // This allows you to define a redirect on a parent state which depends on an async resolve value.\n\t        // You can wait for the resolve, then redirect to a child state based on the result.\n\t        // The redirected transition does not have to re-fetch the resolve.\n\t        // ---------------------------------------------------------\n\t        var nodeIsReloading = function (reloadState) { return function (node) {\n\t            return reloadState && node.state.includes[reloadState.name];\n\t        }; };\n\t        // Find any \"entering\" nodes in the redirect path that match the original path and aren't being reloaded\n\t        var matchingEnteringNodes = node_1.PathNode.matching(redirectEnteringNodes, originalEnteringNodes)\n\t            .filter(hof_1.not(nodeIsReloading(targetState.options().reloadState)));\n\t        // Use the existing (possibly pre-resolved) resolvables for the matching entering nodes.\n\t        matchingEnteringNodes.forEach(function (node, idx) {\n\t            node.resolvables = originalEnteringNodes[idx].resolvables;\n\t        });\n\t        return newTransition;\n\t    };\n\t    /** @hidden If a transition doesn't exit/enter any states, returns any [[Param]] whose value changed */\n\t    Transition.prototype._changedParams = function () {\n\t        var _a = this._treeChanges, to = _a.to, from = _a.from;\n\t        if (this._options.reload || common_1.tail(to).state !== common_1.tail(from).state)\n\t            return undefined;\n\t        var nodeSchemas = to.map(function (node) { return node.paramSchema; });\n\t        var _b = [to, from].map(function (path) { return path.map(function (x) { return x.paramValues; }); }), toValues = _b[0], fromValues = _b[1];\n\t        var tuples = common_1.arrayTuples(nodeSchemas, toValues, fromValues);\n\t        return tuples.map(function (_a) {\n\t            var schema = _a[0], toVals = _a[1], fromVals = _a[2];\n\t            return param_1.Param.changed(schema, toVals, fromVals);\n\t        }).reduce(common_1.unnestR, []);\n\t    };\n\t    /**\n\t     * Returns true if the transition is dynamic.\n\t     *\n\t     * A transition is dynamic if no states are entered nor exited, but at least one dynamic parameter has changed.\n\t     *\n\t     * @returns true if the Transition is dynamic\n\t     */\n\t    Transition.prototype.dynamic = function () {\n\t        var changes = this._changedParams();\n\t        return !changes ? false : changes.map(function (x) { return x.dynamic; }).reduce(common_1.anyTrueR, false);\n\t    };\n\t    /**\n\t     * Returns true if the transition is ignored.\n\t     *\n\t     * A transition is ignored if no states are entered nor exited, and no parameter values have changed.\n\t     *\n\t     * @returns true if the Transition is ignored.\n\t     */\n\t    Transition.prototype.ignored = function () {\n\t        var changes = this._changedParams();\n\t        return !changes ? false : changes.length === 0;\n\t    };\n\t    /**\n\t     * @hidden\n\t     */\n\t    Transition.prototype.hookBuilder = function () {\n\t        return new hookBuilder_1.HookBuilder(this.router.transitionService, this, {\n\t            transition: this,\n\t            current: this._options.current\n\t        });\n\t    };\n\t    /**\n\t     * Runs the transition\n\t     *\n\t     * This method is generally called from the [[StateService.transitionTo]]\n\t     *\n\t     * @returns a promise for a successful transition.\n\t     */\n\t    Transition.prototype.run = function () {\n\t        var _this = this;\n\t        var runSynchronousHooks = transitionHook_1.TransitionHook.runSynchronousHooks;\n\t        var hookBuilder = this.hookBuilder();\n\t        var globals = this.router.globals;\n\t        globals.transitionHistory.enqueue(this);\n\t        var syncResult = runSynchronousHooks(hookBuilder.getOnBeforeHooks());\n\t        if (rejectFactory_1.Rejection.isTransitionRejectionPromise(syncResult)) {\n\t            syncResult.catch(function () { return 0; }); // issue #2676\n\t            var rejectReason = syncResult._transitionRejection;\n\t            this._deferred.reject(rejectReason);\n\t            return this.promise;\n\t        }\n\t        if (!this.valid()) {\n\t            var error = new Error(this.error());\n\t            this._deferred.reject(error);\n\t            return this.promise;\n\t        }\n\t        if (this.ignored()) {\n\t            trace_1.trace.traceTransitionIgnored(this);\n\t            this._deferred.reject(rejectFactory_1.Rejection.ignored());\n\t            return this.promise;\n\t        }\n\t        // When the chain is complete, then resolve or reject the deferred\n\t        var transitionSuccess = function () {\n\t            trace_1.trace.traceSuccess(_this.$to(), _this);\n\t            _this.success = true;\n\t            _this._deferred.resolve(_this.to());\n\t            runSynchronousHooks(hookBuilder.getOnSuccessHooks(), true);\n\t        };\n\t        var transitionError = function (error) {\n\t            trace_1.trace.traceError(error, _this);\n\t            _this.success = false;\n\t            _this._deferred.reject(error);\n\t            runSynchronousHooks(hookBuilder.getOnErrorHooks(), true);\n\t        };\n\t        trace_1.trace.traceTransitionStart(this);\n\t        // Chain the next hook off the previous\n\t        var appendHookToChain = function (prev, nextHook) {\n\t            return prev.then(function () { return nextHook.invokeHook(); });\n\t        };\n\t        // Run the hooks, then resolve or reject the overall deferred in the .then() handler\n\t        hookBuilder.asyncHooks()\n\t            .reduce(appendHookToChain, syncResult)\n\t            .then(transitionSuccess, transitionError);\n\t        return this.promise;\n\t    };\n\t    /**\n\t     * Checks if the Transition is valid\n\t     *\n\t     * @returns true if the Transition is valid\n\t     */\n\t    Transition.prototype.valid = function () {\n\t        return !this.error();\n\t    };\n\t    /**\n\t     * The reason the Transition is invalid\n\t     *\n\t     * @returns an error message explaining why the transition is invalid\n\t     */\n\t    Transition.prototype.error = function () {\n\t        var state = this.$to();\n\t        if (state.self[common_1.abstractKey])\n\t            return \"Cannot transition to abstract state '\" + state.name + \"'\";\n\t        if (!param_1.Param.validates(state.parameters(), this.params()))\n\t            return \"Param values not valid for state '\" + state.name + \"'\";\n\t    };\n\t    /**\n\t     * A string representation of the Transition\n\t     *\n\t     * @returns A string representation of the Transition\n\t     */\n\t    Transition.prototype.toString = function () {\n\t        var fromStateOrName = this.from();\n\t        var toStateOrName = this.to();\n\t        var avoidEmptyHash = function (params) {\n\t            return (params[\"#\"] !== null && params[\"#\"] !== undefined) ? params : common_1.omit(params, \"#\");\n\t        };\n\t        // (X) means the to state is invalid.\n\t        var id = this.$id, from = predicates_1.isObject(fromStateOrName) ? fromStateOrName.name : fromStateOrName, fromParams = common_1.toJson(avoidEmptyHash(this._treeChanges.from.map(hof_1.prop('paramValues')).reduce(common_1.mergeR, {}))), toValid = this.valid() ? \"\" : \"(X) \", to = predicates_1.isObject(toStateOrName) ? toStateOrName.name : toStateOrName, toParams = common_1.toJson(avoidEmptyHash(this.params()));\n\t        return \"Transition#\" + id + \"( '\" + from + \"'\" + fromParams + \" -> \" + toValid + \"'\" + to + \"'\" + toParams + \" )\";\n\t    };\n\t    Transition.diToken = Transition;\n\t    return Transition;\n\t}());\n\texports.Transition = Transition;\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/**\n\t * UI-Router Transition Tracing\n\t *\n\t * Enable transition tracing to print transition information to the console, in order to help debug your application.\n\t * Tracing logs detailed information about each Transition to your console.\n\t *\n\t * To enable tracing, import the [[trace]] singleton and enable one or more categories.\n\t *\n\t * ES6\n\t * ```\n\t *\n\t * import {trace} from \"ui-router-ng2\"; // or \"angular-ui-router\"\n\t * trace.enable(1, 5); // TRANSITION and VIEWCONFIG\n\t * ```\n\t *\n\t * CJS\n\t * ```\n\t *\n\t * let trace = require(\"angular-ui-router\").trace; // or \"ui-router-ng2\"\n\t * trace.enable(\"TRANSITION\", \"VIEWCONFIG\");\n\t * ```\n\t *\n\t * Globals\n\t * ```\n\t *\n\t * let trace = window[\"angular-ui-router\"].trace; // or \"ui-router-ng2\"\n\t * trace.enable(); // Trace everything (very verbose)\n\t * ```\n\t *\n\t * @module trace\n\t */ /** for typedoc */\n\tvar hof_1 = __webpack_require__(5);\n\tvar predicates_1 = __webpack_require__(4);\n\tvar strings_1 = __webpack_require__(9);\n\t/** @hidden */\n\tfunction uiViewString(viewData) {\n\t    if (!viewData)\n\t        return 'ui-view (defunct)';\n\t    return (\"[ui-view#\" + viewData.id + \" tag \") +\n\t        (\"in template from '\" + (viewData.creationContext && viewData.creationContext.name || '(root)') + \"' state]: \") +\n\t        (\"fqn: '\" + viewData.fqn + \"', \") +\n\t        (\"name: '\" + viewData.name + \"@\" + viewData.creationContext + \"')\");\n\t}\n\t/** @hidden */\n\tvar viewConfigString = function (viewConfig) {\n\t    return (\"[ViewConfig#\" + viewConfig.$id + \" from '\" + (viewConfig.viewDecl.$context.name || '(root)') + \"' state]: target ui-view: '\" + viewConfig.viewDecl.$uiViewName + \"@\" + viewConfig.viewDecl.$uiViewContextAnchor + \"'\");\n\t};\n\t/** @hidden */\n\tfunction normalizedCat(input) {\n\t    return predicates_1.isNumber(input) ? Category[input] : Category[Category[input]];\n\t}\n\t/**\n\t * Trace categories\n\t *\n\t * [[Trace.enable]] or [[Trace.disable]] a category\n\t *\n\t * `trace.enable(Category.TRANSITION)`\n\t *\n\t * These can also be provided using a matching string, or position ordinal\n\t *\n\t * `trace.enable(\"TRANSITION\")`\n\t *\n\t * `trace.enable(1)`\n\t */\n\t(function (Category) {\n\t    Category[Category[\"RESOLVE\"] = 0] = \"RESOLVE\";\n\t    Category[Category[\"TRANSITION\"] = 1] = \"TRANSITION\";\n\t    Category[Category[\"HOOK\"] = 2] = \"HOOK\";\n\t    Category[Category[\"INVOKE\"] = 3] = \"INVOKE\";\n\t    Category[Category[\"UIVIEW\"] = 4] = \"UIVIEW\";\n\t    Category[Category[\"VIEWCONFIG\"] = 5] = \"VIEWCONFIG\";\n\t})(exports.Category || (exports.Category = {}));\n\tvar Category = exports.Category;\n\t/**\n\t * Prints UI-Router Transition trace information to the console.\n\t */\n\tvar Trace = (function () {\n\t    function Trace() {\n\t        /** @hidden */\n\t        this._enabled = {};\n\t        this.approximateDigests = 0;\n\t    }\n\t    /** @hidden */\n\t    Trace.prototype._set = function (enabled, categories) {\n\t        var _this = this;\n\t        if (!categories.length) {\n\t            categories = Object.keys(Category)\n\t                .filter(function (k) { return isNaN(parseInt(k, 10)); })\n\t                .map(function (key) { return Category[key]; });\n\t        }\n\t        categories.map(normalizedCat).forEach(function (category) { return _this._enabled[category] = enabled; });\n\t    };\n\t    /**\n\t     * Enables a trace [[Category]]\n\t     *\n\t     * ```\n\t     * trace.enable(\"TRANSITION\");\n\t     * ```\n\t     *\n\t     * @param categories categories to enable. If `categories` is omitted, all categories are enabled.\n\t     *        Also takes strings (category name) or ordinal (category position)\n\t     */\n\t    Trace.prototype.enable = function () {\n\t        var categories = [];\n\t        for (var _i = 0; _i < arguments.length; _i++) {\n\t            categories[_i - 0] = arguments[_i];\n\t        }\n\t        this._set(true, categories);\n\t    };\n\t    /**\n\t     * Disables a trace [[Category]]\n\t     *\n\t     * ```\n\t     * trace.disable(\"VIEWCONFIG\");\n\t     * ```\n\t     *\n\t     * @param categories categories to disable. If `categories` is omitted, all categories are disabled.\n\t     *        Also takes strings (category name) or ordinal (category position)\n\t     */\n\t    Trace.prototype.disable = function () {\n\t        var categories = [];\n\t        for (var _i = 0; _i < arguments.length; _i++) {\n\t            categories[_i - 0] = arguments[_i];\n\t        }\n\t        this._set(false, categories);\n\t    };\n\t    /**\n\t     * Retrieves the enabled stateus of a [[Category]]\n\t     *\n\t     * ```\n\t     * trace.enabled(\"VIEWCONFIG\"); // true or false\n\t     * ```\n\t     *\n\t     * @returns boolean true if the category is enabled\n\t     */\n\t    Trace.prototype.enabled = function (category) {\n\t        return !!this._enabled[normalizedCat(category)];\n\t    };\n\t    /** called by ui-router code */\n\t    Trace.prototype.traceTransitionStart = function (transition) {\n\t        if (!this.enabled(Category.TRANSITION))\n\t            return;\n\t        var tid = transition.$id, digest = this.approximateDigests, transitionStr = strings_1.stringify(transition);\n\t        console.log(\"Transition #\" + tid + \" Digest #\" + digest + \": Started  -> \" + transitionStr);\n\t    };\n\t    /** called by ui-router code */\n\t    Trace.prototype.traceTransitionIgnored = function (trans) {\n\t        if (!this.enabled(Category.TRANSITION))\n\t            return;\n\t        var tid = trans && trans.$id, digest = this.approximateDigests, transitionStr = strings_1.stringify(trans);\n\t        console.log(\"Transition #\" + tid + \" Digest #\" + digest + \": Ignored  <> \" + transitionStr);\n\t    };\n\t    /** called by ui-router code */\n\t    Trace.prototype.traceHookInvocation = function (step, options) {\n\t        if (!this.enabled(Category.HOOK))\n\t            return;\n\t        var tid = hof_1.parse(\"transition.$id\")(options), digest = this.approximateDigests, event = hof_1.parse(\"traceData.hookType\")(options) || \"internal\", context = hof_1.parse(\"traceData.context.state.name\")(options) || hof_1.parse(\"traceData.context\")(options) || \"unknown\", name = strings_1.functionToString(step.fn);\n\t        console.log(\"Transition #\" + tid + \" Digest #\" + digest + \":   Hook -> \" + event + \" context: \" + context + \", \" + strings_1.maxLength(200, name));\n\t    };\n\t    /** called by ui-router code */\n\t    Trace.prototype.traceHookResult = function (hookResult, transitionResult, transitionOptions) {\n\t        if (!this.enabled(Category.HOOK))\n\t            return;\n\t        var tid = hof_1.parse(\"transition.$id\")(transitionOptions), digest = this.approximateDigests, hookResultStr = strings_1.stringify(hookResult), transitionResultStr = strings_1.stringify(transitionResult);\n\t        console.log(\"Transition #\" + tid + \" Digest #\" + digest + \":   <- Hook returned: \" + strings_1.maxLength(200, hookResultStr) + \", transition result: \" + strings_1.maxLength(200, transitionResultStr));\n\t    };\n\t    /** called by ui-router code */\n\t    Trace.prototype.traceResolvePath = function (path, when, trans) {\n\t        if (!this.enabled(Category.RESOLVE))\n\t            return;\n\t        var tid = trans && trans.$id, digest = this.approximateDigests, pathStr = path && path.toString();\n\t        console.log(\"Transition #\" + tid + \" Digest #\" + digest + \":         Resolving \" + pathStr + \" (\" + when + \")\");\n\t    };\n\t    /** called by ui-router code */\n\t    Trace.prototype.traceResolvableResolved = function (resolvable, trans) {\n\t        if (!this.enabled(Category.RESOLVE))\n\t            return;\n\t        var tid = trans && trans.$id, digest = this.approximateDigests, resolvableStr = resolvable && resolvable.toString(), result = strings_1.stringify(resolvable.data);\n\t        console.log(\"Transition #\" + tid + \" Digest #\" + digest + \":               <- Resolved  \" + resolvableStr + \" to: \" + strings_1.maxLength(200, result));\n\t    };\n\t    /** called by ui-router code */\n\t    Trace.prototype.traceError = function (error, trans) {\n\t        if (!this.enabled(Category.TRANSITION))\n\t            return;\n\t        var tid = trans && trans.$id, digest = this.approximateDigests, transitionStr = strings_1.stringify(trans);\n\t        console.log(\"Transition #\" + tid + \" Digest #\" + digest + \": <- Rejected \" + transitionStr + \", reason: \" + error);\n\t    };\n\t    /** called by ui-router code */\n\t    Trace.prototype.traceSuccess = function (finalState, trans) {\n\t        if (!this.enabled(Category.TRANSITION))\n\t            return;\n\t        var tid = trans && trans.$id, digest = this.approximateDigests, state = finalState.name, transitionStr = strings_1.stringify(trans);\n\t        console.log(\"Transition #\" + tid + \" Digest #\" + digest + \": <- Success  \" + transitionStr + \", final state: \" + state);\n\t    };\n\t    /** called by ui-router code */\n\t    Trace.prototype.traceUIViewEvent = function (event, viewData, extra) {\n\t        if (extra === void 0) { extra = \"\"; }\n\t        if (!this.enabled(Category.UIVIEW))\n\t            return;\n\t        console.log(\"ui-view: \" + strings_1.padString(30, event) + \" \" + uiViewString(viewData) + extra);\n\t    };\n\t    /** called by ui-router code */\n\t    Trace.prototype.traceUIViewConfigUpdated = function (viewData, context) {\n\t        if (!this.enabled(Category.UIVIEW))\n\t            return;\n\t        this.traceUIViewEvent(\"Updating\", viewData, \" with ViewConfig from context='\" + context + \"'\");\n\t    };\n\t    /** called by ui-router code */\n\t    Trace.prototype.traceUIViewScopeCreated = function (viewData, newScope) {\n\t        if (!this.enabled(Category.UIVIEW))\n\t            return;\n\t        this.traceUIViewEvent(\"Created scope for\", viewData, \", scope #\" + newScope.$id);\n\t    };\n\t    /** called by ui-router code */\n\t    Trace.prototype.traceUIViewFill = function (viewData, html) {\n\t        if (!this.enabled(Category.UIVIEW))\n\t            return;\n\t        this.traceUIViewEvent(\"Fill\", viewData, \" with: \" + strings_1.maxLength(200, html));\n\t    };\n\t    /** called by ui-router code */\n\t    Trace.prototype.traceViewServiceEvent = function (event, viewConfig) {\n\t        if (!this.enabled(Category.VIEWCONFIG))\n\t            return;\n\t        console.log(\"VIEWCONFIG: \" + event + \" \" + viewConfigString(viewConfig));\n\t    };\n\t    /** called by ui-router code */\n\t    Trace.prototype.traceViewServiceUIViewEvent = function (event, viewData) {\n\t        if (!this.enabled(Category.VIEWCONFIG))\n\t            return;\n\t        console.log(\"VIEWCONFIG: \" + event + \" \" + uiViewString(viewData));\n\t    };\n\t    return Trace;\n\t}());\n\texports.Trace = Trace;\n\t/**\n\t * The [[Trace]] singleton\n\t *\n\t * @example\n\t * ```js\n\t *\n\t * import {trace} from \"angular-ui-router\";\n\t * trace.enable(1, 5);\n\t * ```\n\t */\n\tvar trace = new Trace();\n\texports.trace = trace;\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar common_1 = __webpack_require__(3);\n\tvar strings_1 = __webpack_require__(9);\n\tvar predicates_1 = __webpack_require__(4);\n\tvar hof_1 = __webpack_require__(5);\n\tvar trace_1 = __webpack_require__(12);\n\tvar coreservices_1 = __webpack_require__(6);\n\tvar rejectFactory_1 = __webpack_require__(10);\n\tvar targetState_1 = __webpack_require__(14);\n\tvar defaultOptions = {\n\t    async: true,\n\t    rejectIfSuperseded: true,\n\t    current: common_1.noop,\n\t    transition: null,\n\t    traceData: {},\n\t    bind: null\n\t};\n\t/** @hidden */\n\tvar TransitionHook = (function () {\n\t    function TransitionHook(transition, stateContext, hookFn, resolveContext, options) {\n\t        var _this = this;\n\t        this.transition = transition;\n\t        this.stateContext = stateContext;\n\t        this.hookFn = hookFn;\n\t        this.resolveContext = resolveContext;\n\t        this.options = options;\n\t        this.isSuperseded = function () { return _this.options.current() !== _this.options.transition; };\n\t        this.options = common_1.defaults(options, defaultOptions);\n\t    }\n\t    TransitionHook.prototype.invokeHook = function () {\n\t        var _a = this, options = _a.options, hookFn = _a.hookFn, resolveContext = _a.resolveContext;\n\t        trace_1.trace.traceHookInvocation(this, options);\n\t        if (options.rejectIfSuperseded && this.isSuperseded()) {\n\t            return rejectFactory_1.Rejection.superseded(options.current()).toPromise();\n\t        }\n\t        var hookResult = hookFn.call(options.bind, this.transition, this.stateContext);\n\t        return this.handleHookResult(hookResult);\n\t    };\n\t    /**\n\t     * This method handles the return value of a Transition Hook.\n\t     *\n\t     * A hook can return false, a redirect (TargetState), or a promise (which may resolve to false or a redirect)\n\t     */\n\t    TransitionHook.prototype.handleHookResult = function (hookResult) {\n\t        var _this = this;\n\t        if (!predicates_1.isDefined(hookResult))\n\t            return undefined;\n\t        /**\n\t         * Handles transition superseded, transition aborted and transition redirect.\n\t         */\n\t        var mapHookResult = hof_1.pattern([\n\t            // Transition is no longer current\n\t            [this.isSuperseded, function () { return rejectFactory_1.Rejection.superseded(_this.options.current()).toPromise(); }],\n\t            // If the hook returns false, abort the current Transition\n\t            [hof_1.eq(false), function () { return rejectFactory_1.Rejection.aborted(\"Hook aborted transition\").toPromise(); }],\n\t            // If the hook returns a Transition, halt the current Transition and redirect to that Transition.\n\t            [hof_1.is(targetState_1.TargetState), function (target) { return rejectFactory_1.Rejection.redirected(target).toPromise(); }],\n\t            // A promise was returned, wait for the promise and then chain another hookHandler\n\t            [predicates_1.isPromise, function (promise) { return promise.then(_this.handleHookResult.bind(_this)); }]\n\t        ]);\n\t        var transitionResult = mapHookResult(hookResult);\n\t        if (transitionResult)\n\t            trace_1.trace.traceHookResult(hookResult, transitionResult, this.options);\n\t        return transitionResult;\n\t    };\n\t    TransitionHook.prototype.toString = function () {\n\t        var _a = this, options = _a.options, hookFn = _a.hookFn;\n\t        var event = hof_1.parse(\"traceData.hookType\")(options) || \"internal\", context = hof_1.parse(\"traceData.context.state.name\")(options) || hof_1.parse(\"traceData.context\")(options) || \"unknown\", name = strings_1.fnToString(hookFn);\n\t        return event + \" context: \" + context + \", \" + strings_1.maxLength(200, name);\n\t    };\n\t    /**\n\t     * Given an array of TransitionHooks, runs each one synchronously and sequentially.\n\t     *\n\t     * Returns a promise chain composed of any promises returned from each hook.invokeStep() call\n\t     */\n\t    TransitionHook.runSynchronousHooks = function (hooks, swallowExceptions) {\n\t        if (swallowExceptions === void 0) { swallowExceptions = false; }\n\t        var results = [];\n\t        for (var i = 0; i < hooks.length; i++) {\n\t            try {\n\t                results.push(hooks[i].invokeHook());\n\t            }\n\t            catch (exception) {\n\t                if (!swallowExceptions) {\n\t                    return rejectFactory_1.Rejection.errored(exception).toPromise();\n\t                }\n\t                console.error(\"Swallowed exception during synchronous hook handler: \" + exception); // TODO: What to do here?\n\t            }\n\t        }\n\t        var rejections = results.filter(rejectFactory_1.Rejection.isTransitionRejectionPromise);\n\t        if (rejections.length)\n\t            return rejections[0];\n\t        return results\n\t            .filter(predicates_1.isPromise)\n\t            .reduce(function (chain, promise) { return chain.then(hof_1.val(promise)); }, coreservices_1.services.$q.when());\n\t    };\n\t    return TransitionHook;\n\t}());\n\texports.TransitionHook = TransitionHook;\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports) {\n\n\t/** @module state */ /** for typedoc */\n\t\"use strict\";\n\t/**\n\t * @ngdoc object\n\t * @name ui.router.state.type:TargetState\n\t *\n\t * @description\n\t * Encapsulate the desired target of a transition.\n\t * Wraps an identifier for a state, a set of parameters, and transition options with the definition of the state.\n\t *\n\t * @param {StateOrName} _identifier  An identifier for a state. Either a fully-qualified path, or the object\n\t *            used to define the state.\n\t * @param {IState} _definition The `State` object definition.\n\t * @param {ParamsOrArray} _params Parameters for the target state\n\t * @param {TransitionOptions} _options Transition options.\n\t */\n\tvar TargetState = (function () {\n\t    function TargetState(_identifier, _definition, _params, _options) {\n\t        if (_params === void 0) { _params = {}; }\n\t        if (_options === void 0) { _options = {}; }\n\t        this._identifier = _identifier;\n\t        this._definition = _definition;\n\t        this._options = _options;\n\t        this._params = _params || {};\n\t    }\n\t    TargetState.prototype.name = function () {\n\t        return this._definition && this._definition.name || this._identifier;\n\t    };\n\t    TargetState.prototype.identifier = function () {\n\t        return this._identifier;\n\t    };\n\t    TargetState.prototype.params = function () {\n\t        return this._params;\n\t    };\n\t    TargetState.prototype.$state = function () {\n\t        return this._definition;\n\t    };\n\t    TargetState.prototype.state = function () {\n\t        return this._definition && this._definition.self;\n\t    };\n\t    TargetState.prototype.options = function () {\n\t        return this._options;\n\t    };\n\t    TargetState.prototype.exists = function () {\n\t        return !!(this._definition && this._definition.self);\n\t    };\n\t    TargetState.prototype.valid = function () {\n\t        return !this.error();\n\t    };\n\t    TargetState.prototype.error = function () {\n\t        var base = this.options().relative;\n\t        if (!this._definition && !!base) {\n\t            var stateName = base.name ? base.name : base;\n\t            return \"Could not resolve '\" + this.name() + \"' from state '\" + stateName + \"'\";\n\t        }\n\t        if (!this._definition)\n\t            return \"No such state '\" + this.name() + \"'\";\n\t        if (!this._definition.self)\n\t            return \"State '\" + this.name() + \"' has an invalid definition\";\n\t    };\n\t    return TargetState;\n\t}());\n\texports.TargetState = TargetState;\n\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module transition */ /** for typedoc */\n\tvar common_1 = __webpack_require__(3);\n\tvar predicates_1 = __webpack_require__(4);\n\tvar glob_1 = __webpack_require__(7);\n\t/**\n\t * Determines if the given state matches the matchCriteria\n\t *\n\t * @hidden\n\t *\n\t * @param state a State Object to test against\n\t * @param criterion\n\t * - If a string, matchState uses the string as a glob-matcher against the state name\n\t * - If an array (of strings), matchState uses each string in the array as a glob-matchers against the state name\n\t *   and returns a positive match if any of the globs match.\n\t * - If a function, matchState calls the function with the state and returns true if the function's result is truthy.\n\t * @returns {boolean}\n\t */\n\tfunction matchState(state, criterion) {\n\t    var toMatch = predicates_1.isString(criterion) ? [criterion] : criterion;\n\t    function matchGlobs(_state) {\n\t        var globStrings = toMatch;\n\t        for (var i = 0; i < globStrings.length; i++) {\n\t            var glob = glob_1.Glob.fromString(globStrings[i]);\n\t            if ((glob && glob.matches(_state.name)) || (!glob && globStrings[i] === _state.name)) {\n\t                return true;\n\t            }\n\t        }\n\t        return false;\n\t    }\n\t    var matchFn = (predicates_1.isFunction(toMatch) ? toMatch : matchGlobs);\n\t    return !!matchFn(state);\n\t}\n\texports.matchState = matchState;\n\t/** @hidden */\n\tvar EventHook = (function () {\n\t    function EventHook(matchCriteria, callback, options) {\n\t        if (options === void 0) { options = {}; }\n\t        this.callback = callback;\n\t        this.matchCriteria = common_1.extend({ to: true, from: true, exiting: true, retained: true, entering: true }, matchCriteria);\n\t        this.priority = options.priority || 0;\n\t        this.bind = options.bind || null;\n\t    }\n\t    EventHook._matchingNodes = function (nodes, criterion) {\n\t        if (criterion === true)\n\t            return nodes;\n\t        var matching = nodes.filter(function (node) { return matchState(node.state, criterion); });\n\t        return matching.length ? matching : null;\n\t    };\n\t    /**\n\t     * Determines if this hook's [[matchCriteria]] match the given [[TreeChanges]]\n\t     *\n\t     * @returns an IMatchingNodes object, or null. If an IMatchingNodes object is returned, its values\n\t     * are the matching [[PathNode]]s for each [[HookMatchCriterion]] (to, from, exiting, retained, entering)\n\t     */\n\t    EventHook.prototype.matches = function (treeChanges) {\n\t        var mc = this.matchCriteria, _matchingNodes = EventHook._matchingNodes;\n\t        var matches = {\n\t            to: _matchingNodes([common_1.tail(treeChanges.to)], mc.to),\n\t            from: _matchingNodes([common_1.tail(treeChanges.from)], mc.from),\n\t            exiting: _matchingNodes(treeChanges.exiting, mc.exiting),\n\t            retained: _matchingNodes(treeChanges.retained, mc.retained),\n\t            entering: _matchingNodes(treeChanges.entering, mc.entering),\n\t        };\n\t        // Check if all the criteria matched the TreeChanges object\n\t        var allMatched = [\"to\", \"from\", \"exiting\", \"retained\", \"entering\"]\n\t            .map(function (prop) { return matches[prop]; })\n\t            .reduce(common_1.allTrueR, true);\n\t        return allMatched ? matches : null;\n\t    };\n\t    return EventHook;\n\t}());\n\texports.EventHook = EventHook;\n\t/** @hidden Return a registration function of the requested type. */\n\tfunction makeHookRegistrationFn(hooks, name) {\n\t    return function (matchObject, callback, options) {\n\t        if (options === void 0) { options = {}; }\n\t        var eventHook = new EventHook(matchObject, callback, options);\n\t        hooks[name].push(eventHook);\n\t        return function deregisterEventHook() {\n\t            common_1.removeFrom(hooks[name])(eventHook);\n\t        };\n\t    };\n\t}\n\t/**\n\t * Mixin class acts as a Transition Hook registry.\n\t *\n\t * Holds the registered [[HookFn]] objects.\n\t * Exposes functions to register new hooks.\n\t *\n\t * This is a Mixin class which can be applied to other objects.\n\t *\n\t * The hook registration functions are [[onBefore]], [[onStart]], [[onEnter]], [[onRetain]], [[onExit]], [[onFinish]], [[onSuccess]], [[onError]].\n\t *\n\t * This class is mixed into both the [[TransitionService]] and every [[Transition]] object.\n\t * Global hooks are added to the [[TransitionService]].\n\t * Since each [[Transition]] is itself a `HookRegistry`, hooks can also be added to individual Transitions\n\t * (note: the hook criteria still must match the Transition).\n\t */\n\tvar HookRegistry = (function () {\n\t    function HookRegistry() {\n\t        var _this = this;\n\t        this._transitionEvents = {\n\t            onBefore: [], onStart: [], onEnter: [], onRetain: [], onExit: [], onFinish: [], onSuccess: [], onError: []\n\t        };\n\t        this.getHooks = function (name) { return _this._transitionEvents[name]; };\n\t        /** @inheritdoc */\n\t        this.onBefore = makeHookRegistrationFn(this._transitionEvents, \"onBefore\");\n\t        /** @inheritdoc */\n\t        this.onStart = makeHookRegistrationFn(this._transitionEvents, \"onStart\");\n\t        /** @inheritdoc */\n\t        this.onEnter = makeHookRegistrationFn(this._transitionEvents, \"onEnter\");\n\t        /** @inheritdoc */\n\t        this.onRetain = makeHookRegistrationFn(this._transitionEvents, \"onRetain\");\n\t        /** @inheritdoc */\n\t        this.onExit = makeHookRegistrationFn(this._transitionEvents, \"onExit\");\n\t        /** @inheritdoc */\n\t        this.onFinish = makeHookRegistrationFn(this._transitionEvents, \"onFinish\");\n\t        /** @inheritdoc */\n\t        this.onSuccess = makeHookRegistrationFn(this._transitionEvents, \"onSuccess\");\n\t        /** @inheritdoc */\n\t        this.onError = makeHookRegistrationFn(this._transitionEvents, \"onError\");\n\t    }\n\t    HookRegistry.mixin = function (source, target) {\n\t        Object.keys(source._transitionEvents).concat([\"getHooks\"]).forEach(function (key) { return target[key] = source[key]; });\n\t    };\n\t    return HookRegistry;\n\t}());\n\texports.HookRegistry = HookRegistry;\n\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/** @module transition */ /** for typedoc */\n\t\"use strict\";\n\tvar common_1 = __webpack_require__(3);\n\tvar predicates_1 = __webpack_require__(4);\n\tvar transitionHook_1 = __webpack_require__(13);\n\tvar resolveContext_1 = __webpack_require__(17);\n\t/**\n\t * This class returns applicable TransitionHooks for a specific Transition instance.\n\t *\n\t * Hooks (IEventHook) may be registered globally, e.g., $transitions.onEnter(...), or locally, e.g.\n\t * myTransition.onEnter(...).  The HookBuilder finds matching IEventHooks (where the match criteria is\n\t * determined by the type of hook)\n\t *\n\t * The HookBuilder also converts IEventHooks objects to TransitionHook objects, which are used to run a Transition.\n\t *\n\t * The HookBuilder constructor is given the $transitions service and a Transition instance.  Thus, a HookBuilder\n\t * instance may only be used for one specific Transition object. (side note: the _treeChanges accessor is private\n\t * in the Transition class, so we must also provide the Transition's _treeChanges)\n\t *\n\t */\n\tvar HookBuilder = (function () {\n\t    function HookBuilder($transitions, transition, baseHookOptions) {\n\t        var _this = this;\n\t        this.$transitions = $transitions;\n\t        this.transition = transition;\n\t        this.baseHookOptions = baseHookOptions;\n\t        this.getOnBeforeHooks = function () { return _this._buildNodeHooks(\"onBefore\", \"to\", tupleSort(), { async: false }); };\n\t        this.getOnStartHooks = function () { return _this._buildNodeHooks(\"onStart\", \"to\", tupleSort()); };\n\t        this.getOnExitHooks = function () { return _this._buildNodeHooks(\"onExit\", \"exiting\", tupleSort(true), { stateHook: true }); };\n\t        this.getOnRetainHooks = function () { return _this._buildNodeHooks(\"onRetain\", \"retained\", tupleSort(false), { stateHook: true }); };\n\t        this.getOnEnterHooks = function () { return _this._buildNodeHooks(\"onEnter\", \"entering\", tupleSort(false), { stateHook: true }); };\n\t        this.getOnFinishHooks = function () { return _this._buildNodeHooks(\"onFinish\", \"to\", tupleSort()); };\n\t        this.getOnSuccessHooks = function () { return _this._buildNodeHooks(\"onSuccess\", \"to\", tupleSort(), { async: false, rejectIfSuperseded: false }); };\n\t        this.getOnErrorHooks = function () { return _this._buildNodeHooks(\"onError\", \"to\", tupleSort(), { async: false, rejectIfSuperseded: false }); };\n\t        this.treeChanges = transition.treeChanges();\n\t        this.toState = common_1.tail(this.treeChanges.to).state;\n\t        this.fromState = common_1.tail(this.treeChanges.from).state;\n\t        this.transitionOptions = transition.options();\n\t    }\n\t    HookBuilder.prototype.asyncHooks = function () {\n\t        var onStartHooks = this.getOnStartHooks();\n\t        var onExitHooks = this.getOnExitHooks();\n\t        var onRetainHooks = this.getOnRetainHooks();\n\t        var onEnterHooks = this.getOnEnterHooks();\n\t        var onFinishHooks = this.getOnFinishHooks();\n\t        var asyncHooks = [onStartHooks, onExitHooks, onRetainHooks, onEnterHooks, onFinishHooks];\n\t        return asyncHooks.reduce(common_1.unnestR, []).filter(common_1.identity);\n\t    };\n\t    /**\n\t     * Returns an array of newly built TransitionHook objects.\n\t     *\n\t     * - Finds all IEventHooks registered for the given `hookType` which matched the transition's [[TreeChanges]].\n\t     * - Finds [[PathNode]] (or `PathNode[]`) to use as the TransitionHook context(s)\n\t     * - For each of the [[PathNode]]s, creates a TransitionHook\n\t     *\n\t     * @param hookType the name of the hook registration function, e.g., 'onEnter', 'onFinish'.\n\t     * @param matchingNodesProp selects which [[PathNode]]s from the [[IMatchingNodes]] object to create hooks for.\n\t     * @param getLocals a function which accepts a [[PathNode]] and returns additional locals to provide to the hook as injectables\n\t     * @param sortHooksFn a function which compares two HookTuple and returns <1, 0, or >1\n\t     * @param options any specific Transition Hook Options\n\t     */\n\t    HookBuilder.prototype._buildNodeHooks = function (hookType, matchingNodesProp, sortHooksFn, options) {\n\t        var _this = this;\n\t        // Find all the matching registered hooks for a given hook type\n\t        var matchingHooks = this._matchingHooks(hookType, this.treeChanges);\n\t        if (!matchingHooks)\n\t            return [];\n\t        var makeTransitionHooks = function (hook) {\n\t            // Fetch the Nodes that caused this hook to match.\n\t            var matches = hook.matches(_this.treeChanges);\n\t            // Select the PathNode[] that will be used as TransitionHook context objects\n\t            var matchingNodes = matches[matchingNodesProp];\n\t            // When invoking 'exiting' hooks, give them the \"from path\" for resolve data.\n\t            // Everything else gets the \"to path\"\n\t            var resolvePath = matchingNodesProp === 'exiting' ? _this.treeChanges.from : _this.treeChanges.to;\n\t            var resolveContext = new resolveContext_1.ResolveContext(resolvePath);\n\t            // Return an array of HookTuples\n\t            return matchingNodes.map(function (node) {\n\t                var _options = common_1.extend({ bind: hook.bind, traceData: { hookType: hookType, context: node } }, _this.baseHookOptions, options);\n\t                var state = _options.stateHook ? node.state : null;\n\t                var context = resolveContext.subContext(node.state);\n\t                var transitionHook = new transitionHook_1.TransitionHook(_this.transition, state, hook.callback, context, _options);\n\t                return { hook: hook, node: node, transitionHook: transitionHook };\n\t            });\n\t        };\n\t        return matchingHooks.map(makeTransitionHooks)\n\t            .reduce(common_1.unnestR, [])\n\t            .sort(sortHooksFn)\n\t            .map(function (tuple) { return tuple.transitionHook; });\n\t    };\n\t    /**\n\t     * Finds all IEventHooks from:\n\t     * - The Transition object instance hook registry\n\t     * - The TransitionService ($transitions) global hook registry\n\t     *\n\t     * which matched:\n\t     * - the eventType\n\t     * - the matchCriteria (to, from, exiting, retained, entering)\n\t     *\n\t     * @returns an array of matched [[IEventHook]]s\n\t     */\n\t    HookBuilder.prototype._matchingHooks = function (hookName, treeChanges) {\n\t        return [this.transition, this.$transitions] // Instance and Global hook registries\n\t            .map(function (reg) { return reg.getHooks(hookName); }) // Get named hooks from registries\n\t            .filter(common_1.assertPredicate(predicates_1.isArray, \"broken event named: \" + hookName)) // Sanity check\n\t            .reduce(common_1.unnestR, []) // Un-nest IEventHook[][] to IEventHook[] array\n\t            .filter(function (hook) { return hook.matches(treeChanges); }); // Only those satisfying matchCriteria\n\t    };\n\t    return HookBuilder;\n\t}());\n\texports.HookBuilder = HookBuilder;\n\t/**\n\t * A factory for a sort function for HookTuples.\n\t *\n\t * The sort function first compares the PathNode depth (how deep in the state tree a node is), then compares\n\t * the EventHook priority.\n\t *\n\t * @param reverseDepthSort a boolean, when true, reverses the sort order for the node depth\n\t * @returns a tuple sort function\n\t */\n\tfunction tupleSort(reverseDepthSort) {\n\t    if (reverseDepthSort === void 0) { reverseDepthSort = false; }\n\t    return function nodeDepthThenPriority(l, r) {\n\t        var factor = reverseDepthSort ? -1 : 1;\n\t        var depthDelta = (l.node.state.path.length - r.node.state.path.length) * factor;\n\t        return depthDelta !== 0 ? depthDelta : r.hook.priority - l.hook.priority;\n\t    };\n\t}\n\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module resolve */ /** for typedoc */\n\tvar common_1 = __webpack_require__(3);\n\tvar hof_1 = __webpack_require__(5);\n\tvar trace_1 = __webpack_require__(12);\n\tvar coreservices_1 = __webpack_require__(6);\n\tvar interface_1 = __webpack_require__(18);\n\tvar resolvable_1 = __webpack_require__(19);\n\tvar pathFactory_1 = __webpack_require__(20);\n\tvar strings_1 = __webpack_require__(9);\n\tvar when = interface_1.resolvePolicies.when;\n\tvar ALL_WHENS = [when.EAGER, when.LAZY];\n\tvar EAGER_WHENS = [when.EAGER];\n\t/**\n\t * Encapsulates Depenency Injection for a path of nodes\n\t *\n\t * UI-Router states are organized as a tree.\n\t * A nested state has a path of ancestors to the root of the tree.\n\t * When a state is being activated, each element in the path is wrapped as a [[PathNode]].\n\t * A `PathNode` is a stateful object that holds things like parameters and resolvables for the state being activated.\n\t *\n\t * The ResolveContext closes over the [[PathNode]]s, and provides DI for the last node in the path.\n\t */\n\tvar ResolveContext = (function () {\n\t    function ResolveContext(_path) {\n\t        this._path = _path;\n\t    }\n\t    /** Gets all the tokens found in the resolve context, de-duplicated */\n\t    ResolveContext.prototype.getTokens = function () {\n\t        return this._path.reduce(function (acc, node) { return acc.concat(node.resolvables.map(function (r) { return r.token; })); }, []).reduce(common_1.uniqR, []);\n\t    };\n\t    /**\n\t     * Gets the Resolvable that matches the token\n\t     *\n\t     * Gets the last Resolvable that matches the token in this context, or undefined.\n\t     * Throws an error if it doesn't exist in the ResolveContext\n\t     */\n\t    ResolveContext.prototype.getResolvable = function (token) {\n\t        var matching = this._path.map(function (node) { return node.resolvables; })\n\t            .reduce(common_1.unnestR, [])\n\t            .filter(function (r) { return r.token === token; });\n\t        return common_1.tail(matching);\n\t    };\n\t    /**\n\t     * Returns a ResolveContext that includes a portion of this one\n\t     *\n\t     * Given a state, this method creates a new ResolveContext from this one.\n\t     * The new context starts at the first node (root) and stops at the node for the `state` parameter.\n\t     *\n\t     * #### Why\n\t     *\n\t     * When a transition is created, the nodes in the \"To Path\" are injected from a ResolveContext.\n\t     * A ResolveContext closes over a path of [[PathNode]]s and processes the resolvables.\n\t     * The \"To State\" can inject values from its own resolvables, as well as those from all its ancestor state's (node's).\n\t     * This method is used to create a narrower context when injecting ancestor nodes.\n\t     *\n\t     * @example\n\t     * `let ABCD = new ResolveContext([A, B, C, D]);`\n\t     *\n\t     * Given a path `[A, B, C, D]`, where `A`, `B`, `C` and `D` are nodes for states `a`, `b`, `c`, `d`:\n\t     * When injecting `D`, `D` should have access to all resolvables from `A`, `B`, `C`, `D`.\n\t     * However, `B` should only be able to access resolvables from `A`, `B`.\n\t     *\n\t     * When resolving for the `B` node, first take the full \"To Path\" Context `[A,B,C,D]` and limit to the subpath `[A,B]`.\n\t     * `let AB = ABCD.subcontext(a)`\n\t     */\n\t    ResolveContext.prototype.subContext = function (state) {\n\t        return new ResolveContext(pathFactory_1.PathFactory.subPath(this._path, function (node) { return node.state === state; }));\n\t    };\n\t    /**\n\t     * Adds Resolvables to the node that matches the state\n\t     *\n\t     * This adds a [[Resolvable]] (generally one created on the fly; not declared on a [[StateDeclaration.resolve]] block).\n\t     * The resolvable is added to the node matching the `state` parameter.\n\t     *\n\t     * These new resolvables are not automatically fetched.\n\t     * The calling code should either fetch them, fetch something that depends on them,\n\t     * or rely on [[resolvePath]] being called when some state is being entered.\n\t     *\n\t     * Note: each resolvable's [[ResolvePolicy]] is merged with the state's policy, and the global default.\n\t     *\n\t     * @param newResolvables the new Resolvables\n\t     * @param state Used to find the node to put the resolvable on\n\t     */\n\t    ResolveContext.prototype.addResolvables = function (newResolvables, state) {\n\t        var node = common_1.find(this._path, hof_1.propEq('state', state));\n\t        var keys = newResolvables.map(function (r) { return r.token; });\n\t        node.resolvables = node.resolvables.filter(function (r) { return keys.indexOf(r.token) === -1; }).concat(newResolvables);\n\t    };\n\t    /**\n\t     * Returns a promise for an array of resolved path Element promises\n\t     *\n\t     * @param when\n\t     * @param trans\n\t     * @returns {Promise<any>|any}\n\t     */\n\t    ResolveContext.prototype.resolvePath = function (when, trans) {\n\t        var _this = this;\n\t        if (when === void 0) { when = \"LAZY\"; }\n\t        // This option determines which 'when' policy Resolvables we are about to fetch.\n\t        var whenOption = common_1.inArray(ALL_WHENS, when) ? when : \"LAZY\";\n\t        // If the caller specified EAGER, only the EAGER Resolvables are fetched.\n\t        // if the caller specified LAZY, both EAGER and LAZY Resolvables are fetched.`\n\t        var matchedWhens = whenOption === interface_1.resolvePolicies.when.EAGER ? EAGER_WHENS : ALL_WHENS;\n\t        // get the subpath to the state argument, if provided\n\t        trace_1.trace.traceResolvePath(this._path, when, trans);\n\t        var promises = this._path.reduce(function (acc, node) {\n\t            var matchesRequestedPolicy = function (resolvable) {\n\t                return common_1.inArray(matchedWhens, resolvable.getPolicy(node.state).when);\n\t            };\n\t            var nodeResolvables = node.resolvables.filter(matchesRequestedPolicy);\n\t            var subContext = _this.subContext(node.state);\n\t            // For the matching Resolvables, start their async fetch process.\n\t            var getResult = function (r) { return r.get(subContext, trans)\n\t                .then(function (value) { return ({ token: r.token, value: value }); }); };\n\t            return acc.concat(nodeResolvables.map(getResult));\n\t        }, []);\n\t        return coreservices_1.services.$q.all(promises);\n\t    };\n\t    ResolveContext.prototype.injector = function () {\n\t        return new UIInjectorImpl(this);\n\t    };\n\t    ResolveContext.prototype.findNode = function (resolvable) {\n\t        return common_1.find(this._path, function (node) { return common_1.inArray(node.resolvables, resolvable); });\n\t    };\n\t    /**\n\t     * Gets the async dependencies of a Resolvable\n\t     *\n\t     * Given a Resolvable, returns its dependencies as a Resolvable[]\n\t     */\n\t    ResolveContext.prototype.getDependencies = function (resolvable) {\n\t        var node = this.findNode(resolvable);\n\t        // Find which other resolvables are \"visible\" to the `resolvable` argument\n\t        // subpath stopping at resolvable's node, or the whole path (if the resolvable isn't in the path)\n\t        var subPath = pathFactory_1.PathFactory.subPath(this._path, function (x) { return x === node; }) || this._path;\n\t        var availableResolvables = subPath\n\t            .reduce(function (acc, node) { return acc.concat(node.resolvables); }, []) //all of subpath's resolvables\n\t            .filter(function (res) { return res !== resolvable; }); // filter out the `resolvable` argument\n\t        var getDependency = function (token) {\n\t            var matching = availableResolvables.filter(function (r) { return r.token === token; });\n\t            if (matching.length)\n\t                return common_1.tail(matching);\n\t            var fromInjector = coreservices_1.services.$injector.get(token);\n\t            if (!fromInjector) {\n\t                throw new Error(\"Could not find Dependency Injection token: \" + strings_1.stringify(token));\n\t            }\n\t            return new resolvable_1.Resolvable(token, function () { return fromInjector; }, [], fromInjector);\n\t        };\n\t        return resolvable.deps.map(getDependency);\n\t    };\n\t    return ResolveContext;\n\t}());\n\texports.ResolveContext = ResolveContext;\n\tvar UIInjectorImpl = (function () {\n\t    function UIInjectorImpl(context) {\n\t        this.context = context;\n\t        /** The native injector ($injector on ng1, Root Injector on ng2, justjs injector for everything else) */\n\t        this.native = coreservices_1.services.$injector;\n\t    }\n\t    UIInjectorImpl.prototype.get = function (token) {\n\t        var resolvable = this.context.getResolvable(token);\n\t        if (resolvable) {\n\t            if (!resolvable.resolved) {\n\t                throw new Error(\"Resolvable async .get() not complete:\" + strings_1.stringify(resolvable.token));\n\t            }\n\t            return resolvable.data;\n\t        }\n\t        return coreservices_1.services.$injector.get(token);\n\t    };\n\t    UIInjectorImpl.prototype.getAsync = function (token) {\n\t        var resolvable = this.context.getResolvable(token);\n\t        if (resolvable)\n\t            return resolvable.get(this.context);\n\t        return coreservices_1.services.$q.when(coreservices_1.services.$injector.get(token));\n\t    };\n\t    return UIInjectorImpl;\n\t}());\n\n\n/***/ },\n/* 18 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\texports.resolvePolicies = {\n\t    when: {\n\t        LAZY: \"LAZY\",\n\t        EAGER: \"EAGER\"\n\t    },\n\t    async: {\n\t        WAIT: \"WAIT\",\n\t        NOWAIT: \"NOWAIT\",\n\t        RXWAIT: \"RXWAIT\"\n\t    }\n\t};\n\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module resolve */ /** for typedoc */\n\tvar common_1 = __webpack_require__(3);\n\tvar coreservices_1 = __webpack_require__(6);\n\tvar trace_1 = __webpack_require__(12);\n\tvar strings_1 = __webpack_require__(9);\n\tvar predicates_1 = __webpack_require__(4);\n\t// TODO: explicitly make this user configurable\n\texports.defaultResolvePolicy = {\n\t    when: \"LAZY\",\n\t    async: \"WAIT\"\n\t};\n\t/**\n\t * The basic building block for the resolve system.\n\t *\n\t * Resolvables encapsulate a state's resolve's resolveFn, the resolveFn's declared dependencies, the wrapped (.promise),\n\t * and the unwrapped-when-complete (.data) result of the resolveFn.\n\t *\n\t * Resolvable.get() either retrieves the Resolvable's existing promise, or else invokes resolve() (which invokes the\n\t * resolveFn) and returns the resulting promise.\n\t *\n\t * Resolvable.get() and Resolvable.resolve() both execute within a context path, which is passed as the first\n\t * parameter to those fns.\n\t */\n\tvar Resolvable = (function () {\n\t    function Resolvable(arg1, resolveFn, deps, policy, data) {\n\t        this.resolved = false;\n\t        this.promise = undefined;\n\t        if (arg1 instanceof Resolvable) {\n\t            common_1.extend(this, arg1);\n\t        }\n\t        else if (predicates_1.isFunction(resolveFn)) {\n\t            if (arg1 == null || arg1 == undefined)\n\t                throw new Error(\"new Resolvable(): token argument is required\");\n\t            if (!predicates_1.isFunction(resolveFn))\n\t                throw new Error(\"new Resolvable(): resolveFn argument must be a function\");\n\t            this.token = arg1;\n\t            this.policy = policy;\n\t            this.resolveFn = resolveFn;\n\t            this.deps = deps || [];\n\t            this.data = data;\n\t            this.resolved = data !== undefined;\n\t            this.promise = this.resolved ? coreservices_1.services.$q.when(this.data) : undefined;\n\t        }\n\t        else if (predicates_1.isObject(arg1) && arg1.token && predicates_1.isFunction(arg1.resolveFn)) {\n\t            var literal = arg1;\n\t            return new Resolvable(literal.token, literal.resolveFn, literal.deps, literal.policy, literal.data);\n\t        }\n\t    }\n\t    Resolvable.prototype.getPolicy = function (state) {\n\t        var thisPolicy = this.policy || {};\n\t        var statePolicy = state && state.resolvePolicy || {};\n\t        return {\n\t            when: thisPolicy.when || statePolicy.when || exports.defaultResolvePolicy.when,\n\t            async: thisPolicy.async || statePolicy.async || exports.defaultResolvePolicy.async,\n\t        };\n\t    };\n\t    /**\n\t     * Asynchronously resolve this Resolvable's data\n\t     *\n\t     * Given a ResolveContext that this Resolvable is found in:\n\t     * Wait for this Resolvable's dependencies, then invoke this Resolvable's function\n\t     * and update the Resolvable's state\n\t     */\n\t    Resolvable.prototype.resolve = function (resolveContext, trans) {\n\t        var _this = this;\n\t        var $q = coreservices_1.services.$q;\n\t        // Gets all dependencies from ResolveContext and wait for them to be resolved\n\t        var getResolvableDependencies = function () {\n\t            return $q.all(resolveContext.getDependencies(_this).map(function (r) {\n\t                return r.get(resolveContext, trans);\n\t            }));\n\t        };\n\t        // Invokes the resolve function passing the resolved dependencies as arguments\n\t        var invokeResolveFn = function (resolvedDeps) {\n\t            return _this.resolveFn.apply(null, resolvedDeps);\n\t        };\n\t        /**\n\t         * For RXWAIT policy:\n\t         *\n\t         * Given an observable returned from a resolve function:\n\t         * - enables .cache() mode (this allows multicast subscribers)\n\t         * - then calls toPromise() (this triggers subscribe() and thus fetches)\n\t         * - Waits for the promise, then return the cached observable (not the first emitted value).\n\t         */\n\t        var waitForRx = function (observable$) {\n\t            var cached = observable$.cache();\n\t            return cached.toPromise().then(function () { return cached; });\n\t        };\n\t        // If the resolve policy is RXWAIT, wait for the observable to emit something. otherwise pass through.\n\t        var node = resolveContext.findNode(this);\n\t        var state = node && node.state;\n\t        var maybeWaitForRx = this.getPolicy(state).async === \"RXWAIT\" ? waitForRx : function (x) { return x; };\n\t        // After the final value has been resolved, update the state of the Resolvable\n\t        var applyResolvedValue = function (resolvedValue) {\n\t            _this.data = resolvedValue;\n\t            _this.resolved = true;\n\t            trace_1.trace.traceResolvableResolved(_this, trans);\n\t            return _this.data;\n\t        };\n\t        // Sets the promise property first, then getsResolvableDependencies in the context of the promise chain. Always waits one tick.\n\t        return this.promise = $q.when()\n\t            .then(getResolvableDependencies)\n\t            .then(invokeResolveFn)\n\t            .then(maybeWaitForRx)\n\t            .then(applyResolvedValue);\n\t    };\n\t    /**\n\t     * Gets a promise for this Resolvable's data.\n\t     *\n\t     * Fetches the data and returns a promise.\n\t     * Returns the existing promise if it has already been fetched once.\n\t     */\n\t    Resolvable.prototype.get = function (resolveContext, trans) {\n\t        return this.promise || this.resolve(resolveContext, trans);\n\t    };\n\t    Resolvable.prototype.toString = function () {\n\t        return \"Resolvable(token: \" + strings_1.stringify(this.token) + \", requires: [\" + this.deps.map(strings_1.stringify) + \"])\";\n\t    };\n\t    Resolvable.prototype.clone = function () {\n\t        return new Resolvable(this);\n\t    };\n\t    return Resolvable;\n\t}());\n\texports.Resolvable = Resolvable;\n\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/** @module path */ /** for typedoc */\n\t\"use strict\";\n\tvar common_1 = __webpack_require__(3);\n\tvar hof_1 = __webpack_require__(5);\n\tvar targetState_1 = __webpack_require__(14);\n\tvar node_1 = __webpack_require__(21);\n\t/**\n\t * This class contains functions which convert TargetStates, Nodes and paths from one type to another.\n\t */\n\tvar PathFactory = (function () {\n\t    function PathFactory() {\n\t    }\n\t    /** Given a PathNode[], create an TargetState */\n\t    PathFactory.makeTargetState = function (path) {\n\t        var state = common_1.tail(path).state;\n\t        return new targetState_1.TargetState(state, state, path.map(hof_1.prop(\"paramValues\")).reduce(common_1.mergeR, {}));\n\t    };\n\t    PathFactory.buildPath = function (targetState) {\n\t        var toParams = targetState.params();\n\t        return targetState.$state().path.map(function (state) { return new node_1.PathNode(state).applyRawParams(toParams); });\n\t    };\n\t    /** Given a fromPath: PathNode[] and a TargetState, builds a toPath: PathNode[] */\n\t    PathFactory.buildToPath = function (fromPath, targetState) {\n\t        var toPath = PathFactory.buildPath(targetState);\n\t        if (targetState.options().inherit) {\n\t            return PathFactory.inheritParams(fromPath, toPath, Object.keys(targetState.params()));\n\t        }\n\t        return toPath;\n\t    };\n\t    /**\n\t     * Creates ViewConfig objects and adds to nodes.\n\t     *\n\t     * On each [[PathNode]], creates ViewConfig objects from the views: property of the node's state\n\t     */\n\t    PathFactory.applyViewConfigs = function ($view, path, states) {\n\t        // Only apply the viewConfigs to the nodes for the given states\n\t        path.filter(function (node) { return common_1.inArray(states, node.state); }).forEach(function (node) {\n\t            var viewDecls = common_1.values(node.state.views || {});\n\t            var subPath = PathFactory.subPath(path, function (n) { return n === node; });\n\t            var viewConfigs = viewDecls.map(function (view) { return $view.createViewConfig(subPath, view); });\n\t            node.views = viewConfigs.reduce(common_1.unnestR, []);\n\t        });\n\t    };\n\t    /**\n\t     * Given a fromPath and a toPath, returns a new to path which inherits parameters from the fromPath\n\t     *\n\t     * For a parameter in a node to be inherited from the from path:\n\t     * - The toPath's node must have a matching node in the fromPath (by state).\n\t     * - The parameter name must not be found in the toKeys parameter array.\n\t     *\n\t     * Note: the keys provided in toKeys are intended to be those param keys explicitly specified by some\n\t     * caller, for instance, $state.transitionTo(..., toParams).  If a key was found in toParams,\n\t     * it is not inherited from the fromPath.\n\t     */\n\t    PathFactory.inheritParams = function (fromPath, toPath, toKeys) {\n\t        if (toKeys === void 0) { toKeys = []; }\n\t        function nodeParamVals(path, state) {\n\t            var node = common_1.find(path, hof_1.propEq('state', state));\n\t            return common_1.extend({}, node && node.paramValues);\n\t        }\n\t        /**\n\t         * Given an [[PathNode]] \"toNode\", return a new [[PathNode]] with param values inherited from the\n\t         * matching node in fromPath.  Only inherit keys that aren't found in \"toKeys\" from the node in \"fromPath\"\"\n\t         */\n\t        function makeInheritedParamsNode(toNode) {\n\t            // All param values for the node (may include default key/vals, when key was not found in toParams)\n\t            var toParamVals = common_1.extend({}, toNode && toNode.paramValues);\n\t            // limited to only those keys found in toParams\n\t            var incomingParamVals = common_1.pick(toParamVals, toKeys);\n\t            toParamVals = common_1.omit(toParamVals, toKeys);\n\t            var fromParamVals = nodeParamVals(fromPath, toNode.state) || {};\n\t            // extend toParamVals with any fromParamVals, then override any of those those with incomingParamVals\n\t            var ownParamVals = common_1.extend(toParamVals, fromParamVals, incomingParamVals);\n\t            return new node_1.PathNode(toNode.state).applyRawParams(ownParamVals);\n\t        }\n\t        // The param keys specified by the incoming toParams\n\t        return toPath.map(makeInheritedParamsNode);\n\t    };\n\t    /**\n\t     * Computes the tree changes (entering, exiting) between a fromPath and toPath.\n\t     */\n\t    PathFactory.treeChanges = function (fromPath, toPath, reloadState) {\n\t        var keep = 0, max = Math.min(fromPath.length, toPath.length);\n\t        var staticParams = function (state) { return state.parameters({ inherit: false }).filter(hof_1.not(hof_1.prop('dynamic'))).map(hof_1.prop('id')); };\n\t        var nodesMatch = function (node1, node2) { return node1.equals(node2, staticParams(node1.state)); };\n\t        while (keep < max && fromPath[keep].state !== reloadState && nodesMatch(fromPath[keep], toPath[keep])) {\n\t            keep++;\n\t        }\n\t        /** Given a retained node, return a new node which uses the to node's param values */\n\t        function applyToParams(retainedNode, idx) {\n\t            var cloned = node_1.PathNode.clone(retainedNode);\n\t            cloned.paramValues = toPath[idx].paramValues;\n\t            return cloned;\n\t        }\n\t        var from, retained, exiting, entering, to;\n\t        from = fromPath;\n\t        retained = from.slice(0, keep);\n\t        exiting = from.slice(keep);\n\t        // Create a new retained path (with shallow copies of nodes) which have the params of the toPath mapped\n\t        var retainedWithToParams = retained.map(applyToParams);\n\t        entering = toPath.slice(keep);\n\t        to = (retainedWithToParams).concat(entering);\n\t        return { from: from, to: to, retained: retained, exiting: exiting, entering: entering };\n\t    };\n\t    /**\n\t     * Return a subpath of a path, which stops at the first matching node\n\t     *\n\t     * Given an array of nodes, returns a subset of the array starting from the first node,\n\t     * stopping when the first node matches the predicate.\n\t     *\n\t     * @param path a path of [[PathNode]]s\n\t     * @param predicate a [[Predicate]] fn that matches [[PathNode]]s\n\t     * @returns a subpath up to the matching node, or undefined if no match is found\n\t     */\n\t    PathFactory.subPath = function (path, predicate) {\n\t        var node = common_1.find(path, predicate);\n\t        var elementIdx = path.indexOf(node);\n\t        return elementIdx === -1 ? undefined : path.slice(0, elementIdx + 1);\n\t    };\n\t    /** Gets the raw parameter values from a path */\n\t    PathFactory.paramValues = function (path) { return path.reduce(function (acc, node) { return common_1.extend(acc, node.paramValues); }, {}); };\n\t    return PathFactory;\n\t}());\n\texports.PathFactory = PathFactory;\n\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module path */ /** for typedoc */\n\tvar common_1 = __webpack_require__(3);\n\tvar hof_1 = __webpack_require__(5);\n\tvar param_1 = __webpack_require__(22);\n\t/**\n\t * A node in a [[TreeChanges]] path\n\t *\n\t * For a [[TreeChanges]] path, this class holds the stateful information for a single node in the path.\n\t * Each PathNode corresponds to a state being entered, exited, or retained.\n\t * The stateful information includes parameter values and resolve data.\n\t */\n\tvar PathNode = (function () {\n\t    function PathNode(state) {\n\t        if (state instanceof PathNode) {\n\t            var node = state;\n\t            this.state = node.state;\n\t            this.paramSchema = node.paramSchema.slice();\n\t            this.paramValues = common_1.extend({}, node.paramValues);\n\t            this.resolvables = node.resolvables.slice();\n\t            this.views = node.views && node.views.slice();\n\t        }\n\t        else {\n\t            this.state = state;\n\t            this.paramSchema = state.parameters({ inherit: false });\n\t            this.paramValues = {};\n\t            this.resolvables = state.resolvables.map(function (res) { return res.clone(); });\n\t        }\n\t    }\n\t    /** Sets [[paramValues]] for the node, from the values of an object hash */\n\t    PathNode.prototype.applyRawParams = function (params) {\n\t        var getParamVal = function (paramDef) { return [paramDef.id, paramDef.value(params[paramDef.id])]; };\n\t        this.paramValues = this.paramSchema.reduce(function (memo, pDef) { return common_1.applyPairs(memo, getParamVal(pDef)); }, {});\n\t        return this;\n\t    };\n\t    /** Gets a specific [[Param]] metadata that belongs to the node */\n\t    PathNode.prototype.parameter = function (name) {\n\t        return common_1.find(this.paramSchema, hof_1.propEq(\"id\", name));\n\t    };\n\t    /**\n\t     * @returns true if the state and parameter values for another PathNode are\n\t     * equal to the state and param values for this PathNode\n\t     */\n\t    PathNode.prototype.equals = function (node, keys) {\n\t        var _this = this;\n\t        if (keys === void 0) { keys = this.paramSchema.map(hof_1.prop('id')); }\n\t        var paramValsEq = function (key) { return _this.parameter(key).type.equals(_this.paramValues[key], node.paramValues[key]); };\n\t        return this.state === node.state && keys.map(paramValsEq).reduce(common_1.allTrueR, true);\n\t    };\n\t    /** Returns a clone of the PathNode */\n\t    PathNode.clone = function (node) {\n\t        return new PathNode(node);\n\t    };\n\t    /**\n\t     * Returns a new path which is a subpath of the first path which matched the second path.\n\t     *\n\t     * The new path starts from root and contains any nodes that match the nodes in the second path.\n\t     * Nodes are compared using their state property and parameter values.\n\t     */\n\t    PathNode.matching = function (pathA, pathB) {\n\t        var matching = [];\n\t        for (var i = 0; i < pathA.length && i < pathB.length; i++) {\n\t            var a = pathA[i], b = pathB[i];\n\t            if (a.state !== b.state)\n\t                break;\n\t            if (!param_1.Param.equals(a.paramSchema, a.paramValues, b.paramValues))\n\t                break;\n\t            matching.push(a);\n\t        }\n\t        return matching;\n\t    };\n\t    return PathNode;\n\t}());\n\texports.PathNode = PathNode;\n\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module params */ /** for typedoc */\n\tvar common_1 = __webpack_require__(3);\n\tvar hof_1 = __webpack_require__(5);\n\tvar predicates_1 = __webpack_require__(4);\n\tvar coreservices_1 = __webpack_require__(6);\n\tvar urlMatcherConfig_1 = __webpack_require__(23);\n\tvar type_1 = __webpack_require__(24);\n\tvar paramTypes_1 = __webpack_require__(25);\n\tvar hasOwn = Object.prototype.hasOwnProperty;\n\tvar isShorthand = function (cfg) { return [\"value\", \"type\", \"squash\", \"array\", \"dynamic\"].filter(hasOwn.bind(cfg || {})).length === 0; };\n\t(function (DefType) {\n\t    DefType[DefType[\"PATH\"] = 0] = \"PATH\";\n\t    DefType[DefType[\"SEARCH\"] = 1] = \"SEARCH\";\n\t    DefType[DefType[\"CONFIG\"] = 2] = \"CONFIG\";\n\t})(exports.DefType || (exports.DefType = {}));\n\tvar DefType = exports.DefType;\n\tfunction unwrapShorthand(cfg) {\n\t    cfg = isShorthand(cfg) && { value: cfg } || cfg;\n\t    return common_1.extend(cfg, {\n\t        $$fn: predicates_1.isInjectable(cfg.value) ? cfg.value : function () { return cfg.value; }\n\t    });\n\t}\n\tfunction getType(cfg, urlType, location, id) {\n\t    if (cfg.type && urlType && urlType.name !== 'string')\n\t        throw new Error(\"Param '\" + id + \"' has two type configurations.\");\n\t    if (cfg.type && urlType && urlType.name === 'string' && paramTypes_1.paramTypes.type(cfg.type))\n\t        return paramTypes_1.paramTypes.type(cfg.type);\n\t    if (urlType)\n\t        return urlType;\n\t    if (!cfg.type)\n\t        return (location === DefType.CONFIG ? paramTypes_1.paramTypes.type(\"any\") : paramTypes_1.paramTypes.type(\"string\"));\n\t    return cfg.type instanceof type_1.ParamType ? cfg.type : paramTypes_1.paramTypes.type(cfg.type);\n\t}\n\t/**\n\t * returns false, true, or the squash value to indicate the \"default parameter url squash policy\".\n\t */\n\tfunction getSquashPolicy(config, isOptional) {\n\t    var squash = config.squash;\n\t    if (!isOptional || squash === false)\n\t        return false;\n\t    if (!predicates_1.isDefined(squash) || squash == null)\n\t        return urlMatcherConfig_1.matcherConfig.defaultSquashPolicy();\n\t    if (squash === true || predicates_1.isString(squash))\n\t        return squash;\n\t    throw new Error(\"Invalid squash policy: '\" + squash + \"'. Valid policies: false, true, or arbitrary string\");\n\t}\n\tfunction getReplace(config, arrayMode, isOptional, squash) {\n\t    var replace, configuredKeys, defaultPolicy = [\n\t        { from: \"\", to: (isOptional || arrayMode ? undefined : \"\") },\n\t        { from: null, to: (isOptional || arrayMode ? undefined : \"\") }\n\t    ];\n\t    replace = predicates_1.isArray(config.replace) ? config.replace : [];\n\t    if (predicates_1.isString(squash))\n\t        replace.push({ from: squash, to: undefined });\n\t    configuredKeys = common_1.map(replace, hof_1.prop(\"from\"));\n\t    return common_1.filter(defaultPolicy, function (item) { return configuredKeys.indexOf(item.from) === -1; }).concat(replace);\n\t}\n\tvar Param = (function () {\n\t    function Param(id, type, config, location) {\n\t        config = unwrapShorthand(config);\n\t        type = getType(config, type, location, id);\n\t        var arrayMode = getArrayMode();\n\t        type = arrayMode ? type.$asArray(arrayMode, location === DefType.SEARCH) : type;\n\t        var isOptional = config.value !== undefined;\n\t        var dynamic = predicates_1.isDefined(config.dynamic) ? !!config.dynamic : !!type.dynamic;\n\t        var squash = getSquashPolicy(config, isOptional);\n\t        var replace = getReplace(config, arrayMode, isOptional, squash);\n\t        // array config: param name (param[]) overrides default settings.  explicit config overrides param name.\n\t        function getArrayMode() {\n\t            var arrayDefaults = { array: (location === DefType.SEARCH ? \"auto\" : false) };\n\t            var arrayParamNomenclature = id.match(/\\[\\]$/) ? { array: true } : {};\n\t            return common_1.extend(arrayDefaults, arrayParamNomenclature, config).array;\n\t        }\n\t        common_1.extend(this, { id: id, type: type, location: location, squash: squash, replace: replace, isOptional: isOptional, dynamic: dynamic, config: config, array: arrayMode });\n\t    }\n\t    Param.prototype.isDefaultValue = function (value) {\n\t        return this.isOptional && this.type.equals(this.value(), value);\n\t    };\n\t    /**\n\t     * [Internal] Gets the decoded representation of a value if the value is defined, otherwise, returns the\n\t     * default value, which may be the result of an injectable function.\n\t     */\n\t    Param.prototype.value = function (value) {\n\t        var _this = this;\n\t        /**\n\t         * [Internal] Get the default value of a parameter, which may be an injectable function.\n\t         */\n\t        var $$getDefaultValue = function () {\n\t            if (!coreservices_1.services.$injector)\n\t                throw new Error(\"Injectable functions cannot be called at configuration time\");\n\t            var defaultValue = coreservices_1.services.$injector.invoke(_this.config.$$fn);\n\t            if (defaultValue !== null && defaultValue !== undefined && !_this.type.is(defaultValue))\n\t                throw new Error(\"Default value (\" + defaultValue + \") for parameter '\" + _this.id + \"' is not an instance of ParamType (\" + _this.type.name + \")\");\n\t            return defaultValue;\n\t        };\n\t        var $replace = function (val) {\n\t            var replacement = common_1.map(common_1.filter(_this.replace, hof_1.propEq('from', val)), hof_1.prop(\"to\"));\n\t            return replacement.length ? replacement[0] : val;\n\t        };\n\t        value = $replace(value);\n\t        return !predicates_1.isDefined(value) ? $$getDefaultValue() : this.type.$normalize(value);\n\t    };\n\t    Param.prototype.isSearch = function () {\n\t        return this.location === DefType.SEARCH;\n\t    };\n\t    Param.prototype.validates = function (value) {\n\t        // There was no parameter value, but the param is optional\n\t        if ((!predicates_1.isDefined(value) || value === null) && this.isOptional)\n\t            return true;\n\t        // The value was not of the correct ParamType, and could not be decoded to the correct ParamType\n\t        var normalized = this.type.$normalize(value);\n\t        if (!this.type.is(normalized))\n\t            return false;\n\t        // The value was of the correct type, but when encoded, did not match the ParamType's regexp\n\t        var encoded = this.type.encode(normalized);\n\t        return !(predicates_1.isString(encoded) && !this.type.pattern.exec(encoded));\n\t    };\n\t    Param.prototype.toString = function () {\n\t        return \"{Param:\" + this.id + \" \" + this.type + \" squash: '\" + this.squash + \"' optional: \" + this.isOptional + \"}\";\n\t    };\n\t    /** Creates a new [[Param]] from a CONFIG block */\n\t    Param.fromConfig = function (id, type, config) {\n\t        return new Param(id, type, config, DefType.CONFIG);\n\t    };\n\t    /** Creates a new [[Param]] from a url PATH */\n\t    Param.fromPath = function (id, type, config) {\n\t        return new Param(id, type, config, DefType.PATH);\n\t    };\n\t    /** Creates a new [[Param]] from a url SEARCH */\n\t    Param.fromSearch = function (id, type, config) {\n\t        return new Param(id, type, config, DefType.SEARCH);\n\t    };\n\t    Param.values = function (params, values) {\n\t        if (values === void 0) { values = {}; }\n\t        return params.map(function (param) { return [param.id, param.value(values[param.id])]; }).reduce(common_1.applyPairs, {});\n\t    };\n\t    /**\n\t     * Finds [[Param]] objects which have different param values\n\t     *\n\t     * Filters a list of [[Param]] objects to only those whose parameter values differ in two param value objects\n\t     *\n\t     * @param params: The list of Param objects to filter\n\t     * @param values1: The first set of parameter values\n\t     * @param values2: the second set of parameter values\n\t     *\n\t     * @returns any Param objects whose values were different between values1 and values2\n\t     */\n\t    Param.changed = function (params, values1, values2) {\n\t        if (values1 === void 0) { values1 = {}; }\n\t        if (values2 === void 0) { values2 = {}; }\n\t        return params.filter(function (param) { return !param.type.equals(values1[param.id], values2[param.id]); });\n\t    };\n\t    /**\n\t     * Checks if two param value objects are equal (for a set of [[Param]] objects)\n\t     *\n\t     * @param params The list of [[Param]] objects to check\n\t     * @param values1 The first set of param values\n\t     * @param values2 The second set of param values\n\t     *\n\t     * @returns true if the param values in values1 and values2 are equal\n\t     */\n\t    Param.equals = function (params, values1, values2) {\n\t        if (values1 === void 0) { values1 = {}; }\n\t        if (values2 === void 0) { values2 = {}; }\n\t        return Param.changed(params, values1, values2).length === 0;\n\t    };\n\t    /** Returns true if a the parameter values are valid, according to the Param definitions */\n\t    Param.validates = function (params, values) {\n\t        if (values === void 0) { values = {}; }\n\t        return params.map(function (param) { return param.validates(values[param.id]); }).reduce(common_1.allTrueR, true);\n\t    };\n\t    return Param;\n\t}());\n\texports.Param = Param;\n\n\n/***/ },\n/* 23 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module url */ /** for typedoc */\n\tvar predicates_1 = __webpack_require__(4);\n\tvar MatcherConfig = (function () {\n\t    function MatcherConfig() {\n\t        this._isCaseInsensitive = false;\n\t        this._isStrictMode = true;\n\t        this._defaultSquashPolicy = false;\n\t    }\n\t    MatcherConfig.prototype.caseInsensitive = function (value) {\n\t        return this._isCaseInsensitive = predicates_1.isDefined(value) ? value : this._isCaseInsensitive;\n\t    };\n\t    MatcherConfig.prototype.strictMode = function (value) {\n\t        return this._isStrictMode = predicates_1.isDefined(value) ? value : this._isStrictMode;\n\t    };\n\t    MatcherConfig.prototype.defaultSquashPolicy = function (value) {\n\t        if (predicates_1.isDefined(value) && value !== true && value !== false && !predicates_1.isString(value))\n\t            throw new Error(\"Invalid squash policy: \" + value + \". Valid policies: false, true, arbitrary-string\");\n\t        return this._defaultSquashPolicy = predicates_1.isDefined(value) ? value : this._defaultSquashPolicy;\n\t    };\n\t    return MatcherConfig;\n\t}());\n\texports.MatcherConfig = MatcherConfig;\n\t// TODO: Do not export global instance; create one in UIRouter() constructor\n\texports.matcherConfig = new MatcherConfig();\n\n\n/***/ },\n/* 24 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module params */ /** for typedoc */\n\tvar common_1 = __webpack_require__(3);\n\tvar predicates_1 = __webpack_require__(4);\n\t/**\n\t * Wraps up a `ParamType` object to handle array values.\n\t */\n\tfunction ArrayType(type, mode) {\n\t    var _this = this;\n\t    // Wrap non-array value as array\n\t    function arrayWrap(val) { return predicates_1.isArray(val) ? val : (predicates_1.isDefined(val) ? [val] : []); }\n\t    // Unwrap array value for \"auto\" mode. Return undefined for empty array.\n\t    function arrayUnwrap(val) {\n\t        switch (val.length) {\n\t            case 0: return undefined;\n\t            case 1: return mode === \"auto\" ? val[0] : val;\n\t            default: return val;\n\t        }\n\t    }\n\t    // Wraps type (.is/.encode/.decode) functions to operate on each value of an array\n\t    function arrayHandler(callback, allTruthyMode) {\n\t        return function handleArray(val) {\n\t            if (predicates_1.isArray(val) && val.length === 0)\n\t                return val;\n\t            var arr = arrayWrap(val);\n\t            var result = common_1.map(arr, callback);\n\t            return (allTruthyMode === true) ? common_1.filter(result, function (x) { return !x; }).length === 0 : arrayUnwrap(result);\n\t        };\n\t    }\n\t    // Wraps type (.equals) functions to operate on each value of an array\n\t    function arrayEqualsHandler(callback) {\n\t        return function handleArray(val1, val2) {\n\t            var left = arrayWrap(val1), right = arrayWrap(val2);\n\t            if (left.length !== right.length)\n\t                return false;\n\t            for (var i = 0; i < left.length; i++) {\n\t                if (!callback(left[i], right[i]))\n\t                    return false;\n\t            }\n\t            return true;\n\t        };\n\t    }\n\t    ['encode', 'decode', 'equals', '$normalize'].map(function (name) {\n\t        _this[name] = (name === 'equals' ? arrayEqualsHandler : arrayHandler)(type[name].bind(type));\n\t    });\n\t    common_1.extend(this, {\n\t        dynamic: type.dynamic,\n\t        name: type.name,\n\t        pattern: type.pattern,\n\t        is: arrayHandler(type.is.bind(type), true),\n\t        $arrayMode: mode\n\t    });\n\t}\n\t/**\n\t * A class that implements Custom Parameter Type functionality.\n\t *\n\t * This class has naive implementations for all the [[ParamTypeDefinition]] methods.\n\t *\n\t * An instance of this class is created when a custom [[ParamTypeDefinition]] object is registered with the [[UrlMatcherFactory.type]].\n\t *\n\t * Used by [[UrlMatcher]] when matching or formatting URLs, or comparing and validating parameter values.\n\t *\n\t * @example\n\t * ```\n\t *\n\t * {\n\t *   decode: function(val) { return parseInt(val, 10); },\n\t *   encode: function(val) { return val && val.toString(); },\n\t *   equals: function(a, b) { return this.is(a) && a === b; },\n\t *   is: function(val) { return angular.isNumber(val) && isFinite(val) && val % 1 === 0; },\n\t *   pattern: /\\d+/\n\t * }\n\t * ```\n\t */\n\tvar ParamType = (function () {\n\t    /**\n\t     * @param def  A configuration object which contains the custom type definition.  The object's\n\t     *        properties will override the default methods and/or pattern in `ParamType`'s public interface.\n\t     * @returns a new ParamType object\n\t     */\n\t    function ParamType(def) {\n\t        this.pattern = /.*/;\n\t        common_1.extend(this, def);\n\t    }\n\t    // consider these four methods to be \"abstract methods\" that should be overridden\n\t    /** @inheritdoc */\n\t    ParamType.prototype.is = function (val, key) { return true; };\n\t    /** @inheritdoc */\n\t    ParamType.prototype.encode = function (val, key) { return val; };\n\t    /** @inheritdoc */\n\t    ParamType.prototype.decode = function (val, key) { return val; };\n\t    /** @inheritdoc */\n\t    ParamType.prototype.equals = function (a, b) { return a == b; };\n\t    ParamType.prototype.$subPattern = function () {\n\t        var sub = this.pattern.toString();\n\t        return sub.substr(1, sub.length - 2);\n\t    };\n\t    ParamType.prototype.toString = function () {\n\t        return \"{ParamType:\" + this.name + \"}\";\n\t    };\n\t    /** Given an encoded string, or a decoded object, returns a decoded object */\n\t    ParamType.prototype.$normalize = function (val) {\n\t        return this.is(val) ? val : this.decode(val);\n\t    };\n\t    /**\n\t     * Wraps an existing custom ParamType as an array of ParamType, depending on 'mode'.\n\t     * e.g.:\n\t     * - urlmatcher pattern \"/path?{queryParam[]:int}\"\n\t     * - url: \"/path?queryParam=1&queryParam=2\n\t     * - $stateParams.queryParam will be [1, 2]\n\t     * if `mode` is \"auto\", then\n\t     * - url: \"/path?queryParam=1 will create $stateParams.queryParam: 1\n\t     * - url: \"/path?queryParam=1&queryParam=2 will create $stateParams.queryParam: [1, 2]\n\t     */\n\t    ParamType.prototype.$asArray = function (mode, isSearch) {\n\t        if (!mode)\n\t            return this;\n\t        if (mode === \"auto\" && !isSearch)\n\t            throw new Error(\"'auto' array mode is for query parameters only\");\n\t        return new ArrayType(this, mode);\n\t    };\n\t    return ParamType;\n\t}());\n\texports.ParamType = ParamType;\n\n\n/***/ },\n/* 25 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module params */ /** for typedoc */\n\tvar common_1 = __webpack_require__(3);\n\tvar predicates_1 = __webpack_require__(4);\n\tvar hof_1 = __webpack_require__(5);\n\tvar coreservices_1 = __webpack_require__(6);\n\tvar type_1 = __webpack_require__(24);\n\t// Use tildes to pre-encode slashes.\n\t// If the slashes are simply URLEncoded, the browser can choose to pre-decode them,\n\t// and bidirectional encoding/decoding fails.\n\t// Tilde was chosen because it's not a RFC 3986 section 2.2 Reserved Character\n\tfunction valToString(val) { return val != null ? val.toString().replace(/~/g, \"~~\").replace(/\\//g, \"~2F\") : val; }\n\tfunction valFromString(val) { return val != null ? val.toString().replace(/~2F/g, \"/\").replace(/~~/g, \"~\") : val; }\n\tvar ParamTypes = (function () {\n\t    function ParamTypes() {\n\t        this.enqueue = true;\n\t        this.typeQueue = [];\n\t        this.defaultTypes = {\n\t            \"hash\": {\n\t                encode: valToString,\n\t                decode: valFromString,\n\t                is: hof_1.is(String),\n\t                pattern: /.*/,\n\t                equals: function (a, b) { return a == b; } // allow coersion for null/undefined/\"\"\n\t            },\n\t            \"string\": {\n\t                encode: valToString,\n\t                decode: valFromString,\n\t                is: hof_1.is(String),\n\t                pattern: /[^/]*/\n\t            },\n\t            \"int\": {\n\t                encode: valToString,\n\t                decode: function (val) { return parseInt(val, 10); },\n\t                is: function (val) { return predicates_1.isDefined(val) && this.decode(val.toString()) === val; },\n\t                pattern: /-?\\d+/\n\t            },\n\t            \"bool\": {\n\t                encode: function (val) { return val && 1 || 0; },\n\t                decode: function (val) { return parseInt(val, 10) !== 0; },\n\t                is: hof_1.is(Boolean),\n\t                pattern: /0|1/\n\t            },\n\t            \"date\": {\n\t                encode: function (val) {\n\t                    return !this.is(val) ? undefined : [\n\t                        val.getFullYear(),\n\t                        ('0' + (val.getMonth() + 1)).slice(-2),\n\t                        ('0' + val.getDate()).slice(-2)\n\t                    ].join(\"-\");\n\t                },\n\t                decode: function (val) {\n\t                    if (this.is(val))\n\t                        return val;\n\t                    var match = this.capture.exec(val);\n\t                    return match ? new Date(match[1], match[2] - 1, match[3]) : undefined;\n\t                },\n\t                is: function (val) { return val instanceof Date && !isNaN(val.valueOf()); },\n\t                equals: function (l, r) {\n\t                    return ['getFullYear', 'getMonth', 'getDate']\n\t                        .reduce(function (acc, fn) { return acc && l[fn]() === r[fn](); }, true);\n\t                },\n\t                pattern: /[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,\n\t                capture: /([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/\n\t            },\n\t            \"json\": {\n\t                encode: common_1.toJson,\n\t                decode: common_1.fromJson,\n\t                is: hof_1.is(Object),\n\t                equals: common_1.equals,\n\t                pattern: /[^/]*/\n\t            },\n\t            \"any\": {\n\t                encode: common_1.identity,\n\t                decode: common_1.identity,\n\t                equals: common_1.equals,\n\t                pattern: /.*/\n\t            }\n\t        };\n\t        // Register default types. Store them in the prototype of this.types.\n\t        var makeType = function (definition, name) { return new type_1.ParamType(common_1.extend({ name: name }, definition)); };\n\t        this.types = common_1.inherit(common_1.map(this.defaultTypes, makeType), {});\n\t    }\n\t    ParamTypes.prototype.type = function (name, definition, definitionFn) {\n\t        if (!predicates_1.isDefined(definition))\n\t            return this.types[name];\n\t        if (this.types.hasOwnProperty(name))\n\t            throw new Error(\"A type named '\" + name + \"' has already been defined.\");\n\t        this.types[name] = new type_1.ParamType(common_1.extend({ name: name }, definition));\n\t        if (definitionFn) {\n\t            this.typeQueue.push({ name: name, def: definitionFn });\n\t            if (!this.enqueue)\n\t                this._flushTypeQueue();\n\t        }\n\t        return this;\n\t    };\n\t    ParamTypes.prototype._flushTypeQueue = function () {\n\t        while (this.typeQueue.length) {\n\t            var type = this.typeQueue.shift();\n\t            if (type.pattern)\n\t                throw new Error(\"You cannot override a type's .pattern at runtime.\");\n\t            common_1.extend(this.types[type.name], coreservices_1.services.$injector.invoke(type.def));\n\t        }\n\t    };\n\t    return ParamTypes;\n\t}());\n\texports.ParamTypes = ParamTypes;\n\texports.paramTypes = new ParamTypes();\n\n\n/***/ },\n/* 26 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module core */ /** */\n\tvar urlMatcherFactory_1 = __webpack_require__(27);\n\tvar urlRouter_1 = __webpack_require__(29);\n\tvar state_1 = __webpack_require__(30);\n\tvar urlRouter_2 = __webpack_require__(29);\n\tvar transitionService_1 = __webpack_require__(31);\n\tvar view_1 = __webpack_require__(37);\n\tvar stateRegistry_1 = __webpack_require__(38);\n\tvar stateService_1 = __webpack_require__(43);\n\tvar globals_1 = __webpack_require__(44);\n\t/**\n\t * The master class used to instantiate an instance of UI-Router.\n\t *\n\t * This class instantiates and wires the global UI-Router services.\n\t *\n\t * After instantiating a new instance of the Router class, configure it for your app.  For instance, register\n\t * your app states with the [[stateRegistry]] (and set url options using ...).  Then, tell UI-Router to monitor\n\t * the URL by calling `urlRouter.listen()` ([[URLRouter.listen]])\n\t */\n\tvar UIRouter = (function () {\n\t    function UIRouter() {\n\t        this.viewService = new view_1.ViewService();\n\t        this.transitionService = new transitionService_1.TransitionService(this);\n\t        this.globals = new globals_1.Globals(this.transitionService);\n\t        this.urlMatcherFactory = new urlMatcherFactory_1.UrlMatcherFactory();\n\t        this.urlRouterProvider = new urlRouter_1.UrlRouterProvider(this.urlMatcherFactory, this.globals.params);\n\t        this.urlRouter = new urlRouter_2.UrlRouter(this.urlRouterProvider);\n\t        this.stateRegistry = new stateRegistry_1.StateRegistry(this.urlMatcherFactory, this.urlRouterProvider);\n\t        /** @hidden TODO: move this to ng1.ts */\n\t        this.stateProvider = new state_1.StateProvider(this.stateRegistry);\n\t        this.stateService = new stateService_1.StateService(this);\n\t        this.viewService.rootContext(this.stateRegistry.root());\n\t        this.globals.$current = this.stateRegistry.root();\n\t        this.globals.current = this.globals.$current.self;\n\t    }\n\t    return UIRouter;\n\t}());\n\texports.UIRouter = UIRouter;\n\n\n/***/ },\n/* 27 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module url */ /** for typedoc */\n\tvar common_1 = __webpack_require__(3);\n\tvar predicates_1 = __webpack_require__(4);\n\tvar urlMatcher_1 = __webpack_require__(28);\n\tvar urlMatcherConfig_1 = __webpack_require__(23);\n\tvar param_1 = __webpack_require__(22);\n\tvar paramTypes_1 = __webpack_require__(25);\n\t/** @hidden */\n\tfunction getDefaultConfig() {\n\t    return {\n\t        strict: urlMatcherConfig_1.matcherConfig.strictMode(),\n\t        caseInsensitive: urlMatcherConfig_1.matcherConfig.caseInsensitive()\n\t    };\n\t}\n\t/**\n\t * Factory for [[UrlMatcher]] instances.\n\t *\n\t * The factory is available to ng1 services as\n\t * `$urlMatcherFactor` or ng1 providers as `$urlMatcherFactoryProvider`.\n\t */\n\tvar UrlMatcherFactory = (function () {\n\t    function UrlMatcherFactory() {\n\t        common_1.extend(this, { UrlMatcher: urlMatcher_1.UrlMatcher, Param: param_1.Param });\n\t    }\n\t    /**\n\t     * Defines whether URL matching should be case sensitive (the default behavior), or not.\n\t     *\n\t     * @param value `false` to match URL in a case sensitive manner; otherwise `true`;\n\t     * @returns the current value of caseInsensitive\n\t     */\n\t    UrlMatcherFactory.prototype.caseInsensitive = function (value) {\n\t        return urlMatcherConfig_1.matcherConfig.caseInsensitive(value);\n\t    };\n\t    /**\n\t     * Defines whether URLs should match trailing slashes, or not (the default behavior).\n\t     *\n\t     * @param value `false` to match trailing slashes in URLs, otherwise `true`.\n\t     * @returns the current value of strictMode\n\t     */\n\t    UrlMatcherFactory.prototype.strictMode = function (value) {\n\t        return urlMatcherConfig_1.matcherConfig.strictMode(value);\n\t    };\n\t    /**\n\t     * Sets the default behavior when generating or matching URLs with default parameter values.\n\t     *\n\t     * @param value A string that defines the default parameter URL squashing behavior.\n\t     *    - `nosquash`: When generating an href with a default parameter value, do not squash the parameter value from the URL\n\t     *    - `slash`: When generating an href with a default parameter value, squash (remove) the parameter value, and, if the\n\t     *             parameter is surrounded by slashes, squash (remove) one slash from the URL\n\t     *    - any other string, e.g. \"~\": When generating an href with a default parameter value, squash (remove)\n\t     *             the parameter value from the URL and replace it with this string.\n\t     * @returns the current value of defaultSquashPolicy\n\t     */\n\t    UrlMatcherFactory.prototype.defaultSquashPolicy = function (value) {\n\t        return urlMatcherConfig_1.matcherConfig.defaultSquashPolicy(value);\n\t    };\n\t    /**\n\t     * Creates a [[UrlMatcher]] for the specified pattern.\n\t     *\n\t     * @param pattern  The URL pattern.\n\t     * @param config  The config object hash.\n\t     * @returns The UrlMatcher.\n\t     */\n\t    UrlMatcherFactory.prototype.compile = function (pattern, config) {\n\t        return new urlMatcher_1.UrlMatcher(pattern, common_1.extend(getDefaultConfig(), config));\n\t    };\n\t    /**\n\t     * Returns true if the specified object is a [[UrlMatcher]], or false otherwise.\n\t     *\n\t     * @param object  The object to perform the type check against.\n\t     * @returns `true` if the object matches the `UrlMatcher` interface, by\n\t     *          implementing all the same methods.\n\t     */\n\t    UrlMatcherFactory.prototype.isMatcher = function (object) {\n\t        // TODO: typeof?\n\t        if (!predicates_1.isObject(object))\n\t            return false;\n\t        var result = true;\n\t        common_1.forEach(urlMatcher_1.UrlMatcher.prototype, function (val, name) {\n\t            if (predicates_1.isFunction(val))\n\t                result = result && (predicates_1.isDefined(object[name]) && predicates_1.isFunction(object[name]));\n\t        });\n\t        return result;\n\t    };\n\t    ;\n\t    /**\n\t     * Creates and registers a custom [[ParamType]] object that can be used to generate URLs with typed parameters.\n\t     *\n\t     * @param name  The type name.\n\t     * @param definition The type definition. See [[ParamTypeDefinition]] for information on the values accepted.\n\t     * @param definitionFn A function that is injected before the app\n\t     *        runtime starts.  The result of this function is merged into the existing `definition`.\n\t     *        See [[ParamType]] for information on the values accepted.\n\t     *\n\t     * @returns - if a type was registered: the [[UrlMatcherFactory]]\n\t     *   - if only the `name` parameter was specified: the currently registered [[ParamType]] object, or undefined\n\t     *\n\t     * This is a simple example of a custom type that encodes and decodes items from an\n\t     * array, using the array index as the URL-encoded value:\n\t     */\n\t    UrlMatcherFactory.prototype.type = function (name, definition, definitionFn) {\n\t        var type = paramTypes_1.paramTypes.type(name, definition, definitionFn);\n\t        return !predicates_1.isDefined(definition) ? type : this;\n\t    };\n\t    ;\n\t    /** @hidden */\n\t    UrlMatcherFactory.prototype.$get = function () {\n\t        paramTypes_1.paramTypes.enqueue = false;\n\t        paramTypes_1.paramTypes._flushTypeQueue();\n\t        return this;\n\t    };\n\t    ;\n\t    return UrlMatcherFactory;\n\t}());\n\texports.UrlMatcherFactory = UrlMatcherFactory;\n\n\n/***/ },\n/* 28 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module url */ /** for typedoc */\n\tvar common_1 = __webpack_require__(3);\n\tvar hof_1 = __webpack_require__(5);\n\tvar predicates_1 = __webpack_require__(4);\n\tvar param_1 = __webpack_require__(22);\n\tvar paramTypes_1 = __webpack_require__(25);\n\tvar predicates_2 = __webpack_require__(4);\n\tvar param_2 = __webpack_require__(22);\n\tvar common_2 = __webpack_require__(3);\n\tvar common_3 = __webpack_require__(3);\n\t/** @hidden */\n\tfunction quoteRegExp(string, param) {\n\t    var surroundPattern = ['', ''], result = string.replace(/[\\\\\\[\\]\\^$*+?.()|{}]/g, \"\\\\$&\");\n\t    if (!param)\n\t        return result;\n\t    switch (param.squash) {\n\t        case false:\n\t            surroundPattern = ['(', ')' + (param.isOptional ? '?' : '')];\n\t            break;\n\t        case true:\n\t            result = result.replace(/\\/$/, '');\n\t            surroundPattern = ['(?:\\/(', ')|\\/)?'];\n\t            break;\n\t        default:\n\t            surroundPattern = [(\"(\" + param.squash + \"|\"), ')?'];\n\t            break;\n\t    }\n\t    return result + surroundPattern[0] + param.type.pattern.source + surroundPattern[1];\n\t}\n\t/** @hidden */\n\tvar memoizeTo = function (obj, prop, fn) { return obj[prop] = obj[prop] || fn(); };\n\t/**\n\t * Matches URLs against patterns.\n\t *\n\t * Matches URLs against patterns and extracts named parameters from the path or the search\n\t * part of the URL.\n\t *\n\t * A URL pattern consists of a path pattern, optionally followed by '?' and a list of search (query)\n\t * parameters. Multiple search parameter names are separated by '&'. Search parameters\n\t * do not influence whether or not a URL is matched, but their values are passed through into\n\t * the matched parameters returned by [[UrlMatcher.exec]].\n\t *\n\t * - *Path parameters* are defined using curly brace placeholders (`/somepath/{param}`)\n\t * or colon placeholders (`/somePath/:param`).\n\t *\n\t * - *A parameter RegExp* may be defined for a param after a colon\n\t * (`/somePath/{param:[a-zA-Z0-9]+}`) in a curly brace placeholder.\n\t * The regexp must match for the url to be matched.\n\t * Should the regexp itself contain curly braces, they must be in matched pairs or escaped with a backslash.\n\t *\n\t * - *Custom parameter types* may also be specified after a colon (`/somePath/{param:int}`)\n\t * in curly brace parameters.  See [[UrlMatcherFactory.type]] for more information.\n\t *\n\t * - *Catch-all parameters* are defined using an asterisk placeholder (`/somepath/*catchallparam`).  A catch-all\n\t * parameter value will contain the remainder of the URL.\n\t *\n\t * ---\n\t *\n\t * Parameter names may contain only word characters (latin letters, digits, and underscore) and\n\t * must be unique within the pattern (across both path and search parameters).\n\t * A path parameter matches any number of characters other than '/'. For catch-all\n\t * placeholders the path parameter matches any number of characters.\n\t *\n\t * Examples:\n\t *\n\t * * `'/hello/'` - Matches only if the path is exactly '/hello/'. There is no special treatment for\n\t *   trailing slashes, and patterns have to match the entire path, not just a prefix.\n\t * * `'/user/:id'` - Matches '/user/bob' or '/user/1234!!!' or even '/user/' but not '/user' or\n\t *   '/user/bob/details'. The second path segment will be captured as the parameter 'id'.\n\t * * `'/user/{id}'` - Same as the previous example, but using curly brace syntax.\n\t * * `'/user/{id:[^/]*}'` - Same as the previous example.\n\t * * `'/user/{id:[0-9a-fA-F]{1,8}}'` - Similar to the previous example, but only matches if the id\n\t *   parameter consists of 1 to 8 hex digits.\n\t * * `'/files/{path:.*}'` - Matches any URL starting with '/files/' and captures the rest of the\n\t *   path into the parameter 'path'.\n\t * * `'/files/*path'` - ditto.\n\t * * `'/calendar/{start:date}'` - Matches \"/calendar/2014-11-12\" (because the pattern defined\n\t *   in the built-in  `date` ParamType matches `2014-11-12`) and provides a Date object in $stateParams.start\n\t *\n\t */\n\tvar UrlMatcher = (function () {\n\t    /**\n\t     * @param pattern The pattern to compile into a matcher.\n\t     * @param config  A configuration object hash\n\t     * * `caseInsensitive` - `true` if URL matching should be case insensitive, otherwise `false`, the default value (for backward compatibility) is `false`.\n\t     * * `strict` - `false` if matching against a URL with a trailing slash should be treated as equivalent to a URL without a trailing slash, the default value is `true`.\n\t     *\n\t     * @property {string} pattern  The pattern that was passed into the constructor\n\t     */\n\t    function UrlMatcher(pattern, config) {\n\t        var _this = this;\n\t        this.config = config;\n\t        /** @hidden */\n\t        this._cache = { path: [], pattern: null };\n\t        /** @hidden */\n\t        this._children = [];\n\t        /** @hidden */\n\t        this._params = [];\n\t        /** @hidden */\n\t        this._segments = [];\n\t        /** @hidden */\n\t        this._compiled = [];\n\t        this.pattern = pattern;\n\t        this.config = common_1.defaults(this.config, {\n\t            params: {},\n\t            strict: true,\n\t            caseInsensitive: false,\n\t            paramMap: common_1.identity\n\t        });\n\t        // Find all placeholders and create a compiled pattern, using either classic or curly syntax:\n\t        //   '*' name\n\t        //   ':' name\n\t        //   '{' name '}'\n\t        //   '{' name ':' regexp '}'\n\t        // The regular expression is somewhat complicated due to the need to allow curly braces\n\t        // inside the regular expression. The placeholder regexp breaks down as follows:\n\t        //    ([:*])([\\w\\[\\]]+)              - classic placeholder ($1 / $2) (search version has - for snake-case)\n\t        //    \\{([\\w\\[\\]]+)(?:\\:\\s*( ... ))?\\}  - curly brace placeholder ($3) with optional regexp/type ... ($4) (search version has - for snake-case\n\t        //    (?: ... | ... | ... )+         - the regexp consists of any number of atoms, an atom being either\n\t        //    [^{}\\\\]+                       - anything other than curly braces or backslash\n\t        //    \\\\.                            - a backslash escape\n\t        //    \\{(?:[^{}\\\\]+|\\\\.)*\\}          - a matched set of curly braces containing other atoms\n\t        var placeholder = /([:*])([\\w\\[\\]]+)|\\{([\\w\\[\\]]+)(?:\\:\\s*((?:[^{}\\\\]+|\\\\.|\\{(?:[^{}\\\\]+|\\\\.)*\\})+))?\\}/g, searchPlaceholder = /([:]?)([\\w\\[\\].-]+)|\\{([\\w\\[\\].-]+)(?:\\:\\s*((?:[^{}\\\\]+|\\\\.|\\{(?:[^{}\\\\]+|\\\\.)*\\})+))?\\}/g, last = 0, m, patterns = [];\n\t        var checkParamErrors = function (id) {\n\t            if (!UrlMatcher.nameValidator.test(id))\n\t                throw new Error(\"Invalid parameter name '\" + id + \"' in pattern '\" + pattern + \"'\");\n\t            if (common_1.find(_this._params, hof_1.propEq('id', id)))\n\t                throw new Error(\"Duplicate parameter name '\" + id + \"' in pattern '\" + pattern + \"'\");\n\t        };\n\t        // Split into static segments separated by path parameter placeholders.\n\t        // The number of segments is always 1 more than the number of parameters.\n\t        var matchDetails = function (m, isSearch) {\n\t            // IE[78] returns '' for unmatched groups instead of null\n\t            var id = m[2] || m[3], regexp = isSearch ? m[4] : m[4] || (m[1] === '*' ? '.*' : null);\n\t            return {\n\t                id: id,\n\t                regexp: regexp,\n\t                cfg: _this.config.params[id],\n\t                segment: pattern.substring(last, m.index),\n\t                type: !regexp ? null : paramTypes_1.paramTypes.type(regexp || \"string\") || common_1.inherit(paramTypes_1.paramTypes.type(\"string\"), {\n\t                    pattern: new RegExp(regexp, _this.config.caseInsensitive ? 'i' : undefined)\n\t                })\n\t            };\n\t        };\n\t        var p, segment;\n\t        while ((m = placeholder.exec(pattern))) {\n\t            p = matchDetails(m, false);\n\t            if (p.segment.indexOf('?') >= 0)\n\t                break; // we're into the search part\n\t            checkParamErrors(p.id);\n\t            this._params.push(param_1.Param.fromPath(p.id, p.type, this.config.paramMap(p.cfg, false)));\n\t            this._segments.push(p.segment);\n\t            patterns.push([p.segment, common_1.tail(this._params)]);\n\t            last = placeholder.lastIndex;\n\t        }\n\t        segment = pattern.substring(last);\n\t        // Find any search parameter names and remove them from the last segment\n\t        var i = segment.indexOf('?');\n\t        if (i >= 0) {\n\t            var search = segment.substring(i);\n\t            segment = segment.substring(0, i);\n\t            if (search.length > 0) {\n\t                last = 0;\n\t                while ((m = searchPlaceholder.exec(search))) {\n\t                    p = matchDetails(m, true);\n\t                    checkParamErrors(p.id);\n\t                    this._params.push(param_1.Param.fromSearch(p.id, p.type, this.config.paramMap(p.cfg, true)));\n\t                    last = placeholder.lastIndex;\n\t                }\n\t            }\n\t        }\n\t        this._segments.push(segment);\n\t        common_1.extend(this, {\n\t            _compiled: patterns.map(function (pattern) { return quoteRegExp.apply(null, pattern); }).concat(quoteRegExp(segment)),\n\t            prefix: this._segments[0]\n\t        });\n\t        Object.freeze(this);\n\t    }\n\t    /**\n\t     * Creates a new concatenated UrlMatcher\n\t     *\n\t     * Builds a new UrlMatcher by appending another UrlMatcher to this one.\n\t     *\n\t     * @param url A `UrlMatcher` instance to append as a child of the current `UrlMatcher`.\n\t     */\n\t    UrlMatcher.prototype.append = function (url) {\n\t        this._children.push(url);\n\t        common_1.forEach(url._cache, function (val, key) { return url._cache[key] = predicates_1.isArray(val) ? [] : null; });\n\t        url._cache.path = this._cache.path.concat(this);\n\t        return url;\n\t    };\n\t    /** @hidden */\n\t    UrlMatcher.prototype.isRoot = function () {\n\t        return this._cache.path.length === 0;\n\t    };\n\t    /** Returns the input pattern string */\n\t    UrlMatcher.prototype.toString = function () {\n\t        return this.pattern;\n\t    };\n\t    /**\n\t     * Tests the specified url/path against this matcher.\n\t     *\n\t     * Tests if the given url matches this matcher's pattern, and returns an object containing the captured\n\t     * parameter values.  Returns null if the path does not match.\n\t     *\n\t     * The returned object contains the values\n\t     * of any search parameters that are mentioned in the pattern, but their value may be null if\n\t     * they are not present in `search`. This means that search parameters are always treated\n\t     * as optional.\n\t     *\n\t     * @example\n\t     * ```js\n\t     *\n\t     * new UrlMatcher('/user/{id}?q&r').exec('/user/bob', {\n\t     *   x: '1', q: 'hello'\n\t     * });\n\t     * // returns { id: 'bob', q: 'hello', r: null }\n\t     * ```\n\t     *\n\t     * @param path    The URL path to match, e.g. `$location.path()`.\n\t     * @param search  URL search parameters, e.g. `$location.search()`.\n\t     * @param hash    URL hash e.g. `$location.hash()`.\n\t     * @param options\n\t     *\n\t     * @returns The captured parameter values.\n\t     */\n\t    UrlMatcher.prototype.exec = function (path, search, hash, options) {\n\t        var _this = this;\n\t        if (search === void 0) { search = {}; }\n\t        if (options === void 0) { options = {}; }\n\t        var match = memoizeTo(this._cache, 'pattern', function () {\n\t            return new RegExp([\n\t                '^',\n\t                common_1.unnest(_this._cache.path.concat(_this).map(hof_1.prop('_compiled'))).join(''),\n\t                _this.config.strict === false ? '\\/?' : '',\n\t                '$'\n\t            ].join(''), _this.config.caseInsensitive ? 'i' : undefined);\n\t        }).exec(path);\n\t        if (!match)\n\t            return null;\n\t        //options = defaults(options, { isolate: false });\n\t        var allParams = this.parameters(), pathParams = allParams.filter(function (param) { return !param.isSearch(); }), searchParams = allParams.filter(function (param) { return param.isSearch(); }), nPathSegments = this._cache.path.concat(this).map(function (urlm) { return urlm._segments.length - 1; }).reduce(function (a, x) { return a + x; }), values = {};\n\t        if (nPathSegments !== match.length - 1)\n\t            throw new Error(\"Unbalanced capture group in route '\" + this.pattern + \"'\");\n\t        function decodePathArray(string) {\n\t            var reverseString = function (str) { return str.split(\"\").reverse().join(\"\"); };\n\t            var unquoteDashes = function (str) { return str.replace(/\\\\-/g, \"-\"); };\n\t            var split = reverseString(string).split(/-(?!\\\\)/);\n\t            var allReversed = common_1.map(split, reverseString);\n\t            return common_1.map(allReversed, unquoteDashes).reverse();\n\t        }\n\t        for (var i = 0; i < nPathSegments; i++) {\n\t            var param = pathParams[i];\n\t            var value = match[i + 1];\n\t            // if the param value matches a pre-replace pair, replace the value before decoding.\n\t            for (var j = 0; j < param.replace.length; j++) {\n\t                if (param.replace[j].from === value)\n\t                    value = param.replace[j].to;\n\t            }\n\t            if (value && param.array === true)\n\t                value = decodePathArray(value);\n\t            if (predicates_2.isDefined(value))\n\t                value = param.type.decode(value);\n\t            values[param.id] = param.value(value);\n\t        }\n\t        common_1.forEach(searchParams, function (param) {\n\t            var value = search[param.id];\n\t            for (var j = 0; j < param.replace.length; j++) {\n\t                if (param.replace[j].from === value)\n\t                    value = param.replace[j].to;\n\t            }\n\t            if (predicates_2.isDefined(value))\n\t                value = param.type.decode(value);\n\t            values[param.id] = param.value(value);\n\t        });\n\t        if (hash)\n\t            values[\"#\"] = hash;\n\t        return values;\n\t    };\n\t    /**\n\t     * @hidden\n\t     * Returns all the [[Param]] objects of all path and search parameters of this pattern in order of appearance.\n\t     *\n\t     * @returns {Array.<Param>}  An array of [[Param]] objects. Must be treated as read-only. If the\n\t     *    pattern has no parameters, an empty array is returned.\n\t     */\n\t    UrlMatcher.prototype.parameters = function (opts) {\n\t        if (opts === void 0) { opts = {}; }\n\t        if (opts.inherit === false)\n\t            return this._params;\n\t        return common_1.unnest(this._cache.path.concat(this).map(hof_1.prop('_params')));\n\t    };\n\t    /**\n\t     * @hidden\n\t     * Returns a single parameter from this UrlMatcher by id\n\t     *\n\t     * @param id\n\t     * @param opts\n\t     * @returns {T|Param|any|boolean|UrlMatcher|null}\n\t     */\n\t    UrlMatcher.prototype.parameter = function (id, opts) {\n\t        if (opts === void 0) { opts = {}; }\n\t        var parent = common_1.tail(this._cache.path);\n\t        return (common_1.find(this._params, hof_1.propEq('id', id)) ||\n\t            (opts.inherit !== false && parent && parent.parameter(id)) ||\n\t            null);\n\t    };\n\t    /**\n\t     * Validates the input parameter values against this UrlMatcher\n\t     *\n\t     * Checks an object hash of parameters to validate their correctness according to the parameter\n\t     * types of this `UrlMatcher`.\n\t     *\n\t     * @param params The object hash of parameters to validate.\n\t     * @returns Returns `true` if `params` validates, otherwise `false`.\n\t     */\n\t    UrlMatcher.prototype.validates = function (params) {\n\t        var _this = this;\n\t        var validParamVal = function (param, val) { return !param || param.validates(val); };\n\t        return common_1.pairs(params || {}).map(function (_a) {\n\t            var key = _a[0], val = _a[1];\n\t            return validParamVal(_this.parameter(key), val);\n\t        }).reduce(common_1.allTrueR, true);\n\t    };\n\t    /**\n\t     * Given a set of parameter values, creates a URL from this UrlMatcher.\n\t     *\n\t     * Creates a URL that matches this pattern by substituting the specified values\n\t     * for the path and search parameters.\n\t     *\n\t     * @example\n\t     * ```js\n\t     *\n\t     * new UrlMatcher('/user/{id}?q').format({ id:'bob', q:'yes' });\n\t     * // returns '/user/bob?q=yes'\n\t     * ```\n\t     *\n\t     * @param values  the values to substitute for the parameters in this pattern.\n\t     * @returns the formatted URL (path and optionally search part).\n\t     */\n\t    UrlMatcher.prototype.format = function (values) {\n\t        if (values === void 0) { values = {}; }\n\t        if (!this.validates(values))\n\t            return null;\n\t        // Build the full path of UrlMatchers (including all parent UrlMatchers)\n\t        var urlMatchers = this._cache.path.slice().concat(this);\n\t        // Extract all the static segments and Params into an ordered array\n\t        var pathSegmentsAndParams = urlMatchers.map(UrlMatcher.pathSegmentsAndParams).reduce(common_2.unnestR, []);\n\t        // Extract the query params into a separate array\n\t        var queryParams = urlMatchers.map(UrlMatcher.queryParams).reduce(common_2.unnestR, []);\n\t        /**\n\t         * Given a Param,\n\t         * Applies the parameter value, then returns details about it\n\t         */\n\t        function getDetails(param) {\n\t            // Normalize to typed value\n\t            var value = param.value(values[param.id]);\n\t            var isDefaultValue = param.isDefaultValue(value);\n\t            // Check if we're in squash mode for the parameter\n\t            var squash = isDefaultValue ? param.squash : false;\n\t            // Allow the Parameter's Type to encode the value\n\t            var encoded = param.type.encode(value);\n\t            return { param: param, value: value, isDefaultValue: isDefaultValue, squash: squash, encoded: encoded };\n\t        }\n\t        // Build up the path-portion from the list of static segments and parameters\n\t        var pathString = pathSegmentsAndParams.reduce(function (acc, x) {\n\t            // The element is a static segment (a raw string); just append it\n\t            if (predicates_1.isString(x))\n\t                return acc + x;\n\t            // Otherwise, it's a Param.  Fetch details about the parameter value\n\t            var _a = getDetails(x), squash = _a.squash, encoded = _a.encoded, param = _a.param;\n\t            // If squash is === true, try to remove a slash from the path\n\t            if (squash === true)\n\t                return (acc.match(/\\/$/)) ? acc.slice(0, -1) : acc;\n\t            // If squash is a string, use the string for the param value\n\t            if (predicates_1.isString(squash))\n\t                return acc + squash;\n\t            if (squash !== false)\n\t                return acc; // ?\n\t            if (encoded == null)\n\t                return acc;\n\t            // If this parameter value is an array, encode the value using encodeDashes\n\t            if (predicates_1.isArray(encoded))\n\t                return acc + common_1.map(encoded, UrlMatcher.encodeDashes).join(\"-\");\n\t            // If the parameter type is \"raw\", then do not encodeURIComponent\n\t            if (param.type.raw)\n\t                return acc + encoded;\n\t            // Encode the value\n\t            return acc + encodeURIComponent(encoded);\n\t        }, \"\");\n\t        // Build the query string by applying parameter values (array or regular)\n\t        // then mapping to key=value, then flattening and joining using \"&\"\n\t        var queryString = queryParams.map(function (param) {\n\t            var _a = getDetails(param), squash = _a.squash, encoded = _a.encoded, isDefaultValue = _a.isDefaultValue;\n\t            if (encoded == null || (isDefaultValue && squash !== false))\n\t                return;\n\t            if (!predicates_1.isArray(encoded))\n\t                encoded = [encoded];\n\t            if (encoded.length === 0)\n\t                return;\n\t            if (!param.type.raw)\n\t                encoded = common_1.map(encoded, encodeURIComponent);\n\t            return encoded.map(function (val) { return (param.id + \"=\" + val); });\n\t        }).filter(common_1.identity).reduce(common_2.unnestR, []).join(\"&\");\n\t        // Concat the pathstring with the queryString (if exists) and the hashString (if exists)\n\t        return pathString + (queryString ? \"?\" + queryString : \"\") + (values[\"#\"] ? \"#\" + values[\"#\"] : \"\");\n\t    };\n\t    /** @hidden */\n\t    UrlMatcher.encodeDashes = function (str) {\n\t        return encodeURIComponent(str).replace(/-/g, function (c) { return (\"%5C%\" + c.charCodeAt(0).toString(16).toUpperCase()); });\n\t    };\n\t    /** @hidden Given a matcher, return an array with the matcher's path segments and path params, in order */\n\t    UrlMatcher.pathSegmentsAndParams = function (matcher) {\n\t        var staticSegments = matcher._segments;\n\t        var pathParams = matcher._params.filter(function (p) { return p.location === param_2.DefType.PATH; });\n\t        return common_3.arrayTuples(staticSegments, pathParams.concat(undefined)).reduce(common_2.unnestR, []).filter(function (x) { return x !== \"\" && predicates_2.isDefined(x); });\n\t    };\n\t    /** @hidden Given a matcher, return an array with the matcher's query params */\n\t    UrlMatcher.queryParams = function (matcher) {\n\t        return matcher._params.filter(function (p) { return p.location === param_2.DefType.SEARCH; });\n\t    };\n\t    /** @hidden */\n\t    UrlMatcher.nameValidator = /^\\w+([-.]+\\w+)*(?:\\[\\])?$/;\n\t    return UrlMatcher;\n\t}());\n\texports.UrlMatcher = UrlMatcher;\n\n\n/***/ },\n/* 29 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module url */ /** for typedoc */\n\tvar common_1 = __webpack_require__(3);\n\tvar predicates_1 = __webpack_require__(4);\n\tvar coreservices_1 = __webpack_require__(6);\n\t/** @hidden */\n\tvar $location = coreservices_1.services.location;\n\t/** @hidden Returns a string that is a prefix of all strings matching the RegExp */\n\tfunction regExpPrefix(re) {\n\t    var prefix = /^\\^((?:\\\\[^a-zA-Z0-9]|[^\\\\\\[\\]\\^$*+?.()|{}]+)*)/.exec(re.source);\n\t    return (prefix != null) ? prefix[1].replace(/\\\\(.)/g, \"$1\") : '';\n\t}\n\t/** @hidden Interpolates matched values into a String.replace()-style pattern */\n\tfunction interpolate(pattern, match) {\n\t    return pattern.replace(/\\$(\\$|\\d{1,2})/, function (m, what) {\n\t        return match[what === '$' ? 0 : Number(what)];\n\t    });\n\t}\n\t/** @hidden */\n\tfunction handleIfMatch($injector, $stateParams, handler, match) {\n\t    if (!match)\n\t        return false;\n\t    var result = $injector.invoke(handler, handler, { $match: match, $stateParams: $stateParams });\n\t    return predicates_1.isDefined(result) ? result : true;\n\t}\n\t/** @hidden */\n\tfunction appendBasePath(url, isHtml5, absolute) {\n\t    var baseHref = coreservices_1.services.locationConfig.baseHref();\n\t    if (baseHref === '/')\n\t        return url;\n\t    if (isHtml5)\n\t        return baseHref.slice(0, -1) + url;\n\t    if (absolute)\n\t        return baseHref.slice(1) + url;\n\t    return url;\n\t}\n\t// TODO: Optimize groups of rules with non-empty prefix into some sort of decision tree\n\t/** @hidden */\n\tfunction update(rules, otherwiseFn, evt) {\n\t    if (evt && evt.defaultPrevented)\n\t        return;\n\t    function check(rule) {\n\t        var handled = rule(coreservices_1.services.$injector, $location);\n\t        if (!handled)\n\t            return false;\n\t        if (predicates_1.isString(handled)) {\n\t            $location.replace();\n\t            $location.url(handled);\n\t        }\n\t        return true;\n\t    }\n\t    var n = rules.length, i;\n\t    for (i = 0; i < n; i++) {\n\t        if (check(rules[i]))\n\t            return;\n\t    }\n\t    // always check otherwise last to allow dynamic updates to the set of rules\n\t    if (otherwiseFn)\n\t        check(otherwiseFn);\n\t}\n\t/**\n\t * Manages rules for client-side URL\n\t *\n\t * This class manages the router rules for what to do when the URL changes.\n\t */\n\tvar UrlRouterProvider = (function () {\n\t    function UrlRouterProvider($urlMatcherFactory, $stateParams) {\n\t        /** @hidden */\n\t        this.rules = [];\n\t        /** @hidden */\n\t        this.interceptDeferred = false;\n\t        this.$urlMatcherFactory = $urlMatcherFactory;\n\t        this.$stateParams = $stateParams;\n\t    }\n\t    /**\n\t     * Registers a url handler function.\n\t     *\n\t     * Registers a low level url handler (a `rule`). A rule detects specific URL patterns and returns\n\t     * a redirect, or performs some action.\n\t     *\n\t     * If a rule returns a string, the URL is replaced with the string, and all rules are fired again.\n\t     *\n\t     * @example\n\t     * ```js\n\t     *\n\t     * var app = angular.module('app', ['ui.router.router']);\n\t     *\n\t     * app.config(function ($urlRouterProvider) {\n\t     *   // Here's an example of how you might allow case insensitive urls\n\t     *   $urlRouterProvider.rule(function ($injector, $location) {\n\t     *     var path = $location.path(),\n\t     *         normalized = path.toLowerCase();\n\t     *\n\t     *     if (path !== normalized) {\n\t     *       return normalized;\n\t     *     }\n\t     *   });\n\t     * });\n\t     * ```\n\t     *\n\t     * @param rule\n\t     * Handler function that takes `$injector` and `$location` services as arguments.\n\t     * You can use them to detect a url and return a different url as a string.\n\t     *\n\t     * @return [[$urlRouterProvider]] (`this`)\n\t     */\n\t    UrlRouterProvider.prototype.rule = function (rule) {\n\t        if (!predicates_1.isFunction(rule))\n\t            throw new Error(\"'rule' must be a function\");\n\t        this.rules.push(rule);\n\t        return this;\n\t    };\n\t    ;\n\t    /**\n\t     * Defines the path or behavior to use when no url can be matched.\n\t     *\n\t     * @example\n\t     * ```js\n\t     *\n\t     * var app = angular.module('app', ['ui.router.router']);\n\t     *\n\t     * app.config(function ($urlRouterProvider) {\n\t     *   // if the path doesn't match any of the urls you configured\n\t     *   // otherwise will take care of routing the user to the\n\t     *   // specified url\n\t     *   $urlRouterProvider.otherwise('/index');\n\t     *\n\t     *   // Example of using function rule as param\n\t     *   $urlRouterProvider.otherwise(function ($injector, $location) {\n\t     *     return '/a/valid/url';\n\t     *   });\n\t     * });\n\t     * ```\n\t     *\n\t     * @param rule\n\t     * The url path you want to redirect to or a function rule that returns the url path or performs a `$state.go()`.\n\t     * The function version is passed two params: `$injector` and `$location` services, and should return a url string.\n\t     *\n\t     * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance\n\t     */\n\t    UrlRouterProvider.prototype.otherwise = function (rule) {\n\t        if (!predicates_1.isFunction(rule) && !predicates_1.isString(rule))\n\t            throw new Error(\"'rule' must be a string or function\");\n\t        this.otherwiseFn = predicates_1.isString(rule) ? function () { return rule; } : rule;\n\t        return this;\n\t    };\n\t    ;\n\t    /**\n\t     * Registers a handler for a given url matching.\n\t     *\n\t     * If the handler is a string, it is\n\t     * treated as a redirect, and is interpolated according to the syntax of match\n\t     * (i.e. like `String.replace()` for `RegExp`, or like a `UrlMatcher` pattern otherwise).\n\t     *\n\t     * If the handler is a function, it is injectable.\n\t     * It gets invoked if `$location` matches.\n\t     * You have the option of inject the match object as `$match`.\n\t     *\n\t     * The handler can return\n\t     *\n\t     * - **falsy** to indicate that the rule didn't match after all, then `$urlRouter`\n\t     *   will continue trying to find another one that matches.\n\t     * - **string** which is treated as a redirect and passed to `$location.url()`\n\t     * - **void** or any **truthy** value tells `$urlRouter` that the url was handled.\n\t     *\n\t     * @example\n\t     * ```js\n\t     *\n\t     * var app = angular.module('app', ['ui.router.router']);\n\t     *\n\t     * app.config(function ($urlRouterProvider) {\n\t     *   $urlRouterProvider.when($state.url, function ($match, $stateParams) {\n\t     *     if ($state.$current.navigable !== state ||\n\t     *         !equalForKeys($match, $stateParams) {\n\t     *      $state.transitionTo(state, $match, false);\n\t     *     }\n\t     *   });\n\t     * });\n\t     * ```\n\t     *\n\t     * @param what A pattern string to match, compiled as a [[UrlMatcher]].\n\t     * @param handler The path (or function that returns a path) that you want to redirect your user to.\n\t     *\n\t     * Note: the handler may also invoke arbitrary code, such as `$state.go()`\n\t     */\n\t    UrlRouterProvider.prototype.when = function (what, handler) {\n\t        var _a = this, $urlMatcherFactory = _a.$urlMatcherFactory, $stateParams = _a.$stateParams;\n\t        var redirect, handlerIsString = predicates_1.isString(handler);\n\t        // @todo Queue this\n\t        if (predicates_1.isString(what))\n\t            what = $urlMatcherFactory.compile(what);\n\t        if (!handlerIsString && !predicates_1.isFunction(handler) && !predicates_1.isArray(handler))\n\t            throw new Error(\"invalid 'handler' in when()\");\n\t        var strategies = {\n\t            matcher: function (_what, _handler) {\n\t                if (handlerIsString) {\n\t                    redirect = $urlMatcherFactory.compile(_handler);\n\t                    _handler = ['$match', redirect.format.bind(redirect)];\n\t                }\n\t                return common_1.extend(function () {\n\t                    return handleIfMatch(coreservices_1.services.$injector, $stateParams, _handler, _what.exec($location.path(), $location.search(), $location.hash()));\n\t                }, {\n\t                    prefix: predicates_1.isString(_what.prefix) ? _what.prefix : ''\n\t                });\n\t            },\n\t            regex: function (_what, _handler) {\n\t                if (_what.global || _what.sticky)\n\t                    throw new Error(\"when() RegExp must not be global or sticky\");\n\t                if (handlerIsString) {\n\t                    redirect = _handler;\n\t                    _handler = ['$match', function ($match) { return interpolate(redirect, $match); }];\n\t                }\n\t                return common_1.extend(function () {\n\t                    return handleIfMatch(coreservices_1.services.$injector, $stateParams, _handler, _what.exec($location.path()));\n\t                }, {\n\t                    prefix: regExpPrefix(_what)\n\t                });\n\t            }\n\t        };\n\t        var check = {\n\t            matcher: $urlMatcherFactory.isMatcher(what),\n\t            regex: what instanceof RegExp\n\t        };\n\t        for (var n in check) {\n\t            if (check[n])\n\t                return this.rule(strategies[n](what, handler));\n\t        }\n\t        throw new Error(\"invalid 'what' in when()\");\n\t    };\n\t    ;\n\t    /**\n\t     * Disables monitoring of the URL.\n\t     *\n\t     * Call this method before UI-Router has bootstrapped.\n\t     * It will stop UI-Router from performing the initial url sync.\n\t     *\n\t     * This can be useful to perform some asynchronous initialization before the router starts.\n\t     * Once the initialization is complete, call [[listen]] to tell UI-Router to start watching and synchronizing the URL.\n\t     *\n\t     * @example\n\t     * ```js\n\t     *\n\t     * var app = angular.module('app', ['ui.router']);\n\t     *\n\t     * app.config(function ($urlRouterProvider) {\n\t     *   // Prevent $urlRouter from automatically intercepting URL changes;\n\t     *   $urlRouterProvider.deferIntercept();\n\t     * })\n\t     *\n\t     * app.run(function (MyService, $urlRouter, $http) {\n\t     *   $http.get(\"/stuff\").then(function(resp) {\n\t     *     MyService.doStuff(resp.data);\n\t     *     $urlRouter.listen();\n\t     *     $urlRouter.sync();\n\t     *   });\n\t     * });\n\t     * ```\n\t     *\n\t     * @param defer Indicates whether to defer location change interception. Passing\n\t     *        no parameter is equivalent to `true`.\n\t     */\n\t    UrlRouterProvider.prototype.deferIntercept = function (defer) {\n\t        if (defer === undefined)\n\t            defer = true;\n\t        this.interceptDeferred = defer;\n\t    };\n\t    ;\n\t    return UrlRouterProvider;\n\t}());\n\texports.UrlRouterProvider = UrlRouterProvider;\n\tvar UrlRouter = (function () {\n\t    /** @hidden */\n\t    function UrlRouter(urlRouterProvider) {\n\t        this.urlRouterProvider = urlRouterProvider;\n\t        common_1.bindFunctions(UrlRouter.prototype, this, this);\n\t    }\n\t    /**\n\t     * Checks the current URL for a matching rule\n\t     *\n\t     * Triggers an update; the same update that happens when the address bar url changes, aka `$locationChangeSuccess`.\n\t     * This method is useful when you need to use `preventDefault()` on the `$locationChangeSuccess` event,\n\t     * perform some custom logic (route protection, auth, config, redirection, etc) and then finally proceed\n\t     * with the transition by calling `$urlRouter.sync()`.\n\t     *\n\t     * @example\n\t     * ```js\n\t     *\n\t     * angular.module('app', ['ui.router'])\n\t     *   .run(function($rootScope, $urlRouter) {\n\t     *     $rootScope.$on('$locationChangeSuccess', function(evt) {\n\t     *       // Halt state change from even starting\n\t     *       evt.preventDefault();\n\t     *       // Perform custom logic\n\t     *       var meetsRequirement = ...\n\t     *       // Continue with the update and state transition if logic allows\n\t     *       if (meetsRequirement) $urlRouter.sync();\n\t     *     });\n\t     * });\n\t     * ```\n\t     */\n\t    UrlRouter.prototype.sync = function () {\n\t        update(this.urlRouterProvider.rules, this.urlRouterProvider.otherwiseFn);\n\t    };\n\t    /**\n\t     * Starts listening for URL changes\n\t     *\n\t     * Call this sometime after calling [[deferIntercept]] to start monitoring the url.\n\t     * This causes [[UrlRouter]] to start listening for changes to the URL, if it wasn't already listening.\n\t     */\n\t    UrlRouter.prototype.listen = function () {\n\t        var _this = this;\n\t        return this.listener = this.listener || $location.onChange(function (evt) { return update(_this.urlRouterProvider.rules, _this.urlRouterProvider.otherwiseFn, evt); });\n\t    };\n\t    /**\n\t     * Internal API.\n\t     */\n\t    UrlRouter.prototype.update = function (read) {\n\t        if (read) {\n\t            this.location = $location.url();\n\t            return;\n\t        }\n\t        if ($location.url() === this.location)\n\t            return;\n\t        $location.url(this.location);\n\t        $location.replace();\n\t    };\n\t    /**\n\t     * Internal API.\n\t     *\n\t     * Pushes a new location to the browser history.\n\t     *\n\t     * @param urlMatcher\n\t     * @param params\n\t     * @param options\n\t     */\n\t    UrlRouter.prototype.push = function (urlMatcher, params, options) {\n\t        $location.url(urlMatcher.format(params || {}));\n\t        if (options && options.replace)\n\t            $location.replace();\n\t    };\n\t    /**\n\t     * Builds and returns a URL with interpolated parameters\n\t     *\n\t     * @example\n\t     * ```js\n\t     *\n\t     * $bob = $urlRouter.href(new UrlMatcher(\"/about/:person\"), {\n\t     *   person: \"bob\"\n\t     * });\n\t     * // $bob == \"/about/bob\";\n\t     * ```\n\t     *\n\t     * @param urlMatcher The [[UrlMatcher]] object which is used as the template of the URL to generate.\n\t     * @param params An object of parameter values to fill the matcher's required parameters.\n\t     * @param options Options object. The options are:\n\t     *\n\t     * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. \"http://www.example.com/fullurl\".\n\t     *\n\t     * @returns Returns the fully compiled URL, or `null` if `params` fail validation against `urlMatcher`\n\t     */\n\t    UrlRouter.prototype.href = function (urlMatcher, params, options) {\n\t        if (!urlMatcher.validates(params))\n\t            return null;\n\t        var url = urlMatcher.format(params);\n\t        options = options || { absolute: false };\n\t        var cfg = coreservices_1.services.locationConfig;\n\t        var isHtml5 = cfg.html5Mode();\n\t        if (!isHtml5 && url !== null) {\n\t            url = \"#\" + cfg.hashPrefix() + url;\n\t        }\n\t        url = appendBasePath(url, isHtml5, options.absolute);\n\t        if (!options.absolute || !url) {\n\t            return url;\n\t        }\n\t        var slash = (!isHtml5 && url ? '/' : ''), port = cfg.port();\n\t        port = (port === 80 || port === 443 ? '' : ':' + port);\n\t        return [cfg.protocol(), '://', cfg.host(), port, slash, url].join('');\n\t    };\n\t    return UrlRouter;\n\t}());\n\texports.UrlRouter = UrlRouter;\n\n\n/***/ },\n/* 30 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module state */ /** for typedoc */\n\tvar predicates_1 = __webpack_require__(4);\n\tvar common_1 = __webpack_require__(3);\n\t/**\n\t * @ngdoc object\n\t * @name ui.router.state.$stateProvider\n\t *\n\t * @requires ui.router.router.$urlRouterProvider\n\t * @requires ui.router.util.$urlMatcherFactoryProvider\n\t *\n\t * @description\n\t * The new `$stateProvider` works similar to Angular's v1 router, but it focuses purely\n\t * on state.\n\t *\n\t * A state corresponds to a \"place\" in the application in terms of the overall UI and\n\t * navigation. A state describes (via the controller / template / view properties) what\n\t * the UI looks like and does at that place.\n\t *\n\t * States often have things in common, and the primary way of factoring out these\n\t * commonalities in this model is via the state hierarchy, i.e. parent/child states aka\n\t * nested states.\n\t *\n\t * The `$stateProvider` provides interfaces to declare these states for your app.\n\t */\n\tvar StateProvider = (function () {\n\t    function StateProvider(stateRegistry) {\n\t        this.stateRegistry = stateRegistry;\n\t        this.invalidCallbacks = [];\n\t        common_1.bindFunctions(StateProvider.prototype, this, this);\n\t    }\n\t    /**\n\t     * @ngdoc function\n\t     * @name ui.router.state.$stateProvider#decorator\n\t     * @methodOf ui.router.state.$stateProvider\n\t     *\n\t     * @description\n\t     * Allows you to extend (carefully) or override (at your own peril) the\n\t     * `stateBuilder` object used internally by `$stateProvider`. This can be used\n\t     * to add custom functionality to ui-router, for example inferring templateUrl\n\t     * based on the state name.\n\t     *\n\t     * When passing only a name, it returns the current (original or decorated) builder\n\t     * function that matches `name`.\n\t     *\n\t     * The builder functions that can be decorated are listed below. Though not all\n\t     * necessarily have a good use case for decoration, that is up to you to decide.\n\t     *\n\t     * In addition, users can attach custom decorators, which will generate new\n\t     * properties within the state's internal definition. There is currently no clear\n\t     * use-case for this beyond accessing internal states (i.e. $state.$current),\n\t     * however, expect this to become increasingly relevant as we introduce additional\n\t     * meta-programming features.\n\t     *\n\t     * **Warning**: Decorators should not be interdependent because the order of\n\t     * execution of the builder functions in non-deterministic. Builder functions\n\t     * should only be dependent on the state definition object and super function.\n\t     *\n\t     *\n\t     * Existing builder functions and current return values:\n\t     *\n\t     * - **parent** `{object}` - returns the parent state object.\n\t     * - **data** `{object}` - returns state data, including any inherited data that is not\n\t     *   overridden by own values (if any).\n\t     * - **url** `{object}` - returns a {@link ui.router.util.type:UrlMatcher UrlMatcher}\n\t     *   or `null`.\n\t     * - **navigable** `{object}` - returns closest ancestor state that has a URL (aka is\n\t     *   navigable).\n\t     * - **params** `{object}` - returns an array of state params that are ensured to\n\t     *   be a super-set of parent's params.\n\t     * - **views** `{object}` - returns a views object where each key is an absolute view\n\t     *   name (i.e. \"viewName@stateName\") and each value is the config object\n\t     *   (template, controller) for the view. Even when you don't use the views object\n\t     *   explicitly on a state config, one is still created for you internally.\n\t     *   So by decorating this builder function you have access to decorating template\n\t     *   and controller properties.\n\t     * - **ownParams** `{object}` - returns an array of params that belong to the state,\n\t     *   not including any params defined by ancestor states.\n\t     * - **path** `{string}` - returns the full path from the root down to this state.\n\t     *   Needed for state activation.\n\t     * - **includes** `{object}` - returns an object that includes every state that\n\t     *   would pass a `$state.includes()` test.\n\t     *\n\t     * @example\n\t     * <pre>\n\t     * // Override the internal 'views' builder with a function that takes the state\n\t     * // definition, and a reference to the internal function being overridden:\n\t     * $stateProvider.decorator('views', function (state, parent) {\n\t     *   let result = {},\n\t     *       views = parent(state);\n\t     *\n\t     *   angular.forEach(views, function (config, name) {\n\t     *     let autoName = (state.name + '.' + name).replace('.', '/');\n\t     *     config.templateUrl = config.templateUrl || '/partials/' + autoName + '.html';\n\t     *     result[name] = config;\n\t     *   });\n\t     *   return result;\n\t     * });\n\t     *\n\t     * $stateProvider.state('home', {\n\t     *   views: {\n\t     *     'contact.list': { controller: 'ListController' },\n\t     *     'contact.item': { controller: 'ItemController' }\n\t     *   }\n\t     * });\n\t     *\n\t     * // ...\n\t     *\n\t     * $state.go('home');\n\t     * // Auto-populates list and item views with /partials/home/contact/list.html,\n\t     * // and /partials/home/contact/item.html, respectively.\n\t     * </pre>\n\t     *\n\t     * @param {string} name The name of the builder function to decorate.\n\t     * @param {object} func A function that is responsible for decorating the original\n\t     * builder function. The function receives two parameters:\n\t     *\n\t     *   - `{object}` - state - The state config object.\n\t     *   - `{object}` - super - The original builder function.\n\t     *\n\t     * @return {object} $stateProvider - $stateProvider instance\n\t     */\n\t    StateProvider.prototype.decorator = function (name, func) {\n\t        return this.stateRegistry.decorator(name, func) || this;\n\t    };\n\t    /**\n\t     * @ngdoc function\n\t     * @name ui.router.state.$stateProvider#state\n\t     * @methodOf ui.router.state.$stateProvider\n\t     *\n\t     * @description\n\t     * Registers a state configuration under a given state name. The stateConfig object\n\t     * has the following acceptable properties.\n\t     *\n\t     * <a id='template'></a>\n\t     *\n\t     * - **`template`** - {string|function=} - html template as a string or a function that returns\n\t     *   an html template as a string which should be used by the uiView directives. This property\n\t     *   takes precedence over templateUrl.\n\t     *\n\t     *   If `template` is a function, it will be called with the following parameters:\n\t     *\n\t     *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by\n\t     *     applying the current state\n\t     *\n\t     * <a id='templateUrl'></a>\n\t     *\n\t     * - **`templateUrl`** - {string|function=} - path or function that returns a path to an html\n\t     *   template that should be used by uiView.\n\t     *\n\t     *   If `templateUrl` is a function, it will be called with the following parameters:\n\t     *\n\t     *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by\n\t     *     applying the current state\n\t     *\n\t     * <a id='templateProvider'></a>\n\t     *\n\t     * - **`templateProvider`** - {function=} - Provider function that returns HTML content\n\t     *   string.\n\t     *\n\t     * <a id='controller'></a>\n\t     *\n\t     * - **`controller`** - {string|function=} -  Controller fn that should be associated with newly\n\t     *   related scope or the name of a registered controller if passed as a string.\n\t     *\n\t     * <a id='controllerProvider'></a>\n\t     *\n\t     * - **`controllerProvider`** - {function=} - Injectable provider function that returns\n\t     *   the actual controller or string.\n\t     *\n\t     * <a id='controllerAs'></a>\n\t     *\n\t     * - **`controllerAs`** – {string=} – A controller alias name. If present the controller will be\n\t     *   published to scope under the controllerAs name.\n\t     *\n\t     * <a id='resolve'></a>\n\t     *\n\t     * - **`resolve`** - {object.&lt;string, function&gt;=} - An optional map of dependencies which\n\t     *   should be injected into the controller. If any of these dependencies are promises,\n\t     *   the router will wait for them all to be resolved or one to be rejected before the\n\t     *   controller is instantiated. If all the promises are resolved successfully, the values\n\t     *   of the resolved promises are injected and $stateChangeSuccess event is fired. If any\n\t     *   of the promises are rejected the $stateChangeError event is fired. The map object is:\n\t     *\n\t     *   - key - {string}: name of dependency to be injected into controller\n\t     *   - factory - {string|function}: If string then it is alias for service. Otherwise if function,\n\t     *     it is injected and return value it treated as dependency. If result is a promise, it is\n\t     *     resolved before its value is injected into controller.\n\t     *\n\t     * <a id='url'></a>\n\t     *\n\t     * - **`url`** - {string=} - A url with optional parameters. When a state is navigated or\n\t     *   transitioned to, the `$stateParams` service will be populated with any\n\t     *   parameters that were passed.\n\t     *\n\t     * <a id='params'></a>\n\t     *\n\t     * - **`params`** - {object=} - An array of parameter names or regular expressions. Only\n\t     *   use this within a state if you are not using url. Otherwise you can specify your\n\t     *   parameters within the url. When a state is navigated or transitioned to, the\n\t     *   $stateParams service will be populated with any parameters that were passed.\n\t     *\n\t     * <a id='views'></a>\n\t     *\n\t     * - **`views`** - {object=} - Use the views property to set up multiple views or to target views\n\t     *   manually/explicitly.\n\t     *\n\t     * <a id='abstract'></a>\n\t     *\n\t     * - **`abstract`** - {boolean=} - An abstract state will never be directly activated,\n\t     *   but can provide inherited properties to its common children states.\n\t     *\n\t     * <a id='onEnter'></a>\n\t     *\n\t     * - **`onEnter`** - {object=} - Callback function for when a state is entered. Good way\n\t     *   to trigger an action or dispatch an event, such as opening a dialog.\n\t     * If minifying your scripts, make sure to use the `['injection1', 'injection2', function(injection1, injection2){}]` syntax.\n\t     *\n\t     * <a id='onExit'></a>\n\t     *\n\t     * - **`onExit`** - {object=} - Callback function for when a state is exited. Good way to\n\t     *   trigger an action or dispatch an event, such as opening a dialog.\n\t     * If minifying your scripts, make sure to use the `['injection1', 'injection2', function(injection1, injection2){}]` syntax.\n\t     *\n\t     * <a id='reloadOnSearch'></a>\n\t     *\n\t     * - **`reloadOnSearch = true`** - {boolean=} - If `false`, will not retrigger the same state\n\t     *   just because a search/query parameter has changed (via $location.search() or $location.hash()).\n\t     *   Useful for when you'd like to modify $location.search() without triggering a reload.\n\t     *\n\t     * <a id='data'></a>\n\t     *\n\t     * - **`data`** - {object=} - Arbitrary data object, useful for custom configuration.\n\t     *\n\t     * @example\n\t     * <pre>\n\t     * // Some state name examples\n\t     *\n\t     * // stateName can be a single top-level name (must be unique).\n\t     * $stateProvider.state(\"home\", {});\n\t     *\n\t     * // Or it can be a nested state name. This state is a child of the\n\t     * // above \"home\" state.\n\t     * $stateProvider.state(\"home.newest\", {});\n\t     *\n\t     * // Nest states as deeply as needed.\n\t     * $stateProvider.state(\"home.newest.abc.xyz.inception\", {});\n\t     *\n\t     * // state() returns $stateProvider, so you can chain state declarations.\n\t     * $stateProvider\n\t     *   .state(\"home\", {})\n\t     *   .state(\"about\", {})\n\t     *   .state(\"contacts\", {});\n\t     * </pre>\n\t     *\n\t     * @param {string} name A unique state name, e.g. \"home\", \"about\", \"contacts\".\n\t     * To create a parent/child state use a dot, e.g. \"about.sales\", \"home.newest\".\n\t     * @param {object} definition State configuration object.\n\t     */\n\t    StateProvider.prototype.state = function (name, definition) {\n\t        if (predicates_1.isObject(name)) {\n\t            definition = name;\n\t        }\n\t        else {\n\t            definition.name = name;\n\t        }\n\t        this.stateRegistry.register(definition);\n\t        return this;\n\t    };\n\t    /**\n\t     * Registers an invalid state handler\n\t     *\n\t     * Registers a function to be injected and invoked when [[StateService.transitionTo]] has been called with an invalid\n\t     * state reference parameter\n\t     *\n\t     * This function can be injected with one some special values:\n\t     * - **`$to$`**: TargetState\n\t     * - **`$from$`**: TargetState\n\t     *\n\t     * Note: This API is subject to change.\n\t     * Replacement of dependency injection support with some alternative is likely.\n\t     *\n\t     * @param {function} callback\n\t     *   The function which will be injected and invoked, when a matching transition is started.\n\t     *   The function may optionally return a {TargetState} or a Promise for a TargetState.  If one\n\t     *   is returned, it is treated as a redirect.\n\t     */\n\t    StateProvider.prototype.onInvalid = function (callback) {\n\t        this.invalidCallbacks.push(callback);\n\t    };\n\t    return StateProvider;\n\t}());\n\texports.StateProvider = StateProvider;\n\n\n/***/ },\n/* 31 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar transition_1 = __webpack_require__(11);\n\tvar hookRegistry_1 = __webpack_require__(15);\n\tvar resolve_1 = __webpack_require__(32);\n\tvar views_1 = __webpack_require__(33);\n\tvar url_1 = __webpack_require__(34);\n\tvar redirectTo_1 = __webpack_require__(35);\n\tvar onEnterExitRetain_1 = __webpack_require__(36);\n\tvar hof_1 = __webpack_require__(5);\n\t/**\n\t * The default [[Transition]] options.\n\t *\n\t * Include this object when applying custom defaults:\n\t * let reloadOpts = { reload: true, notify: true }\n\t * let options = defaults(theirOpts, customDefaults, defaultOptions);\n\t */\n\texports.defaultTransOpts = {\n\t    location: true,\n\t    relative: null,\n\t    inherit: false,\n\t    notify: true,\n\t    reload: false,\n\t    custom: {},\n\t    current: function () { return null; }\n\t};\n\t/**\n\t * This class provides services related to Transitions.\n\t *\n\t * - Most importantly, it allows global Transition Hooks to be registered.\n\t * - It allows the default transition error handler to be set.\n\t * - It also has a factory function for creating new [[Transition]] objects, (used internally by the [[StateService]]).\n\t *\n\t * At bootstrap, [[UIRouter]] creates a single instance (singleton) of this class.\n\t */\n\tvar TransitionService = (function () {\n\t    function TransitionService(_router) {\n\t        this._router = _router;\n\t        this.$view = _router.viewService;\n\t        hookRegistry_1.HookRegistry.mixin(new hookRegistry_1.HookRegistry(), this);\n\t        this._deregisterHookFns = {};\n\t        this.registerTransitionHooks();\n\t    }\n\t    /** @hidden */\n\t    TransitionService.prototype.registerTransitionHooks = function () {\n\t        var fns = this._deregisterHookFns;\n\t        // Wire up redirectTo hook\n\t        fns.redirectTo = this.onStart({ to: function (state) { return !!state.redirectTo; } }, redirectTo_1.redirectToHook);\n\t        // Wire up onExit/Retain/Enter state hooks\n\t        fns.onExit = this.onExit({ exiting: function (state) { return !!state.onExit; } }, onEnterExitRetain_1.onExitHook);\n\t        fns.onRetain = this.onRetain({ retained: function (state) { return !!state.onRetain; } }, onEnterExitRetain_1.onRetainHook);\n\t        fns.onEnter = this.onEnter({ entering: function (state) { return !!state.onEnter; } }, onEnterExitRetain_1.onEnterHook);\n\t        // Wire up Resolve hooks\n\t        fns.eagerResolve = this.onStart({}, resolve_1.eagerResolvePath, { priority: 1000 });\n\t        fns.lazyResolve = this.onEnter({ entering: hof_1.val(true) }, resolve_1.lazyResolveState, { priority: 1000 });\n\t        // Wire up the View management hooks\n\t        fns.loadViews = this.onStart({}, views_1.loadEnteringViews);\n\t        fns.activateViews = this.onSuccess({}, views_1.activateViews);\n\t        // After globals.current is updated at priority: 10000\n\t        fns.updateUrl = this.onSuccess({}, url_1.updateUrl, { priority: 9999 });\n\t    };\n\t    /** @inheritdoc */\n\t    TransitionService.prototype.onBefore = function (matchCriteria, callback, options) { throw \"\"; };\n\t    ;\n\t    /** @inheritdoc */\n\t    TransitionService.prototype.onStart = function (matchCriteria, callback, options) { throw \"\"; };\n\t    ;\n\t    /** @inheritdoc */\n\t    TransitionService.prototype.onExit = function (matchCriteria, callback, options) { throw \"\"; };\n\t    ;\n\t    /** @inheritdoc */\n\t    TransitionService.prototype.onRetain = function (matchCriteria, callback, options) { throw \"\"; };\n\t    ;\n\t    /** @inheritdoc */\n\t    TransitionService.prototype.onEnter = function (matchCriteria, callback, options) { throw \"\"; };\n\t    ;\n\t    /** @inheritdoc */\n\t    TransitionService.prototype.onFinish = function (matchCriteria, callback, options) { throw \"\"; };\n\t    ;\n\t    /** @inheritdoc */\n\t    TransitionService.prototype.onSuccess = function (matchCriteria, callback, options) { throw \"\"; };\n\t    ;\n\t    /** @inheritdoc */\n\t    TransitionService.prototype.onError = function (matchCriteria, callback, options) { throw \"\"; };\n\t    ;\n\t    /**\n\t     * Creates a new [[Transition]] object\n\t     *\n\t     * This is a factory function for creating new Transition objects.\n\t     * It is used internally by the [[StateService]] and should generally not be called by application code.\n\t     *\n\t     * @param fromPath the path to the current state (the from state)\n\t     * @param targetState the target state (destination)\n\t     * @returns a Transition\n\t     */\n\t    TransitionService.prototype.create = function (fromPath, targetState) {\n\t        return new transition_1.Transition(fromPath, targetState, this._router);\n\t    };\n\t    return TransitionService;\n\t}());\n\texports.TransitionService = TransitionService;\n\n\n/***/ },\n/* 32 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module hooks */ /** for typedoc */\n\tvar common_1 = __webpack_require__(3);\n\tvar resolveContext_1 = __webpack_require__(17);\n\t/**\n\t * A [[TransitionHookFn]] which resolves all EAGER Resolvables in the To Path\n\t *\n\t * Registered using `transitionService.onStart({}, eagerResolvePath);`\n\t *\n\t * When a Transition starts, this hook resolves all the EAGER Resolvables, which the transition then waits for.\n\t *\n\t * See [[StateDeclaration.resolve]]\n\t */\n\texports.eagerResolvePath = function (trans) {\n\t    return new resolveContext_1.ResolveContext(trans.treeChanges().to)\n\t        .resolvePath(\"EAGER\", trans)\n\t        .then(common_1.noop);\n\t};\n\t/**\n\t * A [[TransitionHookFn]] which resolves all LAZY Resolvables for the state (and all its ancestors) in the To Path\n\t *\n\t * Registered using `transitionService.onEnter({ entering: () => true }, lazyResolveState);`\n\t *\n\t * When a State is being entered, this hook resolves all the Resolvables for this state, which the transition then waits for.\n\t *\n\t * See [[StateDeclaration.resolve]]\n\t */\n\texports.lazyResolveState = function (trans, state) {\n\t    return new resolveContext_1.ResolveContext(trans.treeChanges().to)\n\t        .subContext(state)\n\t        .resolvePath(\"LAZY\", trans)\n\t        .then(common_1.noop);\n\t};\n\n\n/***/ },\n/* 33 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module hooks */ /** for typedoc */\n\tvar common_1 = __webpack_require__(3);\n\tvar coreservices_1 = __webpack_require__(6);\n\t/**\n\t * A [[TransitionHookFn]] which waits for the views to load\n\t *\n\t * Registered using `transitionService.onStart({}, loadEnteringViews);`\n\t *\n\t * Allows the views to do async work in [[ViewConfig.load]] before the transition continues.\n\t * In angular 1, this includes loading the templates.\n\t */\n\tfunction loadEnteringViews(transition) {\n\t    var enteringViews = transition.views(\"entering\");\n\t    if (!enteringViews.length)\n\t        return;\n\t    return coreservices_1.services.$q.all(enteringViews.map(function (view) { return view.load(); })).then(common_1.noop);\n\t}\n\texports.loadEnteringViews = loadEnteringViews;\n\t/**\n\t * A [[TransitionHookFn]] which activates the new views when a transition is successful.\n\t *\n\t * Registered using `transitionService.onSuccess({}, activateViews);`\n\t *\n\t * After a transition is complete, this hook deactivates the old views from the previous state,\n\t * and activates the new views from the destination state.\n\t *\n\t * See [[ViewService]]\n\t */\n\tfunction activateViews(transition) {\n\t    var enteringViews = transition.views(\"entering\");\n\t    var exitingViews = transition.views(\"exiting\");\n\t    if (!enteringViews.length && !exitingViews.length)\n\t        return;\n\t    var $view = transition.router.viewService;\n\t    exitingViews.forEach(function (vc) { return $view.deactivateViewConfig(vc); });\n\t    enteringViews.forEach(function (vc) { return $view.activateViewConfig(vc); });\n\t    $view.sync();\n\t}\n\texports.activateViews = activateViews;\n\n\n/***/ },\n/* 34 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t/**\n\t * A [[TransitionHookFn]] which updates the URL after a successful transition\n\t *\n\t * Registered using `transitionService.onSuccess({}, updateUrl);`\n\t */\n\tfunction updateUrl(transition) {\n\t    var options = transition.options();\n\t    var $state = transition.router.stateService;\n\t    var $urlRouter = transition.router.urlRouter;\n\t    if (options.location && $state.$current.navigable) {\n\t        var urlOptions = { replace: options.location === 'replace' };\n\t        $urlRouter.push($state.$current.navigable.url, $state.params, urlOptions);\n\t    }\n\t    $urlRouter.update(true);\n\t}\n\texports.updateUrl = updateUrl;\n\n\n/***/ },\n/* 35 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module hooks */ /** */\n\tvar predicates_1 = __webpack_require__(4);\n\tvar coreservices_1 = __webpack_require__(6);\n\tvar targetState_1 = __webpack_require__(14);\n\t/**\n\t * A [[TransitionHookFn]] that redirects to a different state or params\n\t *\n\t * Registered using `transitionService.onStart({ to: (state) => !!state.redirectTo }, redirectHook);`\n\t *\n\t * See [[StateDeclaration.redirectTo]]\n\t */\n\texports.redirectToHook = function (trans) {\n\t    var redirect = trans.to().redirectTo;\n\t    if (!redirect)\n\t        return;\n\t    function handleResult(result) {\n\t        var $state = trans.router.stateService;\n\t        if (result instanceof targetState_1.TargetState)\n\t            return result;\n\t        if (predicates_1.isString(result))\n\t            return $state.target(result, trans.params(), trans.options());\n\t        if (result['state'] || result['params'])\n\t            return $state.target(result['state'] || trans.to(), result['params'] || trans.params(), trans.options());\n\t    }\n\t    if (predicates_1.isFunction(redirect)) {\n\t        return coreservices_1.services.$q.when(redirect(trans)).then(handleResult);\n\t    }\n\t    return handleResult(redirect);\n\t};\n\n\n/***/ },\n/* 36 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t/**\n\t * A factory which creates an onEnter, onExit or onRetain transition hook function\n\t *\n\t * The returned function invokes the (for instance) state.onEnter hook when the\n\t * state is being entered.\n\t *\n\t * @hidden\n\t */\n\tfunction makeEnterExitRetainHook(hookName) {\n\t    return function (transition, state) {\n\t        return state[hookName](transition, state);\n\t    };\n\t}\n\t/**\n\t * The [[TransitionStateHookFn]] for onExit\n\t *\n\t * When the state is being exited, the state's .onExit function is invoked.\n\t *\n\t * Registered using `transitionService.onExit({ exiting: (state) => !!state.onExit }, onExitHook);`\n\t */\n\texports.onExitHook = makeEnterExitRetainHook('onExit');\n\t/**\n\t * The [[TransitionStateHookFn]] for onRetain\n\t *\n\t * When the state is being exited, the state's .onRetain function is invoked.\n\t *\n\t * Registered using `transitionService.onRetain({ retained: (state) => !!state.onRetain }, onRetainHook);`\n\t */\n\texports.onRetainHook = makeEnterExitRetainHook('onRetain');\n\t/**\n\t * The [[TransitionStateHookFn]] for onEnter\n\t *\n\t * When the state is being exited, the state's .onEnter function is invoked.\n\t *\n\t * Registered using `transitionService.onEnter({ entering: (state) => !!state.onEnter }, onEnterHook);`\n\t */\n\texports.onEnterHook = makeEnterExitRetainHook('onEnter');\n\n\n/***/ },\n/* 37 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module view */ /** for typedoc */\n\tvar common_1 = __webpack_require__(3);\n\tvar hof_1 = __webpack_require__(5);\n\tvar predicates_1 = __webpack_require__(4);\n\tvar trace_1 = __webpack_require__(12);\n\tvar match = function (obj1) {\n\t    var keys = [];\n\t    for (var _i = 1; _i < arguments.length; _i++) {\n\t        keys[_i - 1] = arguments[_i];\n\t    }\n\t    return function (obj2) { return keys.reduce(function (memo, key) { return memo && obj1[key] === obj2[key]; }, true); };\n\t};\n\t/**\n\t * The View service\n\t */\n\tvar ViewService = (function () {\n\t    function ViewService() {\n\t        var _this = this;\n\t        this.uiViews = [];\n\t        this.viewConfigs = [];\n\t        this._viewConfigFactories = {};\n\t        this.sync = function () {\n\t            var uiViewsByFqn = _this.uiViews.map(function (uiv) { return [uiv.fqn, uiv]; }).reduce(common_1.applyPairs, {});\n\t            /**\n\t             * Given a ui-view and a ViewConfig, determines if they \"match\".\n\t             *\n\t             * A ui-view has a fully qualified name (fqn) and a context object.  The fqn is built from its overall location in\n\t             * the DOM, describing its nesting relationship to any parent ui-view tags it is nested inside of.\n\t             *\n\t             * A ViewConfig has a target ui-view name and a context anchor.  The ui-view name can be a simple name, or\n\t             * can be a segmented ui-view path, describing a portion of a ui-view fqn.\n\t             *\n\t             * In order for a ui-view to match ViewConfig, ui-view's $type must match the ViewConfig's $type\n\t             *\n\t             * If the ViewConfig's target ui-view name is a simple name (no dots), then a ui-view matches if:\n\t             * - the ui-view's name matches the ViewConfig's target name\n\t             * - the ui-view's context matches the ViewConfig's anchor\n\t             *\n\t             * If the ViewConfig's target ui-view name is a segmented name (with dots), then a ui-view matches if:\n\t             * - There exists a parent ui-view where:\n\t             *    - the parent ui-view's name matches the first segment (index 0) of the ViewConfig's target name\n\t             *    - the parent ui-view's context matches the ViewConfig's anchor\n\t             * - And the remaining segments (index 1..n) of the ViewConfig's target name match the tail of the ui-view's fqn\n\t             *\n\t             * Example:\n\t             *\n\t             * DOM:\n\t             * <div ui-view>                        <!-- created in the root context (name: \"\") -->\n\t             *   <div ui-view=\"foo\">                <!-- created in the context named: \"A\"      -->\n\t             *     <div ui-view>                    <!-- created in the context named: \"A.B\"    -->\n\t             *       <div ui-view=\"bar\">            <!-- created in the context named: \"A.B.C\"  -->\n\t             *       </div>\n\t             *     </div>\n\t             *   </div>\n\t             * </div>\n\t             *\n\t             * uiViews: [\n\t             *  { fqn: \"$default\",                  creationContext: { name: \"\" } },\n\t             *  { fqn: \"$default.foo\",              creationContext: { name: \"A\" } },\n\t             *  { fqn: \"$default.foo.$default\",     creationContext: { name: \"A.B\" } }\n\t             *  { fqn: \"$default.foo.$default.bar\", creationContext: { name: \"A.B.C\" } }\n\t             * ]\n\t             *\n\t             * These four view configs all match the ui-view with the fqn: \"$default.foo.$default.bar\":\n\t             *\n\t             * - ViewConfig1: { uiViewName: \"bar\",                       uiViewContextAnchor: \"A.B.C\" }\n\t             * - ViewConfig2: { uiViewName: \"$default.bar\",              uiViewContextAnchor: \"A.B\" }\n\t             * - ViewConfig3: { uiViewName: \"foo.$default.bar\",          uiViewContextAnchor: \"A\" }\n\t             * - ViewConfig4: { uiViewName: \"$default.foo.$default.bar\", uiViewContextAnchor: \"\" }\n\t             *\n\t             * Using ViewConfig3 as an example, it matches the ui-view with fqn \"$default.foo.$default.bar\" because:\n\t             * - The ViewConfig's segmented target name is: [ \"foo\", \"$default\", \"bar\" ]\n\t             * - There exists a parent ui-view (which has fqn: \"$default.foo\") where:\n\t             *    - the parent ui-view's name \"foo\" matches the first segment \"foo\" of the ViewConfig's target name\n\t             *    - the parent ui-view's context \"A\" matches the ViewConfig's anchor context \"A\"\n\t             * - And the remaining segments [ \"$default\", \"bar\" ].join(\".\"_ of the ViewConfig's target name match\n\t             *   the tail of the ui-view's fqn \"default.bar\"\n\t             */\n\t            var matches = function (uiView) { return function (viewConfig) {\n\t                // Don't supply an ng1 ui-view with an ng2 ViewConfig, etc\n\t                if (uiView.$type !== viewConfig.viewDecl.$type)\n\t                    return false;\n\t                // Split names apart from both viewConfig and uiView into segments\n\t                var vc = viewConfig.viewDecl;\n\t                var vcSegments = vc.$uiViewName.split(\".\");\n\t                var uivSegments = uiView.fqn.split(\".\");\n\t                // Check if the tails of the segment arrays match. ex, these arrays' tails match:\n\t                // vc: [\"foo\", \"bar\"], uiv fqn: [\"$default\", \"foo\", \"bar\"]\n\t                if (!common_1.equals(vcSegments, uivSegments.slice(0 - vcSegments.length)))\n\t                    return false;\n\t                // Now check if the fqn ending at the first segment of the viewConfig matches the context:\n\t                // [\"$default\", \"foo\"].join(\".\") == \"$default.foo\", does the ui-view $default.foo context match?\n\t                var negOffset = (1 - vcSegments.length) || undefined;\n\t                var fqnToFirstSegment = uivSegments.slice(0, negOffset).join(\".\");\n\t                var uiViewContext = uiViewsByFqn[fqnToFirstSegment].creationContext;\n\t                return vc.$uiViewContextAnchor === (uiViewContext && uiViewContext.name);\n\t            }; };\n\t            // Return the number of dots in the fully qualified name\n\t            function uiViewDepth(uiView) {\n\t                return uiView.fqn.split(\".\").length;\n\t            }\n\t            // Return the ViewConfig's context's depth in the context tree.\n\t            function viewConfigDepth(config) {\n\t                var context = config.viewDecl.$context, count = 0;\n\t                while (++count && context.parent)\n\t                    context = context.parent;\n\t                return count;\n\t            }\n\t            // Given a depth function, returns a compare function which can return either ascending or descending order\n\t            var depthCompare = hof_1.curry(function (depthFn, posNeg, left, right) { return posNeg * (depthFn(left) - depthFn(right)); });\n\t            var matchingConfigPair = function (uiView) {\n\t                var matchingConfigs = _this.viewConfigs.filter(matches(uiView));\n\t                if (matchingConfigs.length > 1)\n\t                    matchingConfigs.sort(depthCompare(viewConfigDepth, -1)); // descending\n\t                return [uiView, matchingConfigs[0]];\n\t            };\n\t            var configureUIView = function (_a) {\n\t                var uiView = _a[0], viewConfig = _a[1];\n\t                // If a parent ui-view is reconfigured, it could destroy child ui-views.\n\t                // Before configuring a child ui-view, make sure it's still in the active uiViews array.\n\t                if (_this.uiViews.indexOf(uiView) !== -1)\n\t                    uiView.configUpdated(viewConfig);\n\t            };\n\t            _this.uiViews.sort(depthCompare(uiViewDepth, 1)).map(matchingConfigPair).forEach(configureUIView);\n\t        };\n\t    }\n\t    ViewService.prototype.rootContext = function (context) {\n\t        return this._rootContext = context || this._rootContext;\n\t    };\n\t    ;\n\t    ViewService.prototype.viewConfigFactory = function (viewType, factory) {\n\t        this._viewConfigFactories[viewType] = factory;\n\t    };\n\t    ViewService.prototype.createViewConfig = function (path, decl) {\n\t        var cfgFactory = this._viewConfigFactories[decl.$type];\n\t        if (!cfgFactory)\n\t            throw new Error(\"ViewService: No view config factory registered for type \" + decl.$type);\n\t        var cfgs = cfgFactory(path, decl);\n\t        return predicates_1.isArray(cfgs) ? cfgs : [cfgs];\n\t    };\n\t    /**\n\t     * De-registers a ViewConfig.\n\t     *\n\t     * @param viewConfig The ViewConfig view to deregister.\n\t     */\n\t    ViewService.prototype.deactivateViewConfig = function (viewConfig) {\n\t        trace_1.trace.traceViewServiceEvent(\"<- Removing\", viewConfig);\n\t        common_1.removeFrom(this.viewConfigs, viewConfig);\n\t    };\n\t    ;\n\t    ViewService.prototype.activateViewConfig = function (viewConfig) {\n\t        trace_1.trace.traceViewServiceEvent(\"-> Registering\", viewConfig);\n\t        this.viewConfigs.push(viewConfig);\n\t    };\n\t    ;\n\t    /**\n\t     * Allows a `ui-view` element to register its canonical name with a callback that allows it to\n\t     * be updated with a template, controller, and local variables.\n\t     *\n\t     * @param {String} name The fully-qualified name of the `ui-view` object being registered.\n\t     * @param {Function} configUpdatedCallback A callback that receives updates to the content & configuration\n\t     *                   of the view.\n\t     * @return {Function} Returns a de-registration function used when the view is destroyed.\n\t     */\n\t    ViewService.prototype.registerUIView = function (uiView) {\n\t        trace_1.trace.traceViewServiceUIViewEvent(\"-> Registering\", uiView);\n\t        var uiViews = this.uiViews;\n\t        var fqnMatches = function (uiv) { return uiv.fqn === uiView.fqn; };\n\t        if (uiViews.filter(fqnMatches).length)\n\t            trace_1.trace.traceViewServiceUIViewEvent(\"!!!! duplicate uiView named:\", uiView);\n\t        uiViews.push(uiView);\n\t        this.sync();\n\t        return function () {\n\t            var idx = uiViews.indexOf(uiView);\n\t            if (idx <= 0) {\n\t                trace_1.trace.traceViewServiceUIViewEvent(\"Tried removing non-registered uiView\", uiView);\n\t                return;\n\t            }\n\t            trace_1.trace.traceViewServiceUIViewEvent(\"<- Deregistering\", uiView);\n\t            common_1.removeFrom(uiViews)(uiView);\n\t        };\n\t    };\n\t    ;\n\t    /**\n\t     * Returns the list of views currently available on the page, by fully-qualified name.\n\t     *\n\t     * @return {Array} Returns an array of fully-qualified view names.\n\t     */\n\t    ViewService.prototype.available = function () {\n\t        return this.uiViews.map(hof_1.prop(\"fqn\"));\n\t    };\n\t    /**\n\t     * Returns the list of views on the page containing loaded content.\n\t     *\n\t     * @return {Array} Returns an array of fully-qualified view names.\n\t     */\n\t    ViewService.prototype.active = function () {\n\t        return this.uiViews.filter(hof_1.prop(\"$config\")).map(hof_1.prop(\"name\"));\n\t    };\n\t    /**\n\t     * Normalizes a view's name from a state.views configuration block.\n\t     *\n\t     * @param context the context object (state declaration) that the view belongs to\n\t     * @param rawViewName the name of the view, as declared in the [[StateDeclaration.views]]\n\t     *\n\t     * @returns the normalized uiViewName and uiViewContextAnchor that the view targets\n\t     */\n\t    ViewService.normalizeUIViewTarget = function (context, rawViewName) {\n\t        if (rawViewName === void 0) { rawViewName = \"\"; }\n\t        // TODO: Validate incoming view name with a regexp to allow:\n\t        // ex: \"view.name@foo.bar\" , \"^.^.view.name\" , \"view.name@^.^\" , \"\" ,\n\t        // \"@\" , \"$default@^\" , \"!$default.$default\" , \"!foo.bar\"\n\t        var viewAtContext = rawViewName.split(\"@\");\n\t        var uiViewName = viewAtContext[0] || \"$default\"; // default to unnamed view\n\t        var uiViewContextAnchor = predicates_1.isString(viewAtContext[1]) ? viewAtContext[1] : \"^\"; // default to parent context\n\t        // Handle relative view-name sugar syntax.\n\t        // Matches rawViewName \"^.^.^.foo.bar\" into array: [\"^.^.^.foo.bar\", \"^.^.^\", \"foo.bar\"],\n\t        var relativeViewNameSugar = /^(\\^(?:\\.\\^)*)\\.(.*$)/.exec(uiViewName);\n\t        if (relativeViewNameSugar) {\n\t            // Clobbers existing contextAnchor (rawViewName validation will fix this)\n\t            uiViewContextAnchor = relativeViewNameSugar[1]; // set anchor to \"^.^.^\"\n\t            uiViewName = relativeViewNameSugar[2]; // set view-name to \"foo.bar\"\n\t        }\n\t        if (uiViewName.charAt(0) === '!') {\n\t            uiViewName = uiViewName.substr(1);\n\t            uiViewContextAnchor = \"\"; // target absolutely from root\n\t        }\n\t        // handle parent relative targeting \"^.^.^\"\n\t        var relativeMatch = /^(\\^(?:\\.\\^)*)$/;\n\t        if (relativeMatch.exec(uiViewContextAnchor)) {\n\t            var anchor = uiViewContextAnchor.split(\".\").reduce((function (anchor, x) { return anchor.parent; }), context);\n\t            uiViewContextAnchor = anchor.name;\n\t        }\n\t        return { uiViewName: uiViewName, uiViewContextAnchor: uiViewContextAnchor };\n\t    };\n\t    return ViewService;\n\t}());\n\texports.ViewService = ViewService;\n\n\n/***/ },\n/* 38 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/** @module state */ /** for typedoc */\n\t\"use strict\";\n\tvar stateMatcher_1 = __webpack_require__(39);\n\tvar stateBuilder_1 = __webpack_require__(40);\n\tvar stateQueueManager_1 = __webpack_require__(41);\n\tvar StateRegistry = (function () {\n\t    function StateRegistry(urlMatcherFactory, urlRouterProvider) {\n\t        this.states = {};\n\t        this.matcher = new stateMatcher_1.StateMatcher(this.states);\n\t        this.builder = new stateBuilder_1.StateBuilder(this.matcher, urlMatcherFactory);\n\t        this.stateQueue = new stateQueueManager_1.StateQueueManager(this.states, this.builder, urlRouterProvider);\n\t        var rootStateDef = {\n\t            name: '',\n\t            url: '^',\n\t            views: null,\n\t            params: {\n\t                '#': { value: null, type: 'hash', dynamic: true }\n\t            },\n\t            abstract: true\n\t        };\n\t        var _root = this._root = this.stateQueue.register(rootStateDef);\n\t        _root.navigable = null;\n\t    }\n\t    StateRegistry.prototype.root = function () {\n\t        return this._root;\n\t    };\n\t    StateRegistry.prototype.register = function (stateDefinition) {\n\t        return this.stateQueue.register(stateDefinition);\n\t    };\n\t    StateRegistry.prototype.get = function (stateOrName, base) {\n\t        var _this = this;\n\t        if (arguments.length === 0)\n\t            return Object.keys(this.states).map(function (name) { return _this.states[name].self; });\n\t        var found = this.matcher.find(stateOrName, base);\n\t        return found && found.self || null;\n\t    };\n\t    StateRegistry.prototype.decorator = function (name, func) {\n\t        return this.builder.builder(name, func);\n\t    };\n\t    return StateRegistry;\n\t}());\n\texports.StateRegistry = StateRegistry;\n\n\n/***/ },\n/* 39 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module state */ /** for typedoc */\n\tvar predicates_1 = __webpack_require__(4);\n\tvar StateMatcher = (function () {\n\t    function StateMatcher(_states) {\n\t        this._states = _states;\n\t    }\n\t    StateMatcher.prototype.isRelative = function (stateName) {\n\t        stateName = stateName || \"\";\n\t        return stateName.indexOf(\".\") === 0 || stateName.indexOf(\"^\") === 0;\n\t    };\n\t    StateMatcher.prototype.find = function (stateOrName, base) {\n\t        if (!stateOrName && stateOrName !== \"\")\n\t            return undefined;\n\t        var isStr = predicates_1.isString(stateOrName);\n\t        var name = isStr ? stateOrName : stateOrName.name;\n\t        if (this.isRelative(name))\n\t            name = this.resolvePath(name, base);\n\t        var state = this._states[name];\n\t        if (state && (isStr || (!isStr && (state === stateOrName || state.self === stateOrName)))) {\n\t            return state;\n\t        }\n\t        return undefined;\n\t    };\n\t    StateMatcher.prototype.resolvePath = function (name, base) {\n\t        if (!base)\n\t            throw new Error(\"No reference point given for path '\" + name + \"'\");\n\t        var baseState = this.find(base);\n\t        var splitName = name.split(\".\"), i = 0, pathLength = splitName.length, current = baseState;\n\t        for (; i < pathLength; i++) {\n\t            if (splitName[i] === \"\" && i === 0) {\n\t                current = baseState;\n\t                continue;\n\t            }\n\t            if (splitName[i] === \"^\") {\n\t                if (!current.parent)\n\t                    throw new Error(\"Path '\" + name + \"' not valid for state '\" + baseState.name + \"'\");\n\t                current = current.parent;\n\t                continue;\n\t            }\n\t            break;\n\t        }\n\t        var relName = splitName.slice(i).join(\".\");\n\t        return current.name + (current.name && relName ? \".\" : \"\") + relName;\n\t    };\n\t    return StateMatcher;\n\t}());\n\texports.StateMatcher = StateMatcher;\n\n\n/***/ },\n/* 40 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module state */ /** for typedoc */\n\tvar common_1 = __webpack_require__(3);\n\tvar predicates_1 = __webpack_require__(4);\n\tvar strings_1 = __webpack_require__(9);\n\tvar hof_1 = __webpack_require__(5);\n\tvar param_1 = __webpack_require__(22);\n\tvar resolvable_1 = __webpack_require__(19);\n\tvar coreservices_1 = __webpack_require__(6);\n\tvar parseUrl = function (url) {\n\t    if (!predicates_1.isString(url))\n\t        return false;\n\t    var root = url.charAt(0) === '^';\n\t    return { val: root ? url.substring(1) : url, root: root };\n\t};\n\tfunction selfBuilder(state) {\n\t    state.self.$$state = function () { return state; };\n\t    return state.self;\n\t}\n\tfunction dataBuilder(state) {\n\t    if (state.parent && state.parent.data) {\n\t        state.data = state.self.data = common_1.inherit(state.parent.data, state.data);\n\t    }\n\t    return state.data;\n\t}\n\tvar getUrlBuilder = function ($urlMatcherFactoryProvider, root) {\n\t    return function urlBuilder(state) {\n\t        var stateDec = state;\n\t        var parsed = parseUrl(stateDec.url), parent = state.parent;\n\t        var url = !parsed ? stateDec.url : $urlMatcherFactoryProvider.compile(parsed.val, {\n\t            params: state.params || {},\n\t            paramMap: function (paramConfig, isSearch) {\n\t                if (stateDec.reloadOnSearch === false && isSearch)\n\t                    paramConfig = common_1.extend(paramConfig || {}, { dynamic: true });\n\t                return paramConfig;\n\t            }\n\t        });\n\t        if (!url)\n\t            return null;\n\t        if (!$urlMatcherFactoryProvider.isMatcher(url))\n\t            throw new Error(\"Invalid url '\" + url + \"' in state '\" + state + \"'\");\n\t        return (parsed && parsed.root) ? url : ((parent && parent.navigable) || root()).url.append(url);\n\t    };\n\t};\n\tvar getNavigableBuilder = function (isRoot) {\n\t    return function navigableBuilder(state) {\n\t        return !isRoot(state) && state.url ? state : (state.parent ? state.parent.navigable : null);\n\t    };\n\t};\n\tfunction paramsBuilder(state) {\n\t    var makeConfigParam = function (config, id) { return param_1.Param.fromConfig(id, null, config); };\n\t    var urlParams = (state.url && state.url.parameters({ inherit: false })) || [];\n\t    var nonUrlParams = common_1.values(common_1.map(common_1.omit(state.params || {}, urlParams.map(hof_1.prop('id'))), makeConfigParam));\n\t    return urlParams.concat(nonUrlParams).map(function (p) { return [p.id, p]; }).reduce(common_1.applyPairs, {});\n\t}\n\tfunction pathBuilder(state) {\n\t    return state.parent ? state.parent.path.concat(state) : [state];\n\t}\n\tfunction includesBuilder(state) {\n\t    var includes = state.parent ? common_1.extend({}, state.parent.includes) : {};\n\t    includes[state.name] = true;\n\t    return includes;\n\t}\n\t/**\n\t * This is a [[StateBuilder.builder]] function for the `resolve:` block on a [[StateDeclaration]].\n\t *\n\t * When the [[StateBuilder]] builds a [[State]] object from a raw [[StateDeclaration]], this builder\n\t * validates the `resolve` property and converts it to a [[Resolvable]] array.\n\t *\n\t * resolve: input value can be:\n\t *\n\t * {\n\t *   // analyzed but not injected\n\t *   myFooResolve: function() { return \"myFooData\"; },\n\t *\n\t *   // function.toString() parsed, \"DependencyName\" dep as string (not min-safe)\n\t *   myBarResolve: function(DependencyName) { return DependencyName.fetchSomethingAsPromise() },\n\t *\n\t *   // Array split; \"DependencyName\" dep as string\n\t *   myBazResolve: [ \"DependencyName\", function(dep) { return dep.fetchSomethingAsPromise() },\n\t *\n\t *   // Array split; DependencyType dep as token (compared using ===)\n\t *   myQuxResolve: [ DependencyType, function(dep) { return dep.fetchSometingAsPromise() },\n\t *\n\t *   // val.$inject used as deps\n\t *   // where:\n\t *   //     corgeResolve.$inject = [\"DependencyName\"];\n\t *   //     function corgeResolve(dep) { dep.fetchSometingAsPromise() }\n\t *   // then \"DependencyName\" dep as string\n\t *   myCorgeResolve: corgeResolve,\n\t *\n\t *  // inject service by name\n\t *  // When a string is found, desugar creating a resolve that injects the named service\n\t *   myGraultResolve: \"SomeService\"\n\t * }\n\t *\n\t * or:\n\t *\n\t * [\n\t *   new Resolvable(\"myFooResolve\", function() { return \"myFooData\" }),\n\t *   new Resolvable(\"myBarResolve\", function(dep) { return dep.fetchSomethingAsPromise() }, [ \"DependencyName\" ]),\n\t *   { provide: \"myBazResolve\", useFactory: function(dep) { dep.fetchSomethingAsPromise() }, deps: [ \"DependencyName\" ] }\n\t * ]\n\t */\n\tfunction resolvablesBuilder(state) {\n\t    /** convert a resolve: {} object to an array of tuples */\n\t    var obj2Tuples = function (obj) { return Object.keys(obj || {}).map(function (token) { return ({ token: token, val: obj[token], deps: undefined }); }); };\n\t    /** fetch DI annotations from a function or ng1-style array */\n\t    var annotate = function (fn) { return fn.$inject || coreservices_1.services.$injector.annotate(fn, coreservices_1.services.$injector.strictDi); };\n\t    /** true if the object has both `token` and `resolveFn`, and is probably a [[ResolveLiteral]] */\n\t    var isResolveLiteral = function (obj) { return !!(obj.token && obj.resolveFn); };\n\t    /** true if the object looks like a provide literal, or a ng2 Provider */\n\t    var isLikeNg2Provider = function (obj) { return !!((obj.provide || obj.token) && (obj.useValue || obj.useFactory || obj.useExisting || obj.useClass)); };\n\t    /** true if the object looks like a tuple from obj2Tuples */\n\t    var isTupleFromObj = function (obj) { return !!(obj && obj.val && (predicates_1.isString(obj.val) || predicates_1.isArray(obj.val) || predicates_1.isFunction(obj.val))); };\n\t    /** extracts the token from a Provider or provide literal */\n\t    var token = function (p) { return p.provide || p.token; };\n\t    /** Given a literal resolve or provider object, returns a Resolvable */\n\t    var literal2Resolvable = hof_1.pattern([\n\t        [hof_1.prop('resolveFn'), function (p) { return new resolvable_1.Resolvable(token(p), p.resolveFn, p.deps, p.policy); }],\n\t        [hof_1.prop('useFactory'), function (p) { return new resolvable_1.Resolvable(token(p), p.useFactory, (p.deps || p.dependencies), p.policy); }],\n\t        [hof_1.prop('useClass'), function (p) { return new resolvable_1.Resolvable(token(p), function () { return new p.useClass(); }, [], p.policy); }],\n\t        [hof_1.prop('useValue'), function (p) { return new resolvable_1.Resolvable(token(p), function () { return p.useValue; }, [], p.policy, p.useValue); }],\n\t        [hof_1.prop('useExisting'), function (p) { return new resolvable_1.Resolvable(token(p), function (x) { return x; }, [p.useExisting], p.policy); }],\n\t    ]);\n\t    var tuple2Resolvable = hof_1.pattern([\n\t        [hof_1.pipe(hof_1.prop(\"val\"), predicates_1.isString), function (tuple) { return new resolvable_1.Resolvable(tuple.token, function (x) { return x; }, [tuple.val], tuple.policy); }],\n\t        [hof_1.pipe(hof_1.prop(\"val\"), predicates_1.isArray), function (tuple) { return new resolvable_1.Resolvable(tuple.token, common_1.tail(tuple.val), tuple.val.slice(0, -1), tuple.policy); }],\n\t        [hof_1.pipe(hof_1.prop(\"val\"), predicates_1.isFunction), function (tuple) { return new resolvable_1.Resolvable(tuple.token, tuple.val, annotate(tuple.val), tuple.policy); }],\n\t    ]);\n\t    var item2Resolvable = hof_1.pattern([\n\t        [hof_1.is(resolvable_1.Resolvable), function (r) { return r; }],\n\t        [isResolveLiteral, literal2Resolvable],\n\t        [isLikeNg2Provider, literal2Resolvable],\n\t        [isTupleFromObj, tuple2Resolvable],\n\t        [hof_1.val(true), function (tuple) { throw new Error(\"Invalid resolve value: \" + strings_1.stringify(tuple)); }]\n\t    ]);\n\t    // If resolveBlock is already an array, use it as-is.\n\t    // Otherwise, assume it's an object and convert to an Array of tuples\n\t    var decl = state.resolve;\n\t    var items = predicates_1.isArray(decl) ? decl : obj2Tuples(decl);\n\t    return items.map(item2Resolvable);\n\t}\n\texports.resolvablesBuilder = resolvablesBuilder;\n\t/**\n\t * @internalapi A internal global service\n\t *\n\t * StateBuilder is a factory for the internal [[State]] objects.\n\t *\n\t * When you register a state with the [[StateRegistry]], you register a plain old javascript object which\n\t * conforms to the [[StateDeclaration]] interface.  This factory takes that object and builds the corresponding\n\t * [[State]] object, which has an API and is used internally.\n\t *\n\t * Custom properties or API may be added to the internal [[State]] object by registering a decorator function\n\t * using the [[builder]] method.\n\t */\n\tvar StateBuilder = (function () {\n\t    function StateBuilder(matcher, $urlMatcherFactoryProvider) {\n\t        this.matcher = matcher;\n\t        var self = this;\n\t        var root = function () { return matcher.find(\"\"); };\n\t        var isRoot = function (state) { return state.name === \"\"; };\n\t        function parentBuilder(state) {\n\t            if (isRoot(state))\n\t                return null;\n\t            return matcher.find(self.parentName(state)) || root();\n\t        }\n\t        this.builders = {\n\t            self: [selfBuilder],\n\t            parent: [parentBuilder],\n\t            data: [dataBuilder],\n\t            // Build a URLMatcher if necessary, either via a relative or absolute URL\n\t            url: [getUrlBuilder($urlMatcherFactoryProvider, root)],\n\t            // Keep track of the closest ancestor state that has a URL (i.e. is navigable)\n\t            navigable: [getNavigableBuilder(isRoot)],\n\t            params: [paramsBuilder],\n\t            // Each framework-specific ui-router implementation should define its own `views` builder\n\t            // e.g., src/ng1/statebuilders/views.ts\n\t            views: [],\n\t            // Keep a full path from the root down to this state as this is needed for state activation.\n\t            path: [pathBuilder],\n\t            // Speed up $state.includes() as it's used a lot\n\t            includes: [includesBuilder],\n\t            resolvables: [resolvablesBuilder]\n\t        };\n\t    }\n\t    /**\n\t     * Registers a [[BuilderFunction]] for a specific [[State]] property (e.g., `parent`, `url`, or `path`).\n\t     * More than one BuilderFunction can be registered for a given property.\n\t     *\n\t     * The BuilderFunction(s) will be used to define the property on any subsequently built [[State]] objects.\n\t     *\n\t     * @param name The name of the State property being registered for.\n\t     * @param fn The BuilderFunction which will be used to build the State property\n\t     * @returns a function which deregisters the BuilderFunction\n\t     */\n\t    StateBuilder.prototype.builder = function (name, fn) {\n\t        var builders = this.builders;\n\t        var array = builders[name] || [];\n\t        // Backwards compat: if only one builder exists, return it, else return whole arary.\n\t        if (predicates_1.isString(name) && !predicates_1.isDefined(fn))\n\t            return array.length > 1 ? array : array[0];\n\t        if (!predicates_1.isString(name) || !predicates_1.isFunction(fn))\n\t            return;\n\t        builders[name] = array;\n\t        builders[name].push(fn);\n\t        return function () { return builders[name].splice(builders[name].indexOf(fn, 1)) && null; };\n\t    };\n\t    /**\n\t     * Builds all of the properties on an essentially blank State object, returning a State object which has all its\n\t     * properties and API built.\n\t     *\n\t     * @param state an uninitialized State object\n\t     * @returns the built State object\n\t     */\n\t    StateBuilder.prototype.build = function (state) {\n\t        var _a = this, matcher = _a.matcher, builders = _a.builders;\n\t        var parent = this.parentName(state);\n\t        if (parent && !matcher.find(parent))\n\t            return null;\n\t        for (var key in builders) {\n\t            if (!builders.hasOwnProperty(key))\n\t                continue;\n\t            var chain = builders[key].reduce(function (parentFn, step) { return function (_state) { return step(_state, parentFn); }; }, common_1.noop);\n\t            state[key] = chain(state);\n\t        }\n\t        return state;\n\t    };\n\t    StateBuilder.prototype.parentName = function (state) {\n\t        var name = state.name || \"\";\n\t        if (name.indexOf('.') !== -1)\n\t            return name.substring(0, name.lastIndexOf('.'));\n\t        if (!state.parent)\n\t            return \"\";\n\t        return predicates_1.isString(state.parent) ? state.parent : state.parent.name;\n\t    };\n\t    StateBuilder.prototype.name = function (state) {\n\t        var name = state.name;\n\t        if (name.indexOf('.') !== -1 || !state.parent)\n\t            return name;\n\t        var parentName = predicates_1.isString(state.parent) ? state.parent : state.parent.name;\n\t        return parentName ? parentName + \".\" + name : name;\n\t    };\n\t    return StateBuilder;\n\t}());\n\texports.StateBuilder = StateBuilder;\n\n\n/***/ },\n/* 41 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module state */ /** for typedoc */\n\tvar common_1 = __webpack_require__(3);\n\tvar predicates_1 = __webpack_require__(4);\n\tvar stateObject_1 = __webpack_require__(42);\n\tvar StateQueueManager = (function () {\n\t    function StateQueueManager(states, builder, $urlRouterProvider) {\n\t        this.states = states;\n\t        this.builder = builder;\n\t        this.$urlRouterProvider = $urlRouterProvider;\n\t        this.queue = [];\n\t    }\n\t    StateQueueManager.prototype.register = function (config) {\n\t        var _a = this, states = _a.states, queue = _a.queue, $state = _a.$state;\n\t        // Wrap a new object around the state so we can store our private details easily.\n\t        // @TODO: state = new State(extend({}, config, { ... }))\n\t        var state = common_1.inherit(new stateObject_1.State(), common_1.extend({}, config, {\n\t            self: config,\n\t            resolve: config.resolve || [],\n\t            toString: function () { return config.name; }\n\t        }));\n\t        if (!predicates_1.isString(state.name))\n\t            throw new Error(\"State must have a valid name\");\n\t        if (states.hasOwnProperty(state.name) || common_1.pluck(queue, 'name').indexOf(state.name) !== -1)\n\t            throw new Error(\"State '\" + state.name + \"' is already defined\");\n\t        queue.push(state);\n\t        if (this.$state) {\n\t            this.flush($state);\n\t        }\n\t        return state;\n\t    };\n\t    StateQueueManager.prototype.flush = function ($state) {\n\t        var _a = this, queue = _a.queue, states = _a.states, builder = _a.builder;\n\t        var result, state, orphans = [], orphanIdx, previousQueueLength = {};\n\t        while (queue.length > 0) {\n\t            state = queue.shift();\n\t            result = builder.build(state);\n\t            orphanIdx = orphans.indexOf(state);\n\t            if (result) {\n\t                if (states.hasOwnProperty(state.name))\n\t                    throw new Error(\"State '\" + name + \"' is already defined\");\n\t                states[state.name] = state;\n\t                this.attachRoute($state, state);\n\t                if (orphanIdx >= 0)\n\t                    orphans.splice(orphanIdx, 1);\n\t                continue;\n\t            }\n\t            var prev = previousQueueLength[state.name];\n\t            previousQueueLength[state.name] = queue.length;\n\t            if (orphanIdx >= 0 && prev === queue.length) {\n\t                // Wait until two consecutive iterations where no additional states were dequeued successfully.\n\t                // throw new Error(`Cannot register orphaned state '${state.name}'`);\n\t                return states;\n\t            }\n\t            else if (orphanIdx < 0) {\n\t                orphans.push(state);\n\t            }\n\t            queue.push(state);\n\t        }\n\t        return states;\n\t    };\n\t    StateQueueManager.prototype.autoFlush = function ($state) {\n\t        this.$state = $state;\n\t        this.flush($state);\n\t    };\n\t    StateQueueManager.prototype.attachRoute = function ($state, state) {\n\t        var $urlRouterProvider = this.$urlRouterProvider;\n\t        if (state[common_1.abstractKey] || !state.url)\n\t            return;\n\t        $urlRouterProvider.when(state.url, ['$match', '$stateParams', function ($match, $stateParams) {\n\t                if ($state.$current.navigable !== state || !common_1.equalForKeys($match, $stateParams)) {\n\t                    $state.transitionTo(state, $match, { inherit: true, location: false });\n\t                }\n\t            }]);\n\t    };\n\t    return StateQueueManager;\n\t}());\n\texports.StateQueueManager = StateQueueManager;\n\n\n/***/ },\n/* 42 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/** @module state */ /** for typedoc */\n\t\"use strict\";\n\tvar common_1 = __webpack_require__(3);\n\tvar hof_1 = __webpack_require__(5);\n\t/**\n\t * @ngdoc object\n\t * @name ui.router.state.type:State\n\t *\n\t * @description\n\t * Definition object for states. Includes methods for manipulating the state heirarchy.\n\t *\n\t * @param {Object} config  A configuration object hash that includes the results of user-supplied\n\t *        values, as well as values from `StateBuilder`.\n\t *\n\t * @returns {Object}  Returns a new `State` object.\n\t */\n\tvar State = (function () {\n\t    function State(config) {\n\t        common_1.extend(this, config);\n\t        // Object.freeze(this);\n\t    }\n\t    /**\n\t     * @ngdoc function\n\t     * @name ui.router.state.type:State#is\n\t     * @methodOf ui.router.state.type:State\n\t     *\n\t     * @description\n\t     * Compares the identity of the state against the passed value, which is either an object\n\t     * reference to the actual `State` instance, the original definition object passed to\n\t     * `$stateProvider.state()`, or the fully-qualified name.\n\t     *\n\t     * @param {Object} ref Can be one of (a) a `State` instance, (b) an object that was passed\n\t     *        into `$stateProvider.state()`, (c) the fully-qualified name of a state as a string.\n\t     * @returns {boolean} Returns `true` if `ref` matches the current `State` instance.\n\t     */\n\t    State.prototype.is = function (ref) {\n\t        return this === ref || this.self === ref || this.fqn() === ref;\n\t    };\n\t    /**\n\t     * @ngdoc function\n\t     * @name ui.router.state.type:State#fqn\n\t     * @methodOf ui.router.state.type:State\n\t     *\n\t     * @description\n\t     * Returns the fully-qualified name of the state, based on its current position in the tree.\n\t     *\n\t     * @returns {string} Returns a dot-separated name of the state.\n\t     */\n\t    State.prototype.fqn = function () {\n\t        if (!this.parent || !(this.parent instanceof this.constructor))\n\t            return this.name;\n\t        var name = this.parent.fqn();\n\t        return name ? name + \".\" + this.name : this.name;\n\t    };\n\t    /**\n\t     * @ngdoc function\n\t     * @name ui.router.state.type:State#root\n\t     * @methodOf ui.router.state.type:State\n\t     *\n\t     * @description\n\t     * Returns the root node of this state's tree.\n\t     *\n\t     * @returns {State} The root of this state's tree.\n\t     */\n\t    State.prototype.root = function () {\n\t        return this.parent && this.parent.root() || this;\n\t    };\n\t    State.prototype.parameters = function (opts) {\n\t        opts = common_1.defaults(opts, { inherit: true });\n\t        var inherited = opts.inherit && this.parent && this.parent.parameters() || [];\n\t        return inherited.concat(common_1.values(this.params));\n\t    };\n\t    State.prototype.parameter = function (id, opts) {\n\t        if (opts === void 0) { opts = {}; }\n\t        return (this.url && this.url.parameter(id, opts) ||\n\t            common_1.find(common_1.values(this.params), hof_1.propEq('id', id)) ||\n\t            opts.inherit && this.parent && this.parent.parameter(id));\n\t    };\n\t    State.prototype.toString = function () {\n\t        return this.fqn();\n\t    };\n\t    return State;\n\t}());\n\texports.State = State;\n\n\n/***/ },\n/* 43 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module state */ /** */\n\tvar common_1 = __webpack_require__(3);\n\tvar predicates_1 = __webpack_require__(4);\n\tvar queue_1 = __webpack_require__(8);\n\tvar coreservices_1 = __webpack_require__(6);\n\tvar pathFactory_1 = __webpack_require__(20);\n\tvar node_1 = __webpack_require__(21);\n\tvar transitionService_1 = __webpack_require__(31);\n\tvar rejectFactory_1 = __webpack_require__(10);\n\tvar targetState_1 = __webpack_require__(14);\n\tvar param_1 = __webpack_require__(22);\n\tvar glob_1 = __webpack_require__(7);\n\tvar common_2 = __webpack_require__(3);\n\tvar common_3 = __webpack_require__(3);\n\tvar StateService = (function () {\n\t    /** @hidden */\n\t    function StateService(router) {\n\t        this.router = router;\n\t        /** @hidden */\n\t        this._defaultErrorHandler = function $defaultErrorHandler($error$) {\n\t            if ($error$ instanceof Error && $error$.stack) {\n\t                console.error($error$.stack);\n\t            }\n\t            else if ($error$ instanceof rejectFactory_1.Rejection) {\n\t                console.error($error$);\n\t                if ($error$.detail && $error$.detail.stack)\n\t                    console.error($error$.detail.stack);\n\t            }\n\t            else {\n\t                console.error($error$);\n\t            }\n\t        };\n\t        var getters = ['current', '$current', 'params', 'transition'];\n\t        var boundFns = Object.keys(StateService.prototype).filter(function (key) { return getters.indexOf(key) === -1; });\n\t        common_3.bindFunctions(StateService.prototype, this, this, boundFns);\n\t    }\n\t    Object.defineProperty(StateService.prototype, \"transition\", {\n\t        get: function () { return this.router.globals.transition; },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(StateService.prototype, \"params\", {\n\t        get: function () { return this.router.globals.params; },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(StateService.prototype, \"current\", {\n\t        get: function () { return this.router.globals.current; },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(StateService.prototype, \"$current\", {\n\t        get: function () { return this.router.globals.$current; },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    /**\n\t     * Handler for when [[transitionTo]] is called with an invalid state.\n\t     *\n\t     * Invokes the [[onInvalid]] callbacks, in natural order.\n\t     * Each callback's return value is checked in sequence until one of them returns an instance of TargetState.\n\t     * The results of the callbacks are wrapped in $q.when(), so the callbacks may return promises.\n\t     *\n\t     * If a callback returns an TargetState, then it is used as arguments to $state.transitionTo() and the result returned.\n\t     */\n\t    StateService.prototype._handleInvalidTargetState = function (fromPath, $to$) {\n\t        var _this = this;\n\t        var globals = this.router.globals;\n\t        var latestThing = function () { return globals.transitionHistory.peekTail(); };\n\t        var latest = latestThing();\n\t        var $from$ = pathFactory_1.PathFactory.makeTargetState(fromPath);\n\t        var callbackQueue = new queue_1.Queue([].concat(this.router.stateProvider.invalidCallbacks));\n\t        var $q = coreservices_1.services.$q, $injector = coreservices_1.services.$injector;\n\t        var invokeCallback = function (callback) { return $q.when($injector.invoke(callback, null, { $to$: $to$, $from$: $from$ })); };\n\t        var checkForRedirect = function (result) {\n\t            if (!(result instanceof targetState_1.TargetState)) {\n\t                return;\n\t            }\n\t            var target = result;\n\t            // Recreate the TargetState, in case the state is now defined.\n\t            target = _this.target(target.identifier(), target.params(), target.options());\n\t            if (!target.valid())\n\t                return rejectFactory_1.Rejection.invalid(target.error()).toPromise();\n\t            if (latestThing() !== latest)\n\t                return rejectFactory_1.Rejection.superseded().toPromise();\n\t            return _this.transitionTo(target.identifier(), target.params(), target.options());\n\t        };\n\t        function invokeNextCallback() {\n\t            var nextCallback = callbackQueue.dequeue();\n\t            if (nextCallback === undefined)\n\t                return rejectFactory_1.Rejection.invalid($to$.error()).toPromise();\n\t            return invokeCallback(nextCallback).then(checkForRedirect).then(function (result) { return result || invokeNextCallback(); });\n\t        }\n\t        return invokeNextCallback();\n\t    };\n\t    /**\n\t     * @ngdoc function\n\t     * @name ui.router.state.$state#reload\n\t     * @methodOf ui.router.state.$state\n\t     *\n\t     * @description\n\t     * A method that force reloads the current state, or a partial state hierarchy. All resolves are re-resolved,\n\t     * controllers reinstantiated, and events re-fired.\n\t     *\n\t     * @example\n\t     * <pre>\n\t     * let app angular.module('app', ['ui.router']);\n\t     *\n\t     * app.controller('ctrl', function ($scope, $state) {\n\t     *   $scope.reload = function(){\n\t     *     $state.reload();\n\t     *   }\n\t     * });\n\t     * </pre>\n\t     *\n\t     * `reload()` is just an alias for:\n\t     * <pre>\n\t     * $state.transitionTo($state.current, $stateParams, {\n\t     *   reload: true, inherit: false, notify: true\n\t     * });\n\t     * </pre>\n\t     *\n\t     * @param {string=|object=} reloadState - A state name or a state object, which is the root of the resolves to be re-resolved.\n\t     * @example\n\t     * <pre>\n\t     * //assuming app application consists of 3 states: 'contacts', 'contacts.detail', 'contacts.detail.item'\n\t     * //and current state is 'contacts.detail.item'\n\t     * let app angular.module('app', ['ui.router']);\n\t     *\n\t     * app.controller('ctrl', function ($scope, $state) {\n\t     *   $scope.reload = function(){\n\t     *     //will reload 'contact.detail' and nested 'contact.detail.item' states\n\t     *     $state.reload('contact.detail');\n\t     *   }\n\t     * });\n\t     * </pre>\n\t     *\n\t     * @returns {promise} A promise representing the state of the new transition. See\n\t     * {@link ui.router.state.$state#methods_go $state.go}.\n\t     */\n\t    StateService.prototype.reload = function (reloadState) {\n\t        return this.transitionTo(this.current, this.params, {\n\t            reload: predicates_1.isDefined(reloadState) ? reloadState : true,\n\t            inherit: false,\n\t            notify: false\n\t        });\n\t    };\n\t    ;\n\t    /**\n\t     * @ngdoc function\n\t     * @name ui.router.state.$state#go\n\t     * @methodOf ui.router.state.$state\n\t     *\n\t     * @description\n\t     * Convenience method for transitioning to a new state. `$state.go` calls\n\t     * `$state.transitionTo` internally but automatically sets options to\n\t     * `{ location: true, inherit: true, relative: $state.$current, notify: true }`.\n\t     * This allows you to easily use an absolute or relative to path and specify\n\t     * only the parameters you'd like to update (while letting unspecified parameters\n\t     * inherit from the currently active ancestor states).\n\t     *\n\t     * @example\n\t     * <pre>\n\t     * let app = angular.module('app', ['ui.router']);\n\t     *\n\t     * app.controller('ctrl', function ($scope, $state) {\n\t     *   $scope.changeState = function () {\n\t     *     $state.go('contact.detail');\n\t     *   };\n\t     * });\n\t     * </pre>\n\t     * <img src='../ngdoc_assets/StateGoExamples.png'/>\n\t     *\n\t     * @param {string} to Absolute state name or relative state path. Some examples:\n\t     *\n\t     * - `$state.go('contact.detail')` - will go to the `contact.detail` state\n\t     * - `$state.go('^')` - will go to a parent state\n\t     * - `$state.go('^.sibling')` - will go to a sibling state\n\t     * - `$state.go('.child.grandchild')` - will go to grandchild state\n\t     *\n\t     * @param {object=} params A map of the parameters that will be sent to the state,\n\t     * will populate $stateParams. Any parameters that are not specified will be inherited from currently\n\t     * defined parameters. This allows, for example, going to a sibling state that shares parameters\n\t     * specified in a parent state. Parameter inheritance only works between common ancestor states, I.e.\n\t     * transitioning to a sibling will get you the parameters for all parents, transitioning to a child\n\t     * will get you all current parameters, etc.\n\t     * @param {object=} options Options object. The options are:\n\t     *\n\t     * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`\n\t     *    will not. If string, must be `\"replace\"`, which will update url and also replace last history record.\n\t     * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.\n\t     * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'),\n\t     *    defines which state to be relative from.\n\t     * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.\n\t     * - **`reload`** (v0.2.5) - {boolean=false}, If `true` will force transition even if the state or params\n\t     *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd\n\t     *    use this when you want to force a reload when *everything* is the same, including search params.\n\t     *\n\t     * @returns {promise} A promise representing the state of the new transition.\n\t     *\n\t     * Possible success values:\n\t     *\n\t     * - $state.current\n\t     *\n\t     * <br/>Possible rejection values:\n\t     *\n\t     * - 'transition superseded' - when a newer transition has been started after this one\n\t     * - 'transition prevented' - when `event.preventDefault()` has been called in a `$stateChangeStart` listener\n\t     * - 'transition aborted' - when `event.preventDefault()` has been called in a `$stateNotFound` listener or\n\t     *   when a `$stateNotFound` `event.retry` promise errors.\n\t     * - 'transition failed' - when a state has been unsuccessfully found after 2 tries.\n\t     * - *resolve error* - when an error has occurred with a `resolve`\n\t     *\n\t     */\n\t    StateService.prototype.go = function (to, params, options) {\n\t        var defautGoOpts = { relative: this.$current, inherit: true };\n\t        var transOpts = common_1.defaults(options, defautGoOpts, transitionService_1.defaultTransOpts);\n\t        return this.transitionTo(to, params, transOpts);\n\t    };\n\t    ;\n\t    /** Factory method for creating a TargetState */\n\t    StateService.prototype.target = function (identifier, params, options) {\n\t        if (options === void 0) { options = {}; }\n\t        // If we're reloading, find the state object to reload from\n\t        if (predicates_1.isObject(options.reload) && !options.reload.name)\n\t            throw new Error('Invalid reload state object');\n\t        var reg = this.router.stateRegistry;\n\t        options.reloadState = options.reload === true ? reg.root() : reg.matcher.find(options.reload, options.relative);\n\t        if (options.reload && !options.reloadState)\n\t            throw new Error(\"No such reload state '\" + (predicates_1.isString(options.reload) ? options.reload : options.reload.name) + \"'\");\n\t        var stateDefinition = reg.matcher.find(identifier, options.relative);\n\t        return new targetState_1.TargetState(identifier, stateDefinition, params, options);\n\t    };\n\t    ;\n\t    /**\n\t     * @ngdoc function\n\t     * @name ui.router.state.$state#transitionTo\n\t     * @methodOf ui.router.state.$state\n\t     *\n\t     * @description\n\t     * Low-level method for transitioning to a new state. {@link ui.router.state.$state#methods_go $state.go}\n\t     * uses `transitionTo` internally. `$state.go` is recommended in most situations.\n\t     *\n\t     * @example\n\t     * <pre>\n\t     * let app = angular.module('app', ['ui.router']);\n\t     *\n\t     * app.controller('ctrl', function ($scope, $state) {\n\t     *   $scope.changeState = function () {\n\t     *     $state.transitionTo('contact.detail');\n\t     *   };\n\t     * });\n\t     * </pre>\n\t     *\n\t     * @param {string} to State name.\n\t     * @param {object=} toParams A map of the parameters that will be sent to the state,\n\t     * will populate $stateParams.\n\t     * @param {object=} options Options object. The options are:\n\t     *\n\t     * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`\n\t     *    will not. If string, must be `\"replace\"`, which will update url and also replace last history record.\n\t     * - **`inherit`** - {boolean=false}, If `true` will inherit url parameters from current url.\n\t     * - **`relative`** - {object=}, When transitioning with relative path (e.g '^'),\n\t     *    defines which state to be relative from.\n\t     * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.\n\t     * - **`reload`** (v0.2.5) - {boolean=false}, If `true` will force transition even if the state or params\n\t     *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd\n\t     *    use this when you want to force a reload when *everything* is the same, including search params.\n\t     *\n\t     * @returns {promise} A promise representing the state of the new transition. See\n\t     * {@link ui.router.state.$state#methods_go $state.go}.\n\t     */\n\t    StateService.prototype.transitionTo = function (to, toParams, options) {\n\t        var _this = this;\n\t        if (toParams === void 0) { toParams = {}; }\n\t        if (options === void 0) { options = {}; }\n\t        var router = this.router;\n\t        var globals = router.globals;\n\t        var transHistory = globals.transitionHistory;\n\t        options = common_1.defaults(options, transitionService_1.defaultTransOpts);\n\t        options = common_1.extend(options, { current: transHistory.peekTail.bind(transHistory) });\n\t        var ref = this.target(to, toParams, options);\n\t        var latestSuccess = globals.successfulTransitions.peekTail();\n\t        var rootPath = function () { return [new node_1.PathNode(_this.router.stateRegistry.root())]; };\n\t        var currentPath = latestSuccess ? latestSuccess.treeChanges().to : rootPath();\n\t        if (!ref.exists())\n\t            return this._handleInvalidTargetState(currentPath, ref);\n\t        if (!ref.valid())\n\t            return common_1.silentRejection(ref.error());\n\t        /**\n\t         * Special handling for Ignored, Aborted, and Redirected transitions\n\t         *\n\t         * The semantics for the transition.run() promise and the StateService.transitionTo()\n\t         * promise differ. For instance, the run() promise may be rejected because it was\n\t         * IGNORED, but the transitionTo() promise is resolved because from the user perspective\n\t         * no error occurred.  Likewise, the transition.run() promise may be rejected because of\n\t         * a Redirect, but the transitionTo() promise is chained to the new Transition's promise.\n\t         */\n\t        var rejectedTransitionHandler = function (transition) { return function (error) {\n\t            if (error instanceof rejectFactory_1.Rejection) {\n\t                if (error.type === rejectFactory_1.RejectType.IGNORED) {\n\t                    router.urlRouter.update();\n\t                    return globals.current;\n\t                }\n\t                if (error.type === rejectFactory_1.RejectType.SUPERSEDED && error.redirected && error.detail instanceof targetState_1.TargetState) {\n\t                    var redirect = transition.redirect(error.detail);\n\t                    return redirect.run().catch(rejectedTransitionHandler(redirect));\n\t                }\n\t                if (error.type === rejectFactory_1.RejectType.ABORTED) {\n\t                    router.urlRouter.update();\n\t                    return coreservices_1.services.$q.reject(error);\n\t                }\n\t            }\n\t            var errorHandler = _this.defaultErrorHandler();\n\t            errorHandler(error);\n\t            return coreservices_1.services.$q.reject(error);\n\t        }; };\n\t        var transition = this.router.transitionService.create(currentPath, ref);\n\t        var transitionToPromise = transition.run().catch(rejectedTransitionHandler(transition));\n\t        common_1.silenceUncaughtInPromise(transitionToPromise); // issue #2676\n\t        // Return a promise for the transition, which also has the transition object on it.\n\t        return common_1.extend(transitionToPromise, { transition: transition });\n\t    };\n\t    ;\n\t    /**\n\t     * @ngdoc function\n\t     * @name ui.router.state.$state#is\n\t     * @methodOf ui.router.state.$state\n\t     *\n\t     * @description\n\t     * Similar to {@link ui.router.state.$state#methods_includes $state.includes},\n\t     * but only checks for the full state name. If params is supplied then it will be\n\t     * tested for strict equality against the current active params object, so all params\n\t     * must match with none missing and no extras.\n\t     *\n\t     * @example\n\t     * <pre>\n\t     * $state.$current.name = 'contacts.details.item';\n\t     *\n\t     * // absolute name\n\t     * $state.is('contact.details.item'); // returns true\n\t     * $state.is(contactDetailItemStateObject); // returns true\n\t     *\n\t     * // relative name (. and ^), typically from a template\n\t     * // E.g. from the 'contacts.details' template\n\t     * <div ng-class=\"{highlighted: $state.is('.item')}\">Item</div>\n\t     * </pre>\n\t     *\n\t     * @param {string|object} stateOrName The state name (absolute or relative) or state object you'd like to check.\n\t     * @param {object=} params A param object, e.g. `{sectionId: section.id}`, that you'd like\n\t     * to test against the current active state.\n\t     * @param {object=} options An options object.  The options are:\n\t     *\n\t     * - **`relative`** - {string|object} -  If `stateOrName` is a relative state name and `options.relative` is set, .is will\n\t     * test relative to `options.relative` state (or name).\n\t     *\n\t     * @returns {boolean} Returns true if it is the state.\n\t     */\n\t    StateService.prototype.is = function (stateOrName, params, options) {\n\t        options = common_1.defaults(options, { relative: this.$current });\n\t        var state = this.router.stateRegistry.matcher.find(stateOrName, options.relative);\n\t        if (!predicates_1.isDefined(state))\n\t            return undefined;\n\t        if (this.$current !== state)\n\t            return false;\n\t        return predicates_1.isDefined(params) && params !== null ? param_1.Param.equals(state.parameters(), this.params, params) : true;\n\t    };\n\t    ;\n\t    /**\n\t     * @ngdoc function\n\t     * @name ui.router.state.$state#includes\n\t     * @methodOf ui.router.state.$state\n\t     *\n\t     * @description\n\t     * A method to determine if the current active state is equal to or is the child of the\n\t     * state stateName. If any params are passed then they will be tested for a match as well.\n\t     * Not all the parameters need to be passed, just the ones you'd like to test for equality.\n\t     *\n\t     * @example\n\t     * Partial and relative names\n\t     * <pre>\n\t     * $state.$current.name = 'contacts.details.item';\n\t     *\n\t     * // Using partial names\n\t     * $state.includes(\"contacts\"); // returns true\n\t     * $state.includes(\"contacts.details\"); // returns true\n\t     * $state.includes(\"contacts.details.item\"); // returns true\n\t     * $state.includes(\"contacts.list\"); // returns false\n\t     * $state.includes(\"about\"); // returns false\n\t     *\n\t     * // Using relative names (. and ^), typically from a template\n\t     * // E.g. from the 'contacts.details' template\n\t     * <div ng-class=\"{highlighted: $state.includes('.item')}\">Item</div>\n\t     * </pre>\n\t     *\n\t     * Basic globbing patterns\n\t     * <pre>\n\t     * $state.$current.name = 'contacts.details.item.url';\n\t     *\n\t     * $state.includes(\"*.details.*.*\"); // returns true\n\t     * $state.includes(\"*.details.**\"); // returns true\n\t     * $state.includes(\"**.item.**\"); // returns true\n\t     * $state.includes(\"*.details.item.url\"); // returns true\n\t     * $state.includes(\"*.details.*.url\"); // returns true\n\t     * $state.includes(\"*.details.*\"); // returns false\n\t     * $state.includes(\"item.**\"); // returns false\n\t     * </pre>\n\t     *\n\t     * @param {string} stateOrName A partial name, relative name, or glob pattern\n\t     * to be searched for within the current state name.\n\t     * @param {object=} params A param object, e.g. `{sectionId: section.id}`,\n\t     * that you'd like to test against the current active state.\n\t     * @param {object=} options An options object.  The options are:\n\t     *\n\t     * - **`relative`** - {string|object=} -  If `stateOrName` is a relative state reference and `options.relative` is set,\n\t     * .includes will test relative to `options.relative` state (or name).\n\t     *\n\t     * @returns {boolean} Returns true if it does include the state\n\t     */\n\t    StateService.prototype.includes = function (stateOrName, params, options) {\n\t        options = common_1.defaults(options, { relative: this.$current });\n\t        var glob = predicates_1.isString(stateOrName) && glob_1.Glob.fromString(stateOrName);\n\t        if (glob) {\n\t            if (!glob.matches(this.$current.name))\n\t                return false;\n\t            stateOrName = this.$current.name;\n\t        }\n\t        var state = this.router.stateRegistry.matcher.find(stateOrName, options.relative), include = this.$current.includes;\n\t        if (!predicates_1.isDefined(state))\n\t            return undefined;\n\t        if (!predicates_1.isDefined(include[state.name]))\n\t            return false;\n\t        // @TODO Replace with Param.equals() ?\n\t        return params ? common_2.equalForKeys(param_1.Param.values(state.parameters(), params), this.params, Object.keys(params)) : true;\n\t    };\n\t    ;\n\t    /**\n\t     * @ngdoc function\n\t     * @name ui.router.state.$state#href\n\t     * @methodOf ui.router.state.$state\n\t     *\n\t     * @description\n\t     * A url generation method that returns the compiled url for the given state populated with the given params.\n\t     *\n\t     * @example\n\t     * <pre>\n\t     * expect($state.href(\"about.person\", { person: \"bob\" })).toEqual(\"/about/bob\");\n\t     * </pre>\n\t     *\n\t     * @param {string|object} stateOrName The state name or state object you'd like to generate a url from.\n\t     * @param {object=} params An object of parameter values to fill the state's required parameters.\n\t     * @param {object=} options Options object. The options are:\n\t     *\n\t     * - **`lossy`** - {boolean=true} -  If true, and if there is no url associated with the state provided in the\n\t     *    first parameter, then the constructed href url will be built from the first navigable ancestor (aka\n\t     *    ancestor with a valid url).\n\t     * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.\n\t     * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'),\n\t     *    defines which state to be relative from.\n\t     * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. \"http://www.example.com/fullurl\".\n\t     *\n\t     * @returns {string} compiled state url\n\t     */\n\t    StateService.prototype.href = function (stateOrName, params, options) {\n\t        var defaultHrefOpts = {\n\t            lossy: true,\n\t            inherit: true,\n\t            absolute: false,\n\t            relative: this.$current\n\t        };\n\t        options = common_1.defaults(options, defaultHrefOpts);\n\t        var state = this.router.stateRegistry.matcher.find(stateOrName, options.relative);\n\t        if (!predicates_1.isDefined(state))\n\t            return null;\n\t        if (options.inherit)\n\t            params = this.params.$inherit(params || {}, this.$current, state);\n\t        var nav = (state && options.lossy) ? state.navigable : state;\n\t        if (!nav || nav.url === undefined || nav.url === null) {\n\t            return null;\n\t        }\n\t        return this.router.urlRouter.href(nav.url, param_1.Param.values(state.parameters(), params), {\n\t            absolute: options.absolute\n\t        });\n\t    };\n\t    ;\n\t    /**\n\t     * Sets or gets the default [[transitionTo]] error handler.\n\t     *\n\t     * The error handler is called when a [[Transition]] is rejected or when any error occurred during the Transition.\n\t     * This includes errors caused by resolves and transition hooks.\n\t     *\n\t     * The built-in default error handler logs the error to the console.\n\t     *\n\t     * You can provide your own custom handler.\n\t     *\n\t     * @example\n\t     * ```js\n\t     *\n\t     * stateService.defaultErrorHandler(function() {\n\t     *   // Do not log transitionTo errors\n\t     * });\n\t     * ```\n\t     *\n\t     * @param handler a global error handler function\n\t     * @returns the current global error handler\n\t     */\n\t    StateService.prototype.defaultErrorHandler = function (handler) {\n\t        return this._defaultErrorHandler = handler || this._defaultErrorHandler;\n\t    };\n\t    StateService.prototype.get = function (stateOrName, base) {\n\t        var reg = this.router.stateRegistry;\n\t        if (arguments.length === 0)\n\t            return reg.get();\n\t        return reg.get(stateOrName, base || this.$current);\n\t    };\n\t    return StateService;\n\t}());\n\texports.StateService = StateService;\n\n\n/***/ },\n/* 44 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module core */ /** */\n\tvar stateParams_1 = __webpack_require__(45);\n\tvar queue_1 = __webpack_require__(8);\n\tvar common_1 = __webpack_require__(3);\n\t/**\n\t * Global mutable state\n\t */\n\tvar Globals = (function () {\n\t    function Globals(transitionService) {\n\t        var _this = this;\n\t        this.params = new stateParams_1.StateParams();\n\t        this.transitionHistory = new queue_1.Queue([], 1);\n\t        this.successfulTransitions = new queue_1.Queue([], 1);\n\t        var beforeNewTransition = function ($transition$) {\n\t            _this.transition = $transition$;\n\t            _this.transitionHistory.enqueue($transition$);\n\t            var updateGlobalState = function () {\n\t                _this.successfulTransitions.enqueue($transition$);\n\t                _this.$current = $transition$.$to();\n\t                _this.current = _this.$current.self;\n\t                common_1.copy($transition$.params(), _this.params);\n\t            };\n\t            $transition$.onSuccess({}, updateGlobalState, { priority: 10000 });\n\t            var clearCurrentTransition = function () { if (_this.transition === $transition$)\n\t                _this.transition = null; };\n\t            $transition$.promise.then(clearCurrentTransition, clearCurrentTransition);\n\t        };\n\t        transitionService.onBefore({}, beforeNewTransition);\n\t    }\n\t    return Globals;\n\t}());\n\texports.Globals = Globals;\n\n\n/***/ },\n/* 45 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module params */ /** for typedoc */\n\tvar common_1 = __webpack_require__(3);\n\tvar StateParams = (function () {\n\t    function StateParams(params) {\n\t        if (params === void 0) { params = {}; }\n\t        common_1.extend(this, params);\n\t    }\n\t    /**\n\t     * Merges a set of parameters with all parameters inherited between the common parents of the\n\t     * current state and a given destination state.\n\t     *\n\t     * @param {Object} newParams The set of parameters which will be composited with inherited params.\n\t     * @param {Object} $current Internal definition of object representing the current state.\n\t     * @param {Object} $to Internal definition of object representing state to transition to.\n\t     */\n\t    StateParams.prototype.$inherit = function (newParams, $current, $to) {\n\t        var parents = common_1.ancestors($current, $to), parentParams, inherited = {}, inheritList = [];\n\t        for (var i in parents) {\n\t            if (!parents[i] || !parents[i].params)\n\t                continue;\n\t            parentParams = Object.keys(parents[i].params);\n\t            if (!parentParams.length)\n\t                continue;\n\t            for (var j in parentParams) {\n\t                if (inheritList.indexOf(parentParams[j]) >= 0)\n\t                    continue;\n\t                inheritList.push(parentParams[j]);\n\t                inherited[parentParams[j]] = this[parentParams[j]];\n\t            }\n\t        }\n\t        return common_1.extend({}, inherited, newParams);\n\t    };\n\t    ;\n\t    return StateParams;\n\t}());\n\texports.StateParams = StateParams;\n\n\n/***/ },\n/* 46 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tfunction __export(m) {\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t}\n\t/**\n\t * This module contains code for State Parameters.\n\t *\n\t * See [[ParamDeclaration]]\n\t * @module params\n\t * @preferred doc\n\t */\n\t/** for typedoc */\n\t__export(__webpack_require__(22));\n\t__export(__webpack_require__(25));\n\t__export(__webpack_require__(45));\n\t__export(__webpack_require__(24));\n\n\n/***/ },\n/* 47 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tfunction __export(m) {\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t}\n\t/** @module path */ /** for typedoc */\n\t__export(__webpack_require__(21));\n\t__export(__webpack_require__(20));\n\n\n/***/ },\n/* 48 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tfunction __export(m) {\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t}\n\t/** @module resolve */ /** for typedoc */\n\t__export(__webpack_require__(18));\n\t__export(__webpack_require__(19));\n\t__export(__webpack_require__(17));\n\n\n/***/ },\n/* 49 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tfunction __export(m) {\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t}\n\t/** @module state */ /** for typedoc */\n\t__export(__webpack_require__(30));\n\t__export(__webpack_require__(40));\n\t__export(__webpack_require__(42));\n\t__export(__webpack_require__(39));\n\t__export(__webpack_require__(41));\n\t__export(__webpack_require__(38));\n\t__export(__webpack_require__(43));\n\t__export(__webpack_require__(14));\n\n\n/***/ },\n/* 50 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tfunction __export(m) {\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t}\n\t/**\n\t * This module contains APIs related to a Transition.\n\t *\n\t * See [[Transition]], [[$transitions]]\n\t *\n\t * @module transition\n\t * @preferred\n\t */\n\t/** for typedoc */\n\t__export(__webpack_require__(16));\n\t__export(__webpack_require__(15));\n\t__export(__webpack_require__(10));\n\t__export(__webpack_require__(11));\n\t__export(__webpack_require__(13));\n\t__export(__webpack_require__(31));\n\n\n/***/ },\n/* 51 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tfunction __export(m) {\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t}\n\t/** @module url */ /** for typedoc */\n\t__export(__webpack_require__(28));\n\t__export(__webpack_require__(23));\n\t__export(__webpack_require__(27));\n\t__export(__webpack_require__(29));\n\n\n/***/ },\n/* 52 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tfunction __export(m) {\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t}\n\t/** @module view */ /** for typedoc */\n\t__export(__webpack_require__(37));\n\n\n/***/ },\n/* 53 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * # UI-Router for Angular 1\n\t *\n\t * - Provides an implementation for the [[CoreServices]] API, based on angular 1 services.\n\t * - Also registers some services with the angular 1 injector.\n\t * - Creates and bootstraps a new [[UIRouter]] object.  Ties it to the the angular 1 lifecycle.\n\t *\n\t * @module ng1\n\t * @preferred\n\t */\n\t\"use strict\";\n\t/** for typedoc */\n\tvar router_1 = __webpack_require__(26);\n\tvar coreservices_1 = __webpack_require__(6);\n\tvar common_1 = __webpack_require__(3);\n\tvar hof_1 = __webpack_require__(5);\n\tvar predicates_1 = __webpack_require__(4);\n\tvar resolveService_1 = __webpack_require__(54);\n\tvar trace_1 = __webpack_require__(12);\n\tvar views_1 = __webpack_require__(55);\n\tvar templateFactory_1 = __webpack_require__(56);\n\tvar onEnterExitRetain_1 = __webpack_require__(57);\n\t/** @hidden */\n\tvar app = angular.module(\"ui.router.angular1\", []);\n\t/**\n\t * @ngdoc overview\n\t * @name ui.router.util\n\t *\n\t * @description\n\t * # ui.router.util sub-module\n\t *\n\t * This module is a dependency of other sub-modules. Do not include this module as a dependency\n\t * in your angular app (use {@link ui.router} module instead).\n\t *\n\t */\n\tangular.module('ui.router.util', ['ng', 'ui.router.init']);\n\t/**\n\t * @ngdoc overview\n\t * @name ui.router.router\n\t *\n\t * @requires ui.router.util\n\t *\n\t * @description\n\t * # ui.router.router sub-module\n\t *\n\t * This module is a dependency of other sub-modules. Do not include this module as a dependency\n\t * in your angular app (use {@link ui.router} module instead).\n\t */\n\tangular.module('ui.router.router', ['ui.router.util']);\n\t/**\n\t * @ngdoc overview\n\t * @name ui.router.state\n\t *\n\t * @requires ui.router.router\n\t * @requires ui.router.util\n\t *\n\t * @description\n\t * # ui.router.state sub-module\n\t *\n\t * This module is a dependency of the main ui.router module. Do not include this module as a dependency\n\t * in your angular app (use {@link ui.router} module instead).\n\t *\n\t */\n\tangular.module('ui.router.state', ['ui.router.router', 'ui.router.util', 'ui.router.angular1']);\n\t/**\n\t * @ngdoc overview\n\t * @name ui.router\n\t *\n\t * @requires ui.router.state\n\t *\n\t * @description\n\t * # ui.router\n\t *\n\t * ## The main module for ui.router\n\t * There are several sub-modules included with the ui.router module, however only this module is needed\n\t * as a dependency within your angular app. The other modules are for organization purposes.\n\t *\n\t * The modules are:\n\t * * ui.router - the main \"umbrella\" module\n\t * * ui.router.router -\n\t *\n\t * *You'll need to include **only** this module as the dependency within your angular app.*\n\t *\n\t * <pre>\n\t * <!doctype html>\n\t * <html ng-app=\"myApp\">\n\t * <head>\n\t *   <script src=\"js/angular.js\"></script>\n\t *   <!-- Include the ui-router script -->\n\t *   <script src=\"js/angular-ui-router.min.js\"></script>\n\t *   <script>\n\t *     // ...and add 'ui.router' as a dependency\n\t *     var myApp = angular.module('myApp', ['ui.router']);\n\t *   </script>\n\t * </head>\n\t * <body>\n\t * </body>\n\t * </html>\n\t * </pre>\n\t */\n\tangular.module('ui.router', ['ui.router.init', 'ui.router.state', 'ui.router.angular1']);\n\tangular.module('ui.router.compat', ['ui.router']);\n\t/**\n\t * Annotates a controller expression (may be a controller function(), a \"controllername\",\n\t * or \"controllername as name\")\n\t *\n\t * - Temporarily decorates $injector.instantiate.\n\t * - Invokes $controller() service\n\t *   - Calls $injector.instantiate with controller constructor\n\t * - Annotate constructor\n\t * - Undecorate $injector\n\t *\n\t * returns an array of strings, which are the arguments of the controller expression\n\t */\n\tfunction annotateController(controllerExpression) {\n\t    var $injector = coreservices_1.services.$injector;\n\t    var $controller = $injector.get(\"$controller\");\n\t    var oldInstantiate = $injector.instantiate;\n\t    try {\n\t        var deps_1;\n\t        $injector.instantiate = function fakeInstantiate(constructorFunction) {\n\t            $injector.instantiate = oldInstantiate; // Un-decorate ASAP\n\t            deps_1 = $injector.annotate(constructorFunction);\n\t        };\n\t        $controller(controllerExpression, { $scope: {} });\n\t        return deps_1;\n\t    }\n\t    finally {\n\t        $injector.instantiate = oldInstantiate;\n\t    }\n\t}\n\texports.annotateController = annotateController;\n\trunBlock.$inject = ['$injector', '$q'];\n\tfunction runBlock($injector, $q) {\n\t    coreservices_1.services.$injector = $injector;\n\t    coreservices_1.services.$q = $q;\n\t}\n\tapp.run(runBlock);\n\tvar router = null;\n\tng1UIRouter.$inject = ['$locationProvider'];\n\t/** This angular 1 provider instantiates a Router and exposes its services via the angular injector */\n\tfunction ng1UIRouter($locationProvider) {\n\t    // Create a new instance of the Router when the ng1UIRouterProvider is initialized\n\t    router = new router_1.UIRouter();\n\t    // Apply ng1 specific StateBuilder code for `views`, `resolve`, and `onExit/Retain/Enter` properties\n\t    router.stateRegistry.decorator(\"views\", views_1.ng1ViewsBuilder);\n\t    router.stateRegistry.decorator(\"onExit\", onEnterExitRetain_1.getStateHookBuilder(\"onExit\"));\n\t    router.stateRegistry.decorator(\"onRetain\", onEnterExitRetain_1.getStateHookBuilder(\"onRetain\"));\n\t    router.stateRegistry.decorator(\"onEnter\", onEnterExitRetain_1.getStateHookBuilder(\"onEnter\"));\n\t    router.viewService.viewConfigFactory('ng1', views_1.ng1ViewConfigFactory);\n\t    // Bind LocationConfig.hashPrefix to $locationProvider.hashPrefix\n\t    common_1.bindFunctions($locationProvider, coreservices_1.services.locationConfig, $locationProvider, ['hashPrefix']);\n\t    // Create a LocationService.onChange registry\n\t    var urlListeners = [];\n\t    coreservices_1.services.location.onChange = function (callback) {\n\t        urlListeners.push(callback);\n\t        return function () { return common_1.removeFrom(urlListeners)(callback); };\n\t    };\n\t    this.$get = $get;\n\t    $get.$inject = ['$location', '$browser', '$sniffer', '$rootScope', '$http', '$templateCache'];\n\t    function $get($location, $browser, $sniffer, $rootScope, $http, $templateCache) {\n\t        // Bind $locationChangeSuccess to the listeners registered in LocationService.onChange\n\t        $rootScope.$on(\"$locationChangeSuccess\", function (evt) { return urlListeners.forEach(function (fn) { return fn(evt); }); });\n\t        // Bind LocationConfig.html5Mode to $locationProvider.html5Mode and $sniffer.history\n\t        coreservices_1.services.locationConfig.html5Mode = function () {\n\t            var html5Mode = $locationProvider.html5Mode();\n\t            html5Mode = predicates_1.isObject(html5Mode) ? html5Mode.enabled : html5Mode;\n\t            return html5Mode && $sniffer.history;\n\t        };\n\t        coreservices_1.services.template.get = function (url) {\n\t            return $http.get(url, { cache: $templateCache, headers: { Accept: 'text/html' } }).then(hof_1.prop(\"data\"));\n\t        };\n\t        // Bind these LocationService functions to $location\n\t        common_1.bindFunctions($location, coreservices_1.services.location, $location, [\"replace\", \"url\", \"path\", \"search\", \"hash\"]);\n\t        // Bind these LocationConfig functions to $location\n\t        common_1.bindFunctions($location, coreservices_1.services.locationConfig, $location, ['port', 'protocol', 'host']);\n\t        // Bind these LocationConfig functions to $browser\n\t        common_1.bindFunctions($browser, coreservices_1.services.locationConfig, $browser, ['baseHref']);\n\t        return router;\n\t    }\n\t}\n\tfunction $stateParamsFactory(ng1UIRouter) {\n\t    return ng1UIRouter.globals.params;\n\t}\n\t// The 'ui.router' ng1 module depends on 'ui.router.init' module.\n\tangular.module('ui.router.init', []).provider(\"ng1UIRouter\", ng1UIRouter);\n\t// This effectively calls $get() to init when we enter runtime\n\tangular.module('ui.router.init').run(['ng1UIRouter', function (ng1UIRouter) { }]);\n\t// $urlMatcherFactory service and $urlMatcherFactoryProvider\n\tangular.module('ui.router.util').provider('$urlMatcherFactory', ['ng1UIRouterProvider', function () { return router.urlMatcherFactory; }]);\n\tangular.module('ui.router.util').run(['$urlMatcherFactory', function ($urlMatcherFactory) { }]);\n\t// $urlRouter service and $urlRouterProvider\n\tfunction getUrlRouterProvider() {\n\t    router.urlRouterProvider[\"$get\"] = function () {\n\t        router.urlRouter.update(true);\n\t        if (!this.interceptDeferred)\n\t            router.urlRouter.listen();\n\t        return router.urlRouter;\n\t    };\n\t    return router.urlRouterProvider;\n\t}\n\tangular.module('ui.router.router').provider('$urlRouter', ['ng1UIRouterProvider', getUrlRouterProvider]);\n\tangular.module('ui.router.router').run(['$urlRouter', function ($urlRouter) { }]);\n\t// $state service and $stateProvider\n\t// $urlRouter service and $urlRouterProvider\n\tfunction getStateProvider() {\n\t    router.stateProvider[\"$get\"] = function () {\n\t        // Autoflush once we are in runtime\n\t        router.stateRegistry.stateQueue.autoFlush(router.stateService);\n\t        return router.stateService;\n\t    };\n\t    return router.stateProvider;\n\t}\n\tangular.module('ui.router.state').provider('$state', ['ng1UIRouterProvider', getStateProvider]);\n\tangular.module('ui.router.state').run(['$state', function ($state) { }]);\n\t// $stateParams service\n\tangular.module('ui.router.state').factory('$stateParams', ['ng1UIRouter', function (ng1UIRouter) {\n\t        return ng1UIRouter.globals.params;\n\t    }]);\n\t// $transitions service and $transitionsProvider\n\tfunction getTransitionsProvider() {\n\t    router.transitionService[\"$get\"] = function () { return router.transitionService; };\n\t    return router.transitionService;\n\t}\n\tangular.module('ui.router.state').provider('$transitions', ['ng1UIRouterProvider', getTransitionsProvider]);\n\t// $templateFactory service\n\tangular.module('ui.router.util').factory('$templateFactory', ['ng1UIRouter', function () { return new templateFactory_1.TemplateFactory(); }]);\n\t// The $view service\n\tangular.module('ui.router').factory('$view', function () { return router.viewService; });\n\t// The old $resolve service\n\tangular.module('ui.router').factory('$resolve', resolveService_1.resolveFactory);\n\t// $trace service\n\tangular.module(\"ui.router\").service(\"$trace\", function () { return trace_1.trace; });\n\twatchDigests.$inject = ['$rootScope'];\n\tfunction watchDigests($rootScope) {\n\t    $rootScope.$watch(function () { trace_1.trace.approximateDigests++; });\n\t}\n\texports.watchDigests = watchDigests;\n\tangular.module(\"ui.router\").run(watchDigests);\n\texports.getLocals = function (ctx) {\n\t    var tokens = ctx.getTokens().filter(predicates_1.isString);\n\t    var tuples = tokens.map(function (key) { return [key, ctx.getResolvable(key).data]; });\n\t    return tuples.reduce(common_1.applyPairs, {});\n\t};\n\t/** Injectable services */\n\t/**\n\t * An injectable service object which has the current state parameters\n\t *\n\t * This angular service (singleton object) holds the current state parameters.\n\t * The values in `$stateParams` are not updated until *after* a [[Transition]] successfully completes.\n\t *\n\t * This object can be injected into other services.\n\t *\n\t * @example\n\t * ```js\n\t *\n\t * SomeService.$inject = ['$http', '$stateParams'];\n\t * function SomeService($http, $stateParams) {\n\t *   return {\n\t *     getUser: function() {\n\t *       return $http.get('/api/users/' + $stateParams.username);\n\t *     }\n\t *   }\n\t * };\n\t * angular.service('SomeService', SomeService);\n\t * ```\n\t *\n\t * ### Deprecation warning:\n\t *\n\t * When `$stateParams` is injected into transition hooks, resolves and view controllers, they receive a different\n\t * object than this global service object.  In those cases, the injected object has the parameter values for the\n\t * *pending* Transition.\n\t *\n\t * Because of these confusing details, this service is deprecated.\n\t *\n\t * @deprecated Instead of using `$stateParams, inject the current [[Transition]] as `$transition$` and use [[Transition.params]]\n\t * ```js\n\t * MyController.$inject = ['$transition$'];\n\t * function MyController($transition$) {\n\t *   var username = $transition$.params().username;\n\t *   // .. do something with username\n\t * }\n\t * ```\n\t */\n\tvar $stateParams;\n\t/**\n\t * An injectable service primarily used to register transition hooks\n\t *\n\t * This angular service exposes the [[TransitionService]] singleton, which is primarily used to add transition hooks.\n\t *\n\t * The same object is also exposed as [[$transitionsProvider]] for injection during angular config time.\n\t */\n\tvar $transitions;\n\t/**\n\t * A config-time injectable provider primarily used to register transition hooks\n\t *\n\t * This angular provider exposes the [[TransitionService]] singleton, which is primarily used to add transition hooks.\n\t *\n\t * The same object is also exposed as [[$transitions]] for injection at runtime.\n\t */\n\tvar $transitionsProvider;\n\t/**\n\t * An injectable service used to query for current state information.\n\t *\n\t * This angular service exposes the [[StateService]] singleton.\n\t */\n\tvar $state;\n\t/**\n\t * A config-time injectable provider used to register states.\n\t *\n\t * This angular service exposes the [[StateProvider]] singleton.\n\t */\n\tvar $stateProvider;\n\t/**\n\t * A config-time injectable provider used to manage the URL.\n\t *\n\t * This angular service exposes the [[UrlRouterProvider]] singleton.\n\t */\n\tvar $urlRouterProvider;\n\t/**\n\t * An injectable service used to configure URL redirects.\n\t *\n\t * This angular service exposes the [[UrlRouter]] singleton.\n\t */\n\tvar $urlRouter;\n\t/**\n\t * An injectable service used to configure the URL.\n\t *\n\t * This service is used to set url mapping options, and create [[UrlMatcher]] objects.\n\t *\n\t * This angular service exposes the [[UrlMatcherFactory]] singleton.\n\t * The singleton is also exposed at config-time as the [[$urlMatcherFactoryProvider]].\n\t */\n\tvar $urlMatcherFactory;\n\t/**\n\t * An injectable service used to configure the URL.\n\t *\n\t * This service is used to set url mapping options, and create [[UrlMatcher]] objects.\n\t *\n\t * This angular service exposes the [[UrlMatcherFactory]] singleton at config-time.\n\t * The singleton is also exposed at runtime as the [[$urlMatcherFactory]].\n\t */\n\tvar $urlMatcherFactoryProvider;\n\n\n/***/ },\n/* 54 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module ng1 */ /** */\n\tvar stateObject_1 = __webpack_require__(42);\n\tvar node_1 = __webpack_require__(21);\n\tvar resolveContext_1 = __webpack_require__(17);\n\tvar common_1 = __webpack_require__(3);\n\tvar stateBuilder_1 = __webpack_require__(40);\n\t/**\n\t * Implementation of the legacy `$resolve` service for angular 1.\n\t */\n\tvar $resolve = {\n\t    /**\n\t     * Asynchronously injects a resolve block.\n\t     *\n\t     * This emulates most of the behavior of the ui-router 0.2.x $resolve.resolve() service API.\n\t     *\n\t     * Given an object `invocables`, where keys are strings and values are injectable functions,\n\t     * injects each function, and waits for the resulting promise to resolve.\n\t     * When all resulting promises are resolved, returns the results as an object.\n\t     *\n\t     * @example\n\t     * ```js\n\t     *\n\t     * let invocables = {\n\t     *   foo: [ '$http', ($http) =>\n\t     *            $http.get('/api/foo').then(resp => resp.data) ],\n\t     *   bar: [ 'foo', '$http', (foo, $http) =>\n\t     *            $http.get('/api/bar/' + foo.barId).then(resp => resp.data) ]\n\t     * }\n\t     * $resolve.resolve(invocables)\n\t     *     .then(results => console.log(results.foo, results.bar))\n\t     * // Logs foo and bar:\n\t     * // { id: 123, barId: 456, fooData: 'foo data' }\n\t     * // { id: 456, barData: 'bar data' }\n\t     * ```\n\t     *\n\t     * @param invocables an object which looks like an [[StateDefinition.resolve]] object; keys are resolve names and values are injectable functions\n\t     * @param locals key/value pre-resolved data (locals)\n\t     * @param parent a promise for a \"parent resolve\"\n\t     */\n\t    resolve: function (invocables, locals, parent) {\n\t        if (locals === void 0) { locals = {}; }\n\t        var parentNode = new node_1.PathNode(new stateObject_1.State({ params: {}, resolvables: [] }));\n\t        var node = new node_1.PathNode(new stateObject_1.State({ params: {}, resolvables: [] }));\n\t        var context = new resolveContext_1.ResolveContext([parentNode, node]);\n\t        context.addResolvables(stateBuilder_1.resolvablesBuilder({ resolve: invocables }), node.state);\n\t        var resolveData = function (parentLocals) {\n\t            var rewrap = function (_locals) { return stateBuilder_1.resolvablesBuilder({ resolve: common_1.map(_locals, function (local) { return function () { return local; }; }) }); };\n\t            context.addResolvables(rewrap(parentLocals), parentNode.state);\n\t            context.addResolvables(rewrap(locals), node.state);\n\t            var tuples2ObjR = function (acc, tuple) {\n\t                acc[tuple.token] = tuple.value;\n\t                return acc;\n\t            };\n\t            return context.resolvePath().then(function (results) { return results.reduce(tuples2ObjR, {}); });\n\t        };\n\t        return parent ? parent.then(resolveData) : resolveData({});\n\t    }\n\t};\n\t/** @hidden */\n\texports.resolveFactory = function () { return $resolve; };\n\n\n/***/ },\n/* 55 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar common_1 = __webpack_require__(3);\n\tvar strings_1 = __webpack_require__(9);\n\tvar view_1 = __webpack_require__(37);\n\tvar predicates_1 = __webpack_require__(4);\n\tvar coreservices_1 = __webpack_require__(6);\n\tvar trace_1 = __webpack_require__(12);\n\tvar templateFactory_1 = __webpack_require__(56);\n\tvar resolveContext_1 = __webpack_require__(17);\n\tvar resolvable_1 = __webpack_require__(19);\n\texports.ng1ViewConfigFactory = function (path, view) { return new Ng1ViewConfig(path, view); };\n\t/**\n\t * This is a [[StateBuilder.builder]] function for angular1 `views`.\n\t *\n\t * When the [[StateBuilder]] builds a [[State]] object from a raw [[StateDeclaration]], this builder\n\t * handles the `views` property with logic specific to angular-ui-router (ng1).\n\t *\n\t * If no `views: {}` property exists on the [[StateDeclaration]], then it creates the `views` object\n\t * and applies the state-level configuration to a view named `$default`.\n\t */\n\tfunction ng1ViewsBuilder(state) {\n\t    var tplKeys = ['templateProvider', 'templateUrl', 'template', 'notify', 'async'], ctrlKeys = ['controller', 'controllerProvider', 'controllerAs', 'resolveAs'], compKeys = ['component', 'bindings'], nonCompKeys = tplKeys.concat(ctrlKeys), allKeys = compKeys.concat(nonCompKeys);\n\t    var views = {}, viewsObject = state.views || { \"$default\": common_1.pick(state, allKeys) };\n\t    common_1.forEach(viewsObject, function (config, name) {\n\t        // Account for views: { \"\": { template... } }\n\t        name = name || \"$default\";\n\t        // Account for views: { header: \"headerComponent\" }\n\t        if (predicates_1.isString(config))\n\t            config = { component: config };\n\t        if (!Object.keys(config).length)\n\t            return;\n\t        // Configure this view for routing to an angular 1.5+ style .component (or any directive, really)\n\t        if (config.component) {\n\t            if (nonCompKeys.map(function (key) { return predicates_1.isDefined(config[key]); }).reduce(common_1.anyTrueR, false)) {\n\t                throw new Error(\"Cannot combine: \" + compKeys.join(\"|\") + \" with: \" + nonCompKeys.join(\"|\") + \" in stateview: 'name@\" + state.name + \"'\");\n\t            }\n\t            // Dynamically build a template like \"<component-name input1='::$resolve.foo'></component-name>\"\n\t            config.templateProvider = ['$injector', function ($injector) {\n\t                    var resolveFor = function (key) { return config.bindings && config.bindings[key] || key; };\n\t                    var prefix = angular.version.minor >= 3 ? \"::\" : \"\";\n\t                    var attributeTpl = function (input) {\n\t                        var attrName = strings_1.kebobString(input.name);\n\t                        var resolveName = resolveFor(input.name);\n\t                        if (input.type === '@')\n\t                            return attrName + \"='{{\" + prefix + \"$resolve.\" + resolveName + \"}}'\";\n\t                        return attrName + \"='\" + prefix + \"$resolve.\" + resolveName + \"'\";\n\t                    };\n\t                    var attrs = getComponentInputs($injector, config.component).map(attributeTpl).join(\" \");\n\t                    var kebobName = strings_1.kebobString(config.component);\n\t                    return \"<\" + kebobName + \" \" + attrs + \"></\" + kebobName + \">\";\n\t                }];\n\t        }\n\t        config.resolveAs = config.resolveAs || '$resolve';\n\t        config.$type = \"ng1\";\n\t        config.$context = state;\n\t        config.$name = name;\n\t        var normalized = view_1.ViewService.normalizeUIViewTarget(config.$context, config.$name);\n\t        config.$uiViewName = normalized.uiViewName;\n\t        config.$uiViewContextAnchor = normalized.uiViewContextAnchor;\n\t        views[name] = config;\n\t    });\n\t    return views;\n\t}\n\texports.ng1ViewsBuilder = ng1ViewsBuilder;\n\t// for ng 1.2 style, process the scope: { input: \"=foo\" }\n\t// for ng 1.3 through ng 1.5, process the component's bindToController: { input: \"=foo\" } object\n\tvar scopeBindings = function (bindingsObj) { return Object.keys(bindingsObj || {})\n\t    .map(function (key) { return [key, /^([=<@])[?]?(.*)/.exec(bindingsObj[key])]; }) // [ 'input', [ '=foo', '=', 'foo' ] ]\n\t    .filter(function (tuple) { return predicates_1.isDefined(tuple) && predicates_1.isDefined(tuple[1]); }) // skip malformed values\n\t    .map(function (tuple) { return ({ name: tuple[1][2] || tuple[0], type: tuple[1][1] }); }); }; // { name: ('foo' || 'input'), type: '=' }\n\t// Given a directive definition, find its object input attributes\n\t// Use different properties, depending on the type of directive (component, bindToController, normal)\n\tvar getBindings = function (def) {\n\t    if (predicates_1.isObject(def.bindToController))\n\t        return scopeBindings(def.bindToController);\n\t    return scopeBindings(def.scope);\n\t};\n\t// Gets all the directive(s)' inputs ('@', '=', and '<')\n\tfunction getComponentInputs($injector, name) {\n\t    var cmpDefs = $injector.get(name + \"Directive\"); // could be multiple\n\t    if (!cmpDefs || !cmpDefs.length)\n\t        throw new Error(\"Unable to find component named '\" + name + \"'\");\n\t    return cmpDefs.map(getBindings).reduce(common_1.unnestR, []);\n\t}\n\tvar id = 0;\n\tvar Ng1ViewConfig = (function () {\n\t    function Ng1ViewConfig(path, viewDecl) {\n\t        this.path = path;\n\t        this.viewDecl = viewDecl;\n\t        this.$id = id++;\n\t        this.loaded = false;\n\t    }\n\t    Ng1ViewConfig.prototype.load = function () {\n\t        var _this = this;\n\t        var $q = coreservices_1.services.$q;\n\t        if (!this.hasTemplate())\n\t            throw new Error(\"No template configuration specified for '\" + this.viewDecl.$uiViewName + \"@\" + this.viewDecl.$uiViewContextAnchor + \"'\");\n\t        var context = new resolveContext_1.ResolveContext(this.path);\n\t        var params = this.path.reduce(function (acc, node) { return common_1.extend(acc, node.paramValues); }, {});\n\t        var promises = {\n\t            template: $q.when(this.getTemplate(params, new templateFactory_1.TemplateFactory(), context)),\n\t            controller: $q.when(this.getController(context))\n\t        };\n\t        return $q.all(promises).then(function (results) {\n\t            trace_1.trace.traceViewServiceEvent(\"Loaded\", _this);\n\t            _this.controller = results.controller;\n\t            _this.template = results.template;\n\t        });\n\t    };\n\t    /**\n\t     * Checks a view configuration to ensure that it specifies a template.\n\t     *\n\t     * @return {boolean} Returns `true` if the configuration contains a valid template, otherwise `false`.\n\t     */\n\t    Ng1ViewConfig.prototype.hasTemplate = function () {\n\t        return !!(this.viewDecl.template || this.viewDecl.templateUrl || this.viewDecl.templateProvider);\n\t    };\n\t    Ng1ViewConfig.prototype.getTemplate = function (params, $factory, context) {\n\t        return $factory.fromConfig(this.viewDecl, params, context);\n\t    };\n\t    /**\n\t     * Gets the controller for a view configuration.\n\t     *\n\t     * @returns {Function|Promise.<Function>} Returns a controller, or a promise that resolves to a controller.\n\t     */\n\t    Ng1ViewConfig.prototype.getController = function (context) {\n\t        var provider = this.viewDecl.controllerProvider;\n\t        if (!predicates_1.isInjectable(provider))\n\t            return this.viewDecl.controller;\n\t        var deps = coreservices_1.services.$injector.annotate(provider);\n\t        var providerFn = predicates_1.isArray(provider) ? common_1.tail(provider) : provider;\n\t        var resolvable = new resolvable_1.Resolvable(\"\", providerFn, deps);\n\t        return resolvable.get(context);\n\t    };\n\t    return Ng1ViewConfig;\n\t}());\n\texports.Ng1ViewConfig = Ng1ViewConfig;\n\n\n/***/ },\n/* 56 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module view */ /** for typedoc */\n\tvar predicates_1 = __webpack_require__(4);\n\tvar coreservices_1 = __webpack_require__(6);\n\tvar common_1 = __webpack_require__(3);\n\tvar resolvable_1 = __webpack_require__(19);\n\t/**\n\t * Service which manages loading of templates from a ViewConfig.\n\t */\n\tvar TemplateFactory = (function () {\n\t    function TemplateFactory() {\n\t    }\n\t    /**\n\t     * Creates a template from a configuration object.\n\t     *\n\t     * @param config Configuration object for which to load a template.\n\t     * The following properties are search in the specified order, and the first one\n\t     * that is defined is used to create the template:\n\t     *\n\t     * @param params  Parameters to pass to the template function.\n\t     * @param context The resolve context associated with the template's view\n\t     *\n\t     * @return {string|object}  The template html as a string, or a promise for\n\t     * that string,or `null` if no template is configured.\n\t     */\n\t    TemplateFactory.prototype.fromConfig = function (config, params, context) {\n\t        return (predicates_1.isDefined(config.template) ? this.fromString(config.template, params) :\n\t            predicates_1.isDefined(config.templateUrl) ? this.fromUrl(config.templateUrl, params) :\n\t                predicates_1.isDefined(config.templateProvider) ? this.fromProvider(config.templateProvider, params, context) :\n\t                    null);\n\t    };\n\t    ;\n\t    /**\n\t     * Creates a template from a string or a function returning a string.\n\t     *\n\t     * @param template html template as a string or function that returns an html template as a string.\n\t     * @param params Parameters to pass to the template function.\n\t     *\n\t     * @return {string|object} The template html as a string, or a promise for that\n\t     * string.\n\t     */\n\t    TemplateFactory.prototype.fromString = function (template, params) {\n\t        return predicates_1.isFunction(template) ? template(params) : template;\n\t    };\n\t    ;\n\t    /**\n\t     * Loads a template from the a URL via `$http` and `$templateCache`.\n\t     *\n\t     * @param {string|Function} url url of the template to load, or a function\n\t     * that returns a url.\n\t     * @param {Object} params Parameters to pass to the url function.\n\t     * @return {string|Promise.<string>} The template html as a string, or a promise\n\t     * for that string.\n\t     */\n\t    TemplateFactory.prototype.fromUrl = function (url, params) {\n\t        if (predicates_1.isFunction(url))\n\t            url = url(params);\n\t        if (url == null)\n\t            return null;\n\t        return coreservices_1.services.template.get(url);\n\t    };\n\t    ;\n\t    /**\n\t     * Creates a template by invoking an injectable provider function.\n\t     *\n\t     * @param provider Function to invoke via `locals`\n\t     * @param {Function} injectFn a function used to invoke the template provider\n\t     * @return {string|Promise.<string>} The template html as a string, or a promise\n\t     * for that string.\n\t     */\n\t    TemplateFactory.prototype.fromProvider = function (provider, params, context) {\n\t        var deps = coreservices_1.services.$injector.annotate(provider);\n\t        var providerFn = predicates_1.isArray(provider) ? common_1.tail(provider) : provider;\n\t        var resolvable = new resolvable_1.Resolvable(\"\", providerFn, deps);\n\t        return resolvable.get(context);\n\t    };\n\t    ;\n\t    return TemplateFactory;\n\t}());\n\texports.TemplateFactory = TemplateFactory;\n\n\n/***/ },\n/* 57 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar coreservices_1 = __webpack_require__(6);\n\tvar services_1 = __webpack_require__(53);\n\tvar resolveContext_1 = __webpack_require__(17);\n\tvar common_1 = __webpack_require__(3);\n\t/**\n\t * This is a [[StateBuilder.builder]] function for angular1 `onEnter`, `onExit`,\n\t * `onRetain` callback hooks on a [[Ng1StateDeclaration]].\n\t *\n\t * When the [[StateBuilder]] builds a [[State]] object from a raw [[StateDeclaration]], this builder\n\t * ensures that those hooks are injectable for angular-ui-router (ng1).\n\t */\n\texports.getStateHookBuilder = function (hookName) {\n\t    return function stateHookBuilder(state, parentFn) {\n\t        var hook = state[hookName];\n\t        function decoratedNg1Hook(trans, state) {\n\t            var resolveContext = new resolveContext_1.ResolveContext(trans.treeChanges().to);\n\t            return coreservices_1.services.$injector.invoke(hook, this, common_1.extend({ $state$: state }, services_1.getLocals(resolveContext)));\n\t        }\n\t        return hook ? decoratedNg1Hook : undefined;\n\t    };\n\t};\n\n\n/***/ },\n/* 58 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/**\n\t * These are the UI-Router angular 1 directives.\n\t *\n\t * These directives are used in templates to create viewports and navigate to states\n\t *\n\t * @preferred @module ng1_directives\n\t */ /** for typedoc */\n\tvar common_1 = __webpack_require__(3);\n\tvar predicates_1 = __webpack_require__(4);\n\tvar hof_1 = __webpack_require__(5);\n\t/** @hidden */\n\tfunction parseStateRef(ref, current) {\n\t    var preparsed = ref.match(/^\\s*({[^}]*})\\s*$/), parsed;\n\t    if (preparsed)\n\t        ref = current + '(' + preparsed[1] + ')';\n\t    parsed = ref.replace(/\\n/g, \" \").match(/^([^(]+?)\\s*(\\((.*)\\))?$/);\n\t    if (!parsed || parsed.length !== 4)\n\t        throw new Error(\"Invalid state ref '\" + ref + \"'\");\n\t    return { state: parsed[1], paramExpr: parsed[3] || null };\n\t}\n\t/** @hidden */\n\tfunction stateContext(el) {\n\t    var $uiView = el.parent().inheritedData('$uiView');\n\t    var path = hof_1.parse('$cfg.path')($uiView);\n\t    return path ? common_1.tail(path).state.name : undefined;\n\t}\n\t/** @hidden */\n\tfunction getTypeInfo(el) {\n\t    // SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.\n\t    var isSvg = Object.prototype.toString.call(el.prop('href')) === '[object SVGAnimatedString]';\n\t    var isForm = el[0].nodeName === \"FORM\";\n\t    return {\n\t        attr: isForm ? \"action\" : (isSvg ? 'xlink:href' : 'href'),\n\t        isAnchor: el.prop(\"tagName\").toUpperCase() === \"A\",\n\t        clickable: !isForm\n\t    };\n\t}\n\t/** @hidden */\n\tfunction clickHook(el, $state, $timeout, type, current) {\n\t    return function (e) {\n\t        var button = e.which || e.button, target = current();\n\t        if (!(button > 1 || e.ctrlKey || e.metaKey || e.shiftKey || el.attr('target'))) {\n\t            // HACK: This is to allow ng-clicks to be processed before the transition is initiated:\n\t            var transition = $timeout(function () {\n\t                $state.go(target.state, target.params, target.options);\n\t            });\n\t            e.preventDefault();\n\t            // if the state has no URL, ignore one preventDefault from the <a> directive.\n\t            var ignorePreventDefaultCount = type.isAnchor && !target.href ? 1 : 0;\n\t            e.preventDefault = function () {\n\t                if (ignorePreventDefaultCount-- <= 0)\n\t                    $timeout.cancel(transition);\n\t            };\n\t        }\n\t    };\n\t}\n\t/** @hidden */\n\tfunction defaultOpts(el, $state) {\n\t    return { relative: stateContext(el) || $state.$current, inherit: true };\n\t}\n\t/**\n\t * `ui-sref`: A directive for linking to a state\n\t *\n\t * A directive that binds a link (`<a>` tag) to a state.\n\t * If the state has an associated URL, the directive will automatically generate and\n\t * update the `href` attribute via the [[StateService.href]]  method.\n\t * Clicking the link will trigger a state transition with optional parameters.\n\t *\n\t * Also middle-clicking, right-clicking, and ctrl-clicking on the link will be\n\t * handled natively by the browser.\n\t *\n\t * You can also use relative state paths within ui-sref, just like the relative\n\t * paths passed to `$state.go()`.\n\t * You just need to be aware that the path is relative to the state that the link lives in.\n\t * In other words, the state that created the view containing the link.\n\t *\n\t * You can specify options to pass to [[StateService.go]] using the `ui-sref-opts` attribute.\n\t * Options are restricted to `location`, `inherit`, and `reload`.\n\t *\n\t * Here's an example of how you'd use ui-sref and how it would compile.\n\t * If you have the following template:\n\t *\n\t * @example\n\t * ```html\n\t *\n\t * <pre>\n\t * <a ui-sref=\"home\">Home</a> | <a ui-sref=\"about\">About</a> | <a ui-sref=\"{page: 2}\">Next page</a>\n\t *\n\t * <ul>\n\t *     <li ng-repeat=\"contact in contacts\">\n\t *         <a ui-sref=\"contacts.detail({ id: contact.id })\">{{ contact.name }}</a>\n\t *     </li>\n\t * </ul>\n\t * </pre>\n\t * ```\n\t *\n\t * Then the compiled html would be (assuming Html5Mode is off and current state is contacts):\n\t *\n\t * ```html\n\t *\n\t * <pre>\n\t * <a href=\"#/home\" ui-sref=\"home\">Home</a> | <a href=\"#/about\" ui-sref=\"about\">About</a> | <a href=\"#/contacts?page=2\" ui-sref=\"{page: 2}\">Next page</a>\n\t *\n\t * <ul>\n\t *     <li ng-repeat=\"contact in contacts\">\n\t *         <a href=\"#/contacts/1\" ui-sref=\"contacts.detail({ id: contact.id })\">Joe</a>\n\t *     </li>\n\t *     <li ng-repeat=\"contact in contacts\">\n\t *         <a href=\"#/contacts/2\" ui-sref=\"contacts.detail({ id: contact.id })\">Alice</a>\n\t *     </li>\n\t *     <li ng-repeat=\"contact in contacts\">\n\t *         <a href=\"#/contacts/3\" ui-sref=\"contacts.detail({ id: contact.id })\">Bob</a>\n\t *     </li>\n\t * </ul>\n\t *\n\t * <a ui-sref=\"home\" ui-sref-opts=\"{reload: true}\">Home</a>\n\t * </pre>\n\t * ```\n\t *\n\t * @param {string} ui-sref 'stateName' can be any valid absolute or relative state\n\t * @param {Object} ui-sref-opts options to pass to [[StateService.go]]\n\t */\n\tvar uiSref = ['$state', '$timeout',\n\t    function $StateRefDirective($state, $timeout) {\n\t        return {\n\t            restrict: 'A',\n\t            require: ['?^uiSrefActive', '?^uiSrefActiveEq'],\n\t            link: function (scope, element, attrs, uiSrefActive) {\n\t                var ref = parseStateRef(attrs.uiSref, $state.current.name);\n\t                var def = { state: ref.state, href: null, params: null, options: null };\n\t                var type = getTypeInfo(element);\n\t                var active = uiSrefActive[1] || uiSrefActive[0];\n\t                var unlinkInfoFn = null;\n\t                def.options = common_1.extend(defaultOpts(element, $state), attrs.uiSrefOpts ? scope.$eval(attrs.uiSrefOpts) : {});\n\t                var update = function (val) {\n\t                    if (val)\n\t                        def.params = angular.copy(val);\n\t                    def.href = $state.href(ref.state, def.params, def.options);\n\t                    if (unlinkInfoFn)\n\t                        unlinkInfoFn();\n\t                    if (active)\n\t                        unlinkInfoFn = active.$$addStateInfo(ref.state, def.params);\n\t                    if (def.href !== null)\n\t                        attrs.$set(type.attr, def.href);\n\t                };\n\t                if (ref.paramExpr) {\n\t                    scope.$watch(ref.paramExpr, function (val) { if (val !== def.params)\n\t                        update(val); }, true);\n\t                    def.params = angular.copy(scope.$eval(ref.paramExpr));\n\t                }\n\t                update();\n\t                if (!type.clickable)\n\t                    return;\n\t                element.bind(\"click\", clickHook(element, $state, $timeout, type, function () { return def; }));\n\t            }\n\t        };\n\t    }];\n\t/**\n\t * `ui-state`: A dynamic version of `ui-sref`\n\t *\n\t * Much like ui-sref, but will accept named $scope properties to evaluate for a state definition,\n\t * params and override options.\n\t *\n\t * @example\n\t * ```html\n\t *\n\t * <li ng-repeat=\"nav in navlinks\">\n\t *   <a ui-state=\"nav.statename\">{{nav.description}}</a>\n\t * </li>\n\t *\n\t * @param {string} ui-state 'stateName' can be any valid absolute or relative state\n\t * @param {Object} ui-state-params params to pass to [[StateService.href]]\n\t * @param {Object} ui-state-opts options to pass to [[StateService.go]]\n\t */\n\tvar uiState = ['$state', '$timeout',\n\t    function $StateRefDynamicDirective($state, $timeout) {\n\t        return {\n\t            restrict: 'A',\n\t            require: ['?^uiSrefActive', '?^uiSrefActiveEq'],\n\t            link: function (scope, element, attrs, uiSrefActive) {\n\t                var type = getTypeInfo(element);\n\t                var active = uiSrefActive[1] || uiSrefActive[0];\n\t                var group = [attrs.uiState, attrs.uiStateParams || null, attrs.uiStateOpts || null];\n\t                var watch = '[' + group.map(function (val) { return val || 'null'; }).join(', ') + ']';\n\t                var def = { state: null, params: null, options: null, href: null };\n\t                var unlinkInfoFn = null;\n\t                function runStateRefLink(group) {\n\t                    def.state = group[0];\n\t                    def.params = group[1];\n\t                    def.options = group[2];\n\t                    def.href = $state.href(def.state, def.params, def.options);\n\t                    if (unlinkInfoFn)\n\t                        unlinkInfoFn();\n\t                    if (active)\n\t                        unlinkInfoFn = active.$$addStateInfo(def.state, def.params);\n\t                    if (def.href)\n\t                        attrs.$set(type.attr, def.href);\n\t                }\n\t                scope.$watch(watch, runStateRefLink, true);\n\t                runStateRefLink(scope.$eval(watch));\n\t                if (!type.clickable)\n\t                    return;\n\t                element.bind(\"click\", clickHook(element, $state, $timeout, type, function () { return def; }));\n\t            }\n\t        };\n\t    }];\n\t/**\n\t * `ui-sref-active` and `ui-sref-active-eq`: A directive that adds a CSS class when a `ui-sref` is active\n\t *\n\t * A directive working alongside ui-sref to add classes to an element when the\n\t * related ui-sref directive's state is active, and removing them when it is inactive.\n\t * The primary use-case is to simplify the special appearance of navigation menus\n\t * relying on `ui-sref`, by having the \"active\" state's menu button appear different,\n\t * distinguishing it from the inactive menu items.\n\t *\n\t * ui-sref-active can live on the same element as ui-sref or on a parent element. The first\n\t * ui-sref-active found at the same level or above the ui-sref will be used.\n\t *\n\t * Will activate when the ui-sref's target state or any child state is active. If you\n\t * need to activate only when the ui-sref target state is active and *not* any of\n\t * it's children, then you will use ui-sref-active-eq\n\t *\n\t * Given the following template:\n\t * @example\n\t * ```html\n\t *\n\t * <pre>\n\t * <ul>\n\t *   <li ui-sref-active=\"active\" class=\"item\">\n\t *     <a href ui-sref=\"app.user({user: 'bilbobaggins'})\">@bilbobaggins</a>\n\t *   </li>\n\t * </ul>\n\t * </pre>\n\t * ```\n\t *\n\t *\n\t * When the app state is \"app.user\" (or any children states), and contains the state parameter \"user\" with value \"bilbobaggins\",\n\t * the resulting HTML will appear as (note the 'active' class):\n\t *\n\t * ```html\n\t *\n\t * <pre>\n\t * <ul>\n\t *   <li ui-sref-active=\"active\" class=\"item active\">\n\t *     <a ui-sref=\"app.user({user: 'bilbobaggins'})\" href=\"/users/bilbobaggins\">@bilbobaggins</a>\n\t *   </li>\n\t * </ul>\n\t * </pre>\n\t * ```\n\t *\n\t * The class name is interpolated **once** during the directives link time (any further changes to the\n\t * interpolated value are ignored).\n\t *\n\t * Multiple classes may be specified in a space-separated format:\n\t *\n\t * ```html\n\t * <pre>\n\t * <ul>\n\t *   <li ui-sref-active='class1 class2 class3'>\n\t *     <a ui-sref=\"app.user\">link</a>\n\t *   </li>\n\t * </ul>\n\t * </pre>\n\t * ```\n\t *\n\t * It is also possible to pass ui-sref-active an expression that evaluates\n\t * to an object hash, whose keys represent active class names and whose\n\t * values represent the respective state names/globs.\n\t * ui-sref-active will match if the current active state **includes** any of\n\t * the specified state names/globs, even the abstract ones.\n\t *\n\t * Given the following template, with \"admin\" being an abstract state:\n\t * @example\n\t * ```html\n\t *\n\t * <pre>\n\t * <div ui-sref-active=\"{'active': 'admin.*'}\">\n\t *   <a ui-sref-active=\"active\" ui-sref=\"admin.roles\">Roles</a>\n\t * </div>\n\t * </pre>\n\t * ```\n\t *\n\t * When the current state is \"admin.roles\" the \"active\" class will be applied\n\t * to both the <div> and <a> elements. It is important to note that the state\n\t * names/globs passed to ui-sref-active shadow the state provided by ui-sref.\n\t */\n\tvar uiSrefActive = ['$state', '$stateParams', '$interpolate', '$transitions',\n\t    function $StateRefActiveDirective($state, $stateParams, $interpolate, $transitions) {\n\t        return {\n\t            restrict: \"A\",\n\t            controller: ['$scope', '$element', '$attrs', '$timeout', function ($scope, $element, $attrs, $timeout) {\n\t                    var states = [], activeClasses = {}, activeEqClass, uiSrefActive;\n\t                    // There probably isn't much point in $observing this\n\t                    // uiSrefActive and uiSrefActiveEq share the same directive object with some\n\t                    // slight difference in logic routing\n\t                    activeEqClass = $interpolate($attrs.uiSrefActiveEq || '', false)($scope);\n\t                    try {\n\t                        uiSrefActive = $scope.$eval($attrs.uiSrefActive);\n\t                    }\n\t                    catch (e) {\n\t                    }\n\t                    uiSrefActive = uiSrefActive || $interpolate($attrs.uiSrefActive || '', false)($scope);\n\t                    if (predicates_1.isObject(uiSrefActive)) {\n\t                        common_1.forEach(uiSrefActive, function (stateOrName, activeClass) {\n\t                            if (predicates_1.isString(stateOrName)) {\n\t                                var ref = parseStateRef(stateOrName, $state.current.name);\n\t                                addState(ref.state, $scope.$eval(ref.paramExpr), activeClass);\n\t                            }\n\t                        });\n\t                    }\n\t                    // Allow uiSref to communicate with uiSrefActive[Equals]\n\t                    this.$$addStateInfo = function (newState, newParams) {\n\t                        // we already got an explicit state provided by ui-sref-active, so we\n\t                        // shadow the one that comes from ui-sref\n\t                        if (predicates_1.isObject(uiSrefActive) && states.length > 0) {\n\t                            return;\n\t                        }\n\t                        var deregister = addState(newState, newParams, uiSrefActive);\n\t                        update();\n\t                        return deregister;\n\t                    };\n\t                    $scope.$on('$stateChangeSuccess', update);\n\t                    $scope.$on('$destroy', $transitions.onStart({}, function (trans) { return trans.promise.then(update) && null; }));\n\t                    function addState(stateName, stateParams, activeClass) {\n\t                        var state = $state.get(stateName, stateContext($element));\n\t                        var stateHash = createStateHash(stateName, stateParams);\n\t                        var stateInfo = {\n\t                            state: state || { name: stateName },\n\t                            params: stateParams,\n\t                            hash: stateHash\n\t                        };\n\t                        states.push(stateInfo);\n\t                        activeClasses[stateHash] = activeClass;\n\t                        return function removeState() {\n\t                            var idx = states.indexOf(stateInfo);\n\t                            if (idx !== -1)\n\t                                states.splice(idx, 1);\n\t                        };\n\t                    }\n\t                    /**\n\t                     * @param {string} state\n\t                     * @param {Object|string} [params]\n\t                     * @return {string}\n\t                     */\n\t                    function createStateHash(state, params) {\n\t                        if (!predicates_1.isString(state)) {\n\t                            throw new Error('state should be a string');\n\t                        }\n\t                        if (predicates_1.isObject(params)) {\n\t                            return state + common_1.toJson(params);\n\t                        }\n\t                        params = $scope.$eval(params);\n\t                        if (predicates_1.isObject(params)) {\n\t                            return state + common_1.toJson(params);\n\t                        }\n\t                        return state;\n\t                    }\n\t                    // Update route state\n\t                    function update() {\n\t                        for (var i = 0; i < states.length; i++) {\n\t                            if (anyMatch(states[i].state, states[i].params)) {\n\t                                addClass($element, activeClasses[states[i].hash]);\n\t                            }\n\t                            else {\n\t                                removeClass($element, activeClasses[states[i].hash]);\n\t                            }\n\t                            if (exactMatch(states[i].state, states[i].params)) {\n\t                                addClass($element, activeEqClass);\n\t                            }\n\t                            else {\n\t                                removeClass($element, activeEqClass);\n\t                            }\n\t                        }\n\t                    }\n\t                    function addClass(el, className) { $timeout(function () { el.addClass(className); }); }\n\t                    function removeClass(el, className) { el.removeClass(className); }\n\t                    function anyMatch(state, params) { return $state.includes(state.name, params); }\n\t                    function exactMatch(state, params) { return $state.is(state.name, params); }\n\t                    update();\n\t                }]\n\t        };\n\t    }];\n\tangular.module('ui.router.state')\n\t    .directive('uiSref', uiSref)\n\t    .directive('uiSrefActive', uiSrefActive)\n\t    .directive('uiSrefActiveEq', uiSrefActive)\n\t    .directive('uiState', uiState);\n\n\n/***/ },\n/* 59 */\n/***/ function(module, exports) {\n\n\t/** @module state */ /** for typedoc */\n\t\"use strict\";\n\t/**\n\t * @ngdoc filter\n\t * @name ui.router.state.filter:isState\n\t *\n\t * @requires ui.router.state.$state\n\t *\n\t * @description\n\t * Translates to {@link ui.router.state.$state#methods_is $state.is(\"stateName\")}.\n\t */\n\t$IsStateFilter.$inject = ['$state'];\n\tfunction $IsStateFilter($state) {\n\t    var isFilter = function (state, params, options) {\n\t        return $state.is(state, params, options);\n\t    };\n\t    isFilter.$stateful = true;\n\t    return isFilter;\n\t}\n\texports.$IsStateFilter = $IsStateFilter;\n\t/**\n\t * @ngdoc filter\n\t * @name ui.router.state.filter:includedByState\n\t *\n\t * @requires ui.router.state.$state\n\t *\n\t * @description\n\t * Translates to {@link ui.router.state.$state#methods_includes $state.includes('fullOrPartialStateName')}.\n\t */\n\t$IncludedByStateFilter.$inject = ['$state'];\n\tfunction $IncludedByStateFilter($state) {\n\t    var includesFilter = function (state, params, options) {\n\t        return $state.includes(state, params, options);\n\t    };\n\t    includesFilter.$stateful = true;\n\t    return includesFilter;\n\t}\n\texports.$IncludedByStateFilter = $IncludedByStateFilter;\n\tangular.module('ui.router.state')\n\t    .filter('isState', $IsStateFilter)\n\t    .filter('includedByState', $IncludedByStateFilter);\n\n\n/***/ },\n/* 60 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/** @module ng1_directives */ /** for typedoc */\n\t\"use strict\";\n\tvar common_1 = __webpack_require__(3);\n\tvar predicates_1 = __webpack_require__(4);\n\tvar trace_1 = __webpack_require__(12);\n\tvar views_1 = __webpack_require__(55);\n\tvar hof_1 = __webpack_require__(5);\n\tvar resolveContext_1 = __webpack_require__(17);\n\tvar strings_1 = __webpack_require__(9);\n\tvar services_1 = __webpack_require__(53);\n\t/**\n\t * `ui-view`: A viewport directive which is filled in by a view from the active state.\n\t *\n\t * @param {string=} name A view name. The name should be unique amongst the other views in the\n\t * same state. You can have views of the same name that live in different states.\n\t *\n\t * @param {string=} autoscroll It allows you to set the scroll behavior of the browser window\n\t * when a view is populated. By default, $anchorScroll is overridden by ui-router's custom scroll\n\t * service, {@link ui.router.state.$uiViewScroll}. This custom service let's you\n\t * scroll ui-view elements into view when they are populated during a state activation.\n\t *\n\t * *Note: To revert back to old [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll)\n\t * functionality, call `$uiViewScrollProvider.useAnchorScroll()`.*\n\t *\n\t * @param {string=} onload Expression to evaluate whenever the view updates.\n\t *\n\t * A view can be unnamed or named.\n\t * @example\n\t * ```html\n\t *\n\t * <!-- Unnamed -->\n\t * <div ui-view></div>\n\t *\n\t * <!-- Named -->\n\t * <div ui-view=\"viewName\"></div>\n\t * ```\n\t *\n\t * You can only have one unnamed view within any template (or root html). If you are only using a\n\t * single view and it is unnamed then you can populate it like so:\n\t * ```\n\t *\n\t * <div ui-view></div>\n\t * $stateProvider.state(\"home\", {\n\t *   template: \"<h1>HELLO!</h1>\"\n\t * })\n\t * ```\n\t *\n\t * The above is a convenient shortcut equivalent to specifying your view explicitly with the {@link ui.router.state.$stateProvider#views `views`}\n\t * config property, by name, in this case an empty name:\n\t * ```js\n\t *\n\t * $stateProvider.state(\"home\", {\n\t *   views: {\n\t *     \"\": {\n\t *       template: \"<h1>HELLO!</h1>\"\n\t *     }\n\t *   }\n\t * })\n\t * ```\n\t *\n\t * But typically you'll only use the views property if you name your view or have more than one view\n\t * in the same template. There's not really a compelling reason to name a view if its the only one,\n\t * but you could if you wanted, like so:\n\t *\n\t * ```html\n\t *\n\t * <div ui-view=\"main\"></div>\n\t * ```\n\t *\n\t * ```js\n\t *\n\t * $stateProvider.state(\"home\", {\n\t *   views: {\n\t *     \"main\": {\n\t *       template: \"<h1>HELLO!</h1>\"\n\t *     }\n\t *   }\n\t * })\n\t * ```\n\t *\n\t * Really though, you'll use views to set up multiple views:\n\t * ```html\n\t *\n\t * <div ui-view></div>\n\t * <div ui-view=\"chart\"></div>\n\t * <div ui-view=\"data\"></div>\n\t * ```\n\t *\n\t * ```js\n\t * $stateProvider.state(\"home\", {\n\t *   views: {\n\t *     \"\": {\n\t *       template: \"<h1>HELLO!</h1>\"\n\t *     },\n\t *     \"chart\": {\n\t *       template: \"<chart_thing/>\"\n\t *     },\n\t *     \"data\": {\n\t *       template: \"<data_thing/>\"\n\t *     }\n\t *   }\n\t * })\n\t * ```\n\t *\n\t * Examples for `autoscroll`:\n\t *\n\t * ```html\n\t *\n\t * <!-- If autoscroll present with no expression,\n\t *      then scroll ui-view into view -->\n\t * <ui-view autoscroll/>\n\t *\n\t * <!-- If autoscroll present with valid expression,\n\t *      then scroll ui-view into view if expression evaluates to true -->\n\t * <ui-view autoscroll='true'/>\n\t * <ui-view autoscroll='false'/>\n\t * <ui-view autoscroll='scopeVariable'/>\n\t * ```\n\t *\n\t * Resolve data:\n\t *\n\t * The resolved data from the state's `resolve` block is placed on the scope as `$resolve` (this\n\t * can be customized using [[ViewDeclaration.resolveAs]]).  This can be then accessed from the template.\n\t *\n\t * Note that when `controllerAs` is being used, `$resolve` is set on the controller instance *after* the\n\t * controller is instantiated.  The `$onInit()` hook can be used to perform initialization code which\n\t * depends on `$resolve` data.\n\t *\n\t * @example\n\t * ```js\n\t *\n\t * $stateProvider.state('home', {\n\t *   template: '<my-component user=\"$resolve.user\"></my-component>',\n\t *   resolve: {\n\t *     user: function(UserService) { return UserService.fetchUser(); }\n\t *   }\n\t * });\n\t * ```\n\t */\n\tvar uiView = ['$view', '$animate', '$uiViewScroll', '$interpolate', '$q',\n\t    function $ViewDirective($view, $animate, $uiViewScroll, $interpolate, $q) {\n\t        function getRenderer(attrs, scope) {\n\t            return {\n\t                enter: function (element, target, cb) {\n\t                    if (angular.version.minor > 2) {\n\t                        $animate.enter(element, null, target).then(cb);\n\t                    }\n\t                    else {\n\t                        $animate.enter(element, null, target, cb);\n\t                    }\n\t                },\n\t                leave: function (element, cb) {\n\t                    if (angular.version.minor > 2) {\n\t                        $animate.leave(element).then(cb);\n\t                    }\n\t                    else {\n\t                        $animate.leave(element, cb);\n\t                    }\n\t                }\n\t            };\n\t        }\n\t        function configsEqual(config1, config2) {\n\t            return config1 === config2;\n\t        }\n\t        var rootData = {\n\t            $cfg: { viewDecl: { $context: $view.rootContext() } },\n\t            $uiView: {}\n\t        };\n\t        var directive = {\n\t            count: 0,\n\t            restrict: 'ECA',\n\t            terminal: true,\n\t            priority: 400,\n\t            transclude: 'element',\n\t            compile: function (tElement, tAttrs, $transclude) {\n\t                return function (scope, $element, attrs) {\n\t                    var previousEl, currentEl, currentScope, unregister, onloadExp = attrs.onload || '', autoScrollExp = attrs.autoscroll, renderer = getRenderer(attrs, scope), viewConfig = undefined, inherited = $element.inheritedData('$uiView') || rootData, name = $interpolate(attrs.uiView || attrs.name || '')(scope) || '$default';\n\t                    var activeUIView = {\n\t                        $type: 'ng1',\n\t                        id: directive.count++,\n\t                        name: name,\n\t                        fqn: inherited.$uiView.fqn ? inherited.$uiView.fqn + \".\" + name : name,\n\t                        config: null,\n\t                        configUpdated: configUpdatedCallback,\n\t                        get creationContext() {\n\t                            return hof_1.parse('$cfg.viewDecl.$context')(inherited);\n\t                        }\n\t                    };\n\t                    trace_1.trace.traceUIViewEvent(\"Linking\", activeUIView);\n\t                    function configUpdatedCallback(config) {\n\t                        if (config && !(config instanceof views_1.Ng1ViewConfig))\n\t                            return;\n\t                        if (configsEqual(viewConfig, config))\n\t                            return;\n\t                        trace_1.trace.traceUIViewConfigUpdated(activeUIView, config && config.viewDecl && config.viewDecl.$context);\n\t                        viewConfig = config;\n\t                        updateView(config);\n\t                    }\n\t                    $element.data('$uiView', { $uiView: activeUIView });\n\t                    updateView();\n\t                    unregister = $view.registerUIView(activeUIView);\n\t                    scope.$on(\"$destroy\", function () {\n\t                        trace_1.trace.traceUIViewEvent(\"Destroying/Unregistering\", activeUIView);\n\t                        unregister();\n\t                    });\n\t                    function cleanupLastView() {\n\t                        if (previousEl) {\n\t                            trace_1.trace.traceUIViewEvent(\"Removing (previous) el\", previousEl.data('$uiView'));\n\t                            previousEl.remove();\n\t                            previousEl = null;\n\t                        }\n\t                        if (currentScope) {\n\t                            trace_1.trace.traceUIViewEvent(\"Destroying scope\", activeUIView);\n\t                            currentScope.$destroy();\n\t                            currentScope = null;\n\t                        }\n\t                        if (currentEl) {\n\t                            var _viewData_1 = currentEl.data('$uiView');\n\t                            trace_1.trace.traceUIViewEvent(\"Animate out\", _viewData_1);\n\t                            renderer.leave(currentEl, function () {\n\t                                _viewData_1.$$animLeave.resolve();\n\t                                previousEl = null;\n\t                            });\n\t                            previousEl = currentEl;\n\t                            currentEl = null;\n\t                        }\n\t                    }\n\t                    function updateView(config) {\n\t                        var newScope = scope.$new();\n\t                        trace_1.trace.traceUIViewScopeCreated(activeUIView, newScope);\n\t                        var animEnter = $q.defer(), animLeave = $q.defer();\n\t                        var $uiViewData = {\n\t                            $cfg: config,\n\t                            $uiView: activeUIView,\n\t                            $animEnter: animEnter.promise,\n\t                            $animLeave: animLeave.promise,\n\t                            $$animLeave: animLeave\n\t                        };\n\t                        var cloned = $transclude(newScope, function (clone) {\n\t                            renderer.enter(clone.data('$uiView', $uiViewData), $element, function onUIViewEnter() {\n\t                                animEnter.resolve();\n\t                                if (currentScope)\n\t                                    currentScope.$emit('$viewContentAnimationEnded');\n\t                                if (predicates_1.isDefined(autoScrollExp) && !autoScrollExp || scope.$eval(autoScrollExp)) {\n\t                                    $uiViewScroll(clone);\n\t                                }\n\t                            });\n\t                            cleanupLastView();\n\t                        });\n\t                        currentEl = cloned;\n\t                        currentScope = newScope;\n\t                        /**\n\t                         * @ngdoc event\n\t                         * @name ui.router.state.directive:ui-view#$viewContentLoaded\n\t                         * @eventOf ui.router.state.directive:ui-view\n\t                         * @eventType emits on ui-view directive scope\n\t                         * @description           *\n\t                         * Fired once the view is **loaded**, *after* the DOM is rendered.\n\t                         *\n\t                         * @param {Object} event Event object.\n\t                         */\n\t                        currentScope.$emit('$viewContentLoaded', config || viewConfig);\n\t                        currentScope.$eval(onloadExp);\n\t                    }\n\t                };\n\t            }\n\t        };\n\t        return directive;\n\t    }];\n\t$ViewDirectiveFill.$inject = ['$compile', '$controller', '$transitions', '$view', '$timeout'];\n\t/** @hidden */\n\tfunction $ViewDirectiveFill($compile, $controller, $transitions, $view, $timeout) {\n\t    var getControllerAs = hof_1.parse('viewDecl.controllerAs');\n\t    var getResolveAs = hof_1.parse('viewDecl.resolveAs');\n\t    return {\n\t        restrict: 'ECA',\n\t        priority: -400,\n\t        compile: function (tElement) {\n\t            var initial = tElement.html();\n\t            return function (scope, $element) {\n\t                var data = $element.data('$uiView');\n\t                if (!data)\n\t                    return;\n\t                var cfg = data.$cfg || { viewDecl: {} };\n\t                $element.html(cfg.template || initial);\n\t                trace_1.trace.traceUIViewFill(data.$uiView, $element.html());\n\t                var link = $compile($element.contents());\n\t                var controller = cfg.controller;\n\t                var controllerAs = getControllerAs(cfg);\n\t                var resolveAs = getResolveAs(cfg);\n\t                var resolveCtx = cfg.path && new resolveContext_1.ResolveContext(cfg.path);\n\t                var locals = resolveCtx && services_1.getLocals(resolveCtx);\n\t                scope[resolveAs] = locals;\n\t                if (controller) {\n\t                    var controllerInstance = $controller(controller, common_1.extend({}, locals, { $scope: scope, $element: $element }));\n\t                    if (controllerAs) {\n\t                        scope[controllerAs] = controllerInstance;\n\t                        scope[controllerAs][resolveAs] = locals;\n\t                    }\n\t                    // TODO: Use $view service as a central point for registering component-level hooks\n\t                    // Then, when a component is created, tell the $view service, so it can invoke hooks\n\t                    // $view.componentLoaded(controllerInstance, { $scope: scope, $element: $element });\n\t                    // scope.$on('$destroy', () => $view.componentUnloaded(controllerInstance, { $scope: scope, $element: $element }));\n\t                    $element.data('$ngControllerController', controllerInstance);\n\t                    $element.children().data('$ngControllerController', controllerInstance);\n\t                    registerControllerCallbacks($transitions, controllerInstance, scope, cfg);\n\t                }\n\t                // Wait for the component to appear in the DOM\n\t                if (predicates_1.isString(cfg.viewDecl.component)) {\n\t                    var cmp_1 = cfg.viewDecl.component;\n\t                    var kebobName_1 = strings_1.kebobString(cmp_1);\n\t                    var getComponentController = function () {\n\t                        var directiveEl = [].slice.call($element[0].children)\n\t                            .filter(function (el) { return el && el.tagName && el.tagName.toLowerCase() === kebobName_1; });\n\t                        return directiveEl && angular.element(directiveEl).data(\"$\" + cmp_1 + \"Controller\");\n\t                    };\n\t                    var deregisterWatch_1 = scope.$watch(getComponentController, function (ctrlInstance) {\n\t                        if (!ctrlInstance)\n\t                            return;\n\t                        registerControllerCallbacks($transitions, ctrlInstance, scope, cfg);\n\t                        deregisterWatch_1();\n\t                    });\n\t                }\n\t                link(scope);\n\t            };\n\t        }\n\t    };\n\t}\n\t/** @hidden */\n\tvar hasComponentImpl = typeof angular.module('ui.router')['component'] === 'function';\n\t/** @hidden TODO: move these callbacks to $view and/or `/hooks/components.ts` or something */\n\tfunction registerControllerCallbacks($transitions, controllerInstance, $scope, cfg) {\n\t    // Call $onInit() ASAP\n\t    if (predicates_1.isFunction(controllerInstance.$onInit) && !(cfg.viewDecl.component && hasComponentImpl))\n\t        controllerInstance.$onInit();\n\t    var viewState = common_1.tail(cfg.path).state.self;\n\t    var hookOptions = { bind: controllerInstance };\n\t    // Add component-level hook for onParamsChange\n\t    if (predicates_1.isFunction(controllerInstance.uiOnParamsChanged)) {\n\t        var resolveContext = new resolveContext_1.ResolveContext(cfg.path);\n\t        var viewCreationTrans_1 = resolveContext.getResolvable('$transition$').data;\n\t        // Fire callback on any successful transition\n\t        var paramsUpdated = function ($transition$) {\n\t            // Exit early if the $transition$ is the same as the view was created within.\n\t            // Exit early if the $transition$ will exit the state the view is for.\n\t            if ($transition$ === viewCreationTrans_1 || $transition$.exiting().indexOf(viewState) !== -1)\n\t                return;\n\t            var toParams = $transition$.params(\"to\");\n\t            var fromParams = $transition$.params(\"from\");\n\t            var toSchema = $transition$.treeChanges().to.map(function (node) { return node.paramSchema; }).reduce(common_1.unnestR, []);\n\t            var fromSchema = $transition$.treeChanges().from.map(function (node) { return node.paramSchema; }).reduce(common_1.unnestR, []);\n\t            // Find the to params that have different values than the from params\n\t            var changedToParams = toSchema.filter(function (param) {\n\t                var idx = fromSchema.indexOf(param);\n\t                return idx === -1 || !fromSchema[idx].type.equals(toParams[param.id], fromParams[param.id]);\n\t            });\n\t            // Only trigger callback if a to param has changed or is new\n\t            if (changedToParams.length) {\n\t                var changedKeys_1 = changedToParams.map(function (x) { return x.id; });\n\t                // Filter the params to only changed/new to params.  `$transition$.params()` may be used to get all params.\n\t                controllerInstance.uiOnParamsChanged(common_1.filter(toParams, function (val, key) { return changedKeys_1.indexOf(key) !== -1; }), $transition$);\n\t            }\n\t        };\n\t        $scope.$on('$destroy', $transitions.onSuccess({}, paramsUpdated, hookOptions));\n\t    }\n\t    // Add component-level hook for uiCanExit\n\t    if (predicates_1.isFunction(controllerInstance.uiCanExit)) {\n\t        var criteria = { exiting: viewState.name };\n\t        $scope.$on('$destroy', $transitions.onBefore(criteria, controllerInstance.uiCanExit, hookOptions));\n\t    }\n\t}\n\tangular.module('ui.router.state').directive('uiView', uiView);\n\tangular.module('ui.router.state').directive('uiView', $ViewDirectiveFill);\n\n\n/***/ },\n/* 61 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t/**\n\t * @ngdoc object\n\t * @name ui.router.state.$uiViewScrollProvider\n\t *\n\t * @description\n\t * Provider that returns the {@link ui.router.state.$uiViewScroll} service function.\n\t */\n\tfunction $ViewScrollProvider() {\n\t    var useAnchorScroll = false;\n\t    /**\n\t     * @ngdoc function\n\t     * @name ui.router.state.$uiViewScrollProvider#useAnchorScroll\n\t     * @methodOf ui.router.state.$uiViewScrollProvider\n\t     *\n\t     * @description\n\t     * Reverts back to using the core [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll) service for\n\t     * scrolling based on the url anchor.\n\t     */\n\t    this.useAnchorScroll = function () {\n\t        useAnchorScroll = true;\n\t    };\n\t    /**\n\t     * @ngdoc object\n\t     * @name ui.router.state.$uiViewScroll\n\t     *\n\t     * @requires $anchorScroll\n\t     * @requires $timeout\n\t     *\n\t     * @description\n\t     * When called with a jqLite element, it scrolls the element into view (after a\n\t     * `$timeout` so the DOM has time to refresh).\n\t     *\n\t     * If you prefer to rely on `$anchorScroll` to scroll the view to the anchor,\n\t     * this can be enabled by calling {@link ui.router.state.$uiViewScrollProvider#methods_useAnchorScroll `$uiViewScrollProvider.useAnchorScroll()`}.\n\t     */\n\t    this.$get = ['$anchorScroll', '$timeout', function ($anchorScroll, $timeout) {\n\t            if (useAnchorScroll) {\n\t                return $anchorScroll;\n\t            }\n\t            return function ($element) {\n\t                return $timeout(function () {\n\t                    $element[0].scrollIntoView();\n\t                }, 0, false);\n\t            };\n\t        }];\n\t}\n\tangular.module('ui.router.state').provider('$uiViewScroll', $ViewScrollProvider);\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** angular-ui-router.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 69c9f233a4cccf4daf10\n **/","/**\n * Main entry point for angular 1.x build\n * @module ng1\n */\n/** for typedoc */\n\nexport * from \"./core\";\n\nexport * from \"./ng1/services\";\nexport * from \"./ng1/statebuilders/views\";\n\nimport \"./ng1/directives/stateDirectives\";\nimport \"./ng1/stateFilters\";\nimport \"./ng1/directives/viewDirective\";\nimport \"./ng1/viewScroll\";\n\nexport default \"ui.router\";\n\n\n\n/** WEBPACK FOOTER **\n ** ./ng1.ts\n **/","/** @module common */ /** */\n\nexport * from \"./common/module\";\nexport * from \"./params/module\";\nexport * from \"./path/module\";\nexport * from \"./resolve/module\";\nexport * from \"./state/module\";\nexport * from \"./transition/module\";\nexport * from \"./url/module\";\nexport * from \"./view/module\";\nexport * from \"./globals\";\n\nexport { UIRouter } from \"./router\";\n\n\n\n/** WEBPACK FOOTER **\n ** ./core.ts\n **/","/** @module common */ /** for typedoc */\nexport * from \"./common\";\nexport * from \"./coreservices\";\nexport * from \"./glob\";\nexport * from \"./hof\";\nexport * from \"./predicates\";\nexport * from \"./queue\";\nexport * from \"./strings\";\nexport * from \"./trace\";\n\n\n\n/** WEBPACK FOOTER **\n ** ./common/module.ts\n **/","/**\n * Random utility functions used in the UI-Router code\n *\n * @preferred @module common\n */ /** for typedoc */\n\nimport {isFunction, isString, isArray, isRegExp, isDate} from \"./predicates\";\nimport { all, any, not, prop, curry } from \"./hof\";\nimport {services} from \"./coreservices\";\n\nlet w: any = typeof window === 'undefined' ? {} : window;\nlet angular = w.angular || {};\nexport const fromJson = angular.fromJson || JSON.parse.bind(JSON);\nexport const toJson = angular.toJson || JSON.stringify.bind(JSON);\nexport const copy = angular.copy || _copy;\nexport const forEach = angular.forEach || _forEach;\nexport const extend = angular.extend || _extend;\nexport const equals = angular.equals || _equals;\nexport const identity = (x) => x;\nexport const noop = () => undefined;\n\nexport type Mapper<X, T> = (x: X, key?: (string|number)) => T;\nexport interface TypedMap<T> { [key: string]: T; }\nexport type Predicate<X> = (X) => boolean;\nexport type IInjectable = (Function|any[]);\n\nexport var abstractKey = 'abstract';\n\n/**\n * Binds and copies functions onto an object\n *\n * Takes functions from the 'from' object, binds those functions to the _this object, and puts the bound functions\n * on the 'to' object.\n *\n * This example creates an new class instance whose functions are prebound to the new'd object.\n * @example\n * ```\n *\n * class Foo {\n *   constructor(data) {\n *     // Binds all functions from Foo.prototype to 'this',\n *     // then copies them to 'this'\n *     bindFunctions(Foo.prototype, this, this);\n *     this.data = data;\n *   }\n *\n *   log() {\n *     console.log(this.data);\n *   }\n * }\n *\n * let myFoo = new Foo([1,2,3]);\n * var logit = myFoo.log;\n * logit(); // logs [1, 2, 3] from the myFoo 'this' instance\n * ```\n *\n * This example creates a bound version of a service function, and copies it to another object\n * @example\n * ```\n *\n * var SomeService = {\n *   this.data = [3, 4, 5];\n *   this.log = function() {\n *     console.log(this.data);\n *   }\n * }\n *\n * // Constructor fn\n * function OtherThing() {\n *   // Binds all functions from SomeService to SomeService,\n *   // then copies them to 'this'\n *   bindFunctions(SomeService, this, SomeService);\n * }\n *\n * let myOtherThing = new OtherThing();\n * myOtherThing.log(); // logs [3, 4, 5] from SomeService's 'this'\n * ```\n *\n * @param from The object which contains the functions to be bound\n * @param to The object which will receive the bound functions\n * @param bindTo The object which the functions will be bound to\n * @param fnNames The function names which will be bound (Defaults to all the functions found on the 'from' object)\n */\nexport function bindFunctions(from, to, bindTo, fnNames: string[] = Object.keys(from)) {\n  return fnNames.filter(name => typeof from[name] === 'function')\n      .forEach(name => to[name] = from[name].bind(bindTo));\n}\n\n\n/**\n * prototypal inheritance helper.\n * Creates a new object which has `parent` object as its prototype, and then copies the properties from `extra` onto it\n */\nexport const inherit = (parent, extra) =>\n    extend(new (extend(function() {}, { prototype: parent }))(), extra);\n\n/**\n * Given an arguments object, converts the arguments at index idx and above to an array.\n * This is similar to es6 rest parameters.\n *\n * Optionally, the argument at index idx may itself already be an array.\n *\n * For example,\n * given either:\n *        arguments = [ obj, \"foo\", \"bar\" ]\n * or:\n *        arguments = [ obj, [\"foo\", \"bar\"] ]\n * then:\n *        restArgs(arguments, 1) == [\"foo\", \"bar\"]\n *\n * This allows functions like pick() to be implemented such that it allows either a bunch\n * of string arguments (like es6 rest parameters), or a single array of strings:\n *\n * given:\n *        var obj = { foo: 1, bar: 2, baz: 3 };\n * then:\n *        pick(obj, \"foo\", \"bar\");   // returns { foo: 1, bar: 2 }\n *        pick(obj, [\"foo\", \"bar\"]); // returns { foo: 1, bar: 2 }\n */\nconst restArgs = (args, idx = 0) => Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(args, idx));\n\n/** Given an array, returns true if the object is found in the array, (using indexOf) */\nexport const inArray = (array: any[], obj: any) => array.indexOf(obj) !== -1;\n\n/** Given an array, and an item, if the item is found in the array, it removes it (in-place).  The same array is returned */\nexport const removeFrom = curry((array: any[], obj) => {\n  let idx = array.indexOf(obj);\n  if (idx >= 0) array.splice(idx, 1);\n  return array;\n});\n\n/**\n * Applies a set of defaults to an options object.  The options object is filtered\n * to only those properties of the objects in the defaultsList.\n * Earlier objects in the defaultsList take precedence when applying defaults.\n */\nexport function defaults(opts = {}, ...defaultsList) {\n  let defaults = merge.apply(null, [{}].concat(defaultsList));\n  return extend({}, defaults, pick(opts || {}, Object.keys(defaults)));\n}\n\n/**\n * Merges properties from the list of objects to the destination object.\n * If a property already exists in the destination object, then it is not overwritten.\n */\nexport function merge(dst, ...objs: Object[]) {\n  forEach(objs, function(obj) {\n    forEach(obj, function(value, key) {\n      if (!dst.hasOwnProperty(key)) dst[key] = value;\n    });\n  });\n  return dst;\n}\n\n/** Reduce function that merges each element of the list into a single object, using extend */\nexport const mergeR = (memo, item) => extend(memo, item);\n\n/**\n * Finds the common ancestor path between two states.\n *\n * @param {Object} first The first state.\n * @param {Object} second The second state.\n * @return {Array} Returns an array of state names in descending order, not including the root.\n */\nexport function ancestors(first, second) {\n  let path = [];\n\n  for (var n in first.path) {\n    if (first.path[n] !== second.path[n]) break;\n    path.push(first.path[n]);\n  }\n  return path;\n}\n\n/**\n * Performs a non-strict comparison of the subset of two objects, defined by a list of keys.\n *\n * @param {Object} a The first object.\n * @param {Object} b The second object.\n * @param {Array} keys The list of keys within each object to compare. If the list is empty or not specified,\n *                     it defaults to the list of keys in `a`.\n * @return {Boolean} Returns `true` if the keys match, otherwise `false`.\n */\nexport function equalForKeys(a, b, keys: string[] = Object.keys(a)) {\n  for (var i = 0; i < keys.length; i++) {\n    let k = keys[i];\n    if (a[k] != b[k]) return false; // Not '===', values aren't necessarily normalized\n  }\n  return true;\n}\n\ntype PickOmitPredicate = (keys: string[], key) => boolean;\nfunction pickOmitImpl(predicate: PickOmitPredicate, obj) {\n  let objCopy = {}, keys = restArgs(arguments, 2);\n  for (var key in obj) {\n    if (predicate(keys, key)) objCopy[key] = obj[key];\n  }\n  return objCopy;\n}\n\n/**\n * @example\n * ```\n *\n * var foo = { a: 1, b: 2, c: 3 };\n * var ab = pick(foo, ['a', 'b']); // { a: 1, b: 2 }\n * ```\n * @param obj the source object\n * @param propNames an Array of strings, which are the whitelisted property names\n */\nexport function pick(obj, propNames: string[]): Object;\n/**\n * @example\n * ```\n *\n * var foo = { a: 1, b: 2, c: 3 };\n * var ab = pick(foo, 'a', 'b'); // { a: 1, b: 2 }\n * ```\n * @param obj the source object\n * @param propNames 1..n strings, which are the whitelisted property names\n */\nexport function pick(obj, ...propNames: string[]): Object;\n/** Return a copy of the object only containing the whitelisted properties. */\nexport function pick(obj) { return pickOmitImpl.apply(null, [inArray].concat(restArgs(arguments))); }\n\n/**\n * @example\n * ```\n *\n * var foo = { a: 1, b: 2, c: 3 };\n * var ab = omit(foo, ['a', 'b']); // { c: 3 }\n * ```\n * @param obj the source object\n * @param propNames an Array of strings, which are the blacklisted property names\n */\nexport function omit(obj, propNames: string[]): Object;\n/**\n * @example\n * ```\n *\n * var foo = { a: 1, b: 2, c: 3 };\n * var ab = omit(foo, 'a', 'b'); // { c: 3 }\n * ```\n * @param obj the source object\n * @param propNames 1..n strings, which are the blacklisted property names\n */\nexport function omit(obj, ...propNames: string[]): Object;\n/** Return a copy of the object omitting the blacklisted properties. */\nexport function omit(obj) { return pickOmitImpl.apply(null, [not(inArray)].concat(restArgs(arguments))); }\n\n\n/** Given an array of objects, maps each element to a named property of the element. */\nexport function pluck(collection: any[], propName: string): any[];\n/** Given an object, maps each property of the object to a named property of the property. */\nexport function pluck(collection: { [key: string]: any }, propName: string): { [key: string]: any };\n/**\n * Maps an array, or object to a property (by name)\n */\nexport function pluck(collection, propName): any {\n  return map(collection, <Mapper<any, string>> prop(propName));\n}\n\n\n/** Given an array of objects, returns a new array containing only the elements which passed the callback predicate */\nexport function filter<T>(collection: T[], callback: (T, key?) => boolean): T[];\n/** Given an object, returns a new object with only those properties that passed the callback predicate */\nexport function filter<T>(collection: TypedMap<T>, callback: (T, key?) => boolean): TypedMap<T>;\n/** Filters an Array or an Object's properties based on a predicate */\nexport function filter<T>(collection: T, callback: Function): T {\n  let arr = isArray(collection), result: any = arr ? [] : {};\n  let accept = arr ? x => result.push(x) : (x, key) => result[key] = x;\n  forEach(collection, function(item, i) {\n    if (callback(item, i)) accept(item, i);\n  });\n  return <T>result;\n}\n\n\n/** Given an object, return the first property of that object which passed the callback predicate */\nexport function find<T>(collection: TypedMap<T>, callback: Predicate<T>): T;\n/** Given an array of objects, returns the first object which passed the callback predicate */\nexport function find<T>(collection: T[], callback: Predicate<T>): T;\n/** Finds an object from an array, or a property of an object, that matches a predicate */\nexport function find(collection, callback) {\n  let result;\n\n  forEach(collection, function(item, i) {\n    if (result) return;\n    if (callback(item, i)) result = item;\n  });\n\n  return result;\n}\n\n/** Given an object, returns a new object, where each property is transformed by the callback function */\nexport let mapObj: <T,U>(collection: { [key: string]: T }, callback: Mapper<T,U>) => { [key: string]: U } = map;\n/** Given an array, returns a new array, where each element is transformed by the callback function */\nexport function map<T, U>(collection: T[], callback: Mapper<T, U>): U[];\nexport function map<T, U>(collection: { [key: string]: T }, callback: Mapper<T, U>): { [key: string]: U }\n/** Maps an array or object properties using a callback function */\nexport function map(collection: any, callback: any): any {\n  let result = isArray(collection) ? [] : {};\n  forEach(collection, (item, i) => result[i] = callback(item, i));\n  return result;\n}\n\n/**\n * Given an object, return its enumerable property values\n *\n * @example\n * ```\n *\n * let foo = { a: 1, b: 2, c: 3 }\n * let vals = values(foo); // [ 1, 2, 3 ]\n * ```\n */\nexport const values: (<T> (obj: TypedMap<T>) => T[]) = (obj) => Object.keys(obj).map(key => obj[key]);\n\n/**\n * Reduce function that returns true if all of the values are truthy.\n *\n * @example\n * ```\n *\n * let vals = [ 1, true, {}, \"hello world\"];\n * vals.reduce(allTrueR, true); // true\n *\n * vals.push(0);\n * vals.reduce(allTrueR, true); // false\n * ```\n */\nexport const allTrueR  = (memo: boolean, elem) => memo && elem;\n\n/**\n * Reduce function that returns true if any of the values are truthy.\n *\n *  * @example\n * ```\n *\n * let vals = [ 0, null, undefined ];\n * vals.reduce(anyTrueR, true); // false\n *\n * vals.push(\"hello world\");\n * vals.reduce(anyTrueR, true); // true\n * ```\n */\nexport const anyTrueR  = (memo: boolean, elem) => memo || elem;\n\n/**\n * Reduce function which un-nests a single level of arrays\n * @example\n * ```\n *\n * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n * input.reduce(unnestR, []) // [ \"a\", \"b\", \"c\", \"d\", [ \"double, \"nested\" ] ]\n * ```\n */\nexport const unnestR   = (memo: any[], elem) => memo.concat(elem);\n\n/**\n * Reduce function which recursively un-nests all arrays\n *\n * @example\n * ```\n *\n * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n * input.reduce(unnestR, []) // [ \"a\", \"b\", \"c\", \"d\", \"double, \"nested\" ]\n * ```\n */\nexport const flattenR  = (memo: any[], elem) => isArray(elem) ? memo.concat(elem.reduce(flattenR, [])) : pushR(memo, elem);\n/** Reduce function that pushes an object to an array, then returns the array.  Mostly just for [[flattenR]] */\nexport function pushR(arr: any[], obj) { arr.push(obj); return arr; }\n\n/** Reduce function that filters out duplicates */\nexport const uniqR = (acc, token) => inArray(acc, token) ? acc : pushR(acc, token);\n\n/**\n * Return a new array with a single level of arrays unnested.\n *\n * @example\n * ```\n *\n * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n * unnest(input) // [ \"a\", \"b\", \"c\", \"d\", [ \"double, \"nested\" ] ]\n * ```\n */\nexport const unnest    = (arr: any[]) => arr.reduce(unnestR, []);\n/**\n * Return a completely flattened version of an array.\n *\n * @example\n * ```\n *\n * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n * flatten(input) // [ \"a\", \"b\", \"c\", \"d\", \"double, \"nested\" ]\n * ```\n */\nexport const flatten   = (arr: any[]) => arr.reduce(flattenR, []);\n\n/**\n * Given a .filter Predicate, builds a .filter Predicate which throws an error if any elements do not pass.\n * @example\n * ```\n *\n * let isNumber = (obj) => typeof(obj) === 'number';\n * let allNumbers = [ 1, 2, 3, 4, 5 ];\n * allNumbers.filter(assertPredicate(isNumber)); //OK\n *\n * let oneString = [ 1, 2, 3, 4, \"5\" ];\n * oneString.filter(assertPredicate(isNumber, \"Not all numbers\")); // throws Error(\"\"Not all numbers\"\");\n * ```\n */\nexport function assertPredicate<T>(predicate: Predicate<T>, errMsg: (string|Function) = \"assert failure\"): Predicate<T> {\n  return (obj: T) => {\n    if (!predicate(obj)) {\n      throw new Error(isFunction(errMsg) ? (<Function> errMsg)(obj) : errMsg);\n    }\n    return true;\n  };\n}\n\n/**\n * Like _.pairs: Given an object, returns an array of key/value pairs\n *\n * @example\n * ```\n *\n * pairs({ foo: \"FOO\", bar: \"BAR }) // [ [ \"foo\", \"FOO\" ], [ \"bar\": \"BAR\" ] ]\n * ```\n */\nexport const pairs = (object) => Object.keys(object).map(key => [ key, object[key]] );\n\n/**\n * Given two or more parallel arrays, returns an array of tuples where\n * each tuple is composed of [ a[i], b[i], ... z[i] ]\n *\n * @example\n * ```\n *\n * let foo = [ 0, 2, 4, 6 ];\n * let bar = [ 1, 3, 5, 7 ];\n * let baz = [ 10, 30, 50, 70 ];\n * arrayTuples(foo, bar);       // [ [0, 1], [2, 3], [4, 5], [6, 7] ]\n * arrayTuples(foo, bar, baz);  // [ [0, 1, 10], [2, 3, 30], [4, 5, 50], [6, 7, 70] ]\n * ```\n */\nexport function arrayTuples(...arrayArgs: any[]): any[] {\n  if (arrayArgs.length === 0) return [];\n  let length = arrayArgs.reduce((min, arr) => Math.min(arr.length, min), 9007199254740991); // aka 2^53 − 1 aka Number.MAX_SAFE_INTEGER\n  return Array.apply(null, Array(length)).map((ignored, idx) => arrayArgs.map(arr => arr[idx]));\n}\n\n/**\n * Reduce function which builds an object from an array of [key, value] pairs.\n *\n * Each iteration sets the key/val pair on the memo object, then returns the memo for the next iteration.\n *\n * Each keyValueTuple should be an array with values [ key: string, value: any ]\n *\n * @example\n * ```\n *\n * var pairs = [ [\"fookey\", \"fooval\"], [\"barkey\", \"barval\"] ]\n *\n * var pairsToObj = pairs.reduce((memo, pair) => applyPairs(memo, pair), {})\n * // pairsToObj == { fookey: \"fooval\", barkey: \"barval\" }\n *\n * // Or, more simply:\n * var pairsToObj = pairs.reduce(applyPairs, {})\n * // pairsToObj == { fookey: \"fooval\", barkey: \"barval\" }\n * ```\n */\nexport function applyPairs(memo: TypedMap<any>, keyValTuple: any[]) {\n  let key, value;\n  if (isArray(keyValTuple)) [key, value] = keyValTuple;\n  if (!isString(key)) throw new Error(\"invalid parameters to applyPairs\");\n  memo[key] = value;\n  return memo;\n}\n\n/** Get the last element of an array */\nexport function tail<T>(arr: T[]): T {\n  return arr.length && arr[arr.length - 1] || undefined;\n}\n\n/**\n * shallow copy from src to dest\n *\n * note: This is a shallow copy, while angular.copy is a deep copy.\n * ui-router uses `copy` only to make copies of state parameters.\n */\nfunction _copy(src, dest) {\n  if (dest) Object.keys(dest).forEach(key => delete dest[key]);\n  if (!dest) dest = {};\n  return extend(dest, src);\n}\n\nfunction _forEach(obj: (any[]|any), cb, _this) {\n  if (isArray(obj)) return obj.forEach(cb, _this);\n  Object.keys(obj).forEach(key => cb(obj[key], key));\n}\n\nfunction _copyProps(to, from) { Object.keys(from).forEach(key => to[key] = from[key]); return to; }\nfunction _extend(toObj, fromObj);\nfunction _extend(toObj, ...fromObj);\nfunction _extend(toObj, rest) {\n  return restArgs(arguments, 1).filter(identity).reduce(_copyProps, toObj);\n}\n\nfunction _equals(o1, o2) {\n  if (o1 === o2) return true;\n  if (o1 === null || o2 === null) return false;\n  if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN\n  let t1 = typeof o1, t2 = typeof o2;\n  if (t1 !== t2 || t1 !== 'object') return false;\n\n  const tup = [o1, o2];\n  if (all(isArray)(tup)) return _arraysEq(o1, o2);\n  if (all(isDate)(tup)) return o1.getTime() === o2.getTime();\n  if (all(isRegExp)(tup)) return o1.toString() === o2.toString();\n  if (all(isFunction)(tup)) return true; // meh\n\n  let predicates = [isFunction, isArray, isDate, isRegExp];\n  if (predicates.map(any).reduce((b, fn) => b || !!fn(tup), false)) return false;\n\n  let key, keys = {};\n  for (key in o1) {\n    if (!_equals(o1[key], o2[key])) return false;\n    keys[key] = true;\n  }\n  for (key in o2) {\n    if (!keys[key]) return false;\n  }\n\n  return true;\n}\n\nfunction _arraysEq(a1, a2) {\n  if (a1.length !== a2.length) return false;\n  return arrayTuples(a1, a2).reduce((b, t) => b && _equals(t[0], t[1]), true);\n}\n\n// issue #2676\nexport const silenceUncaughtInPromise = (promise: Promise<any>) =>\n    promise.catch(e => 0) && promise;\nexport const silentRejection = (error: any) =>\n    silenceUncaughtInPromise(services.$q.reject(error));\n\n\n\n/** WEBPACK FOOTER **\n ** ./common/common.ts\n **/","/** Predicates @module common_predicates */ /** */\nimport {and, not, pipe, prop} from \"./hof\";\n\nconst toStr = Object.prototype.toString;\nconst tis = (t) => (x) => typeof(x) === t;\nexport const isUndefined = tis('undefined');\nexport const isDefined = not(isUndefined);\nexport const isNull = o => o === null;\nexport const isFunction: (x) => x is Function = <any> tis('function');\nexport const isNumber: (x) => x is number = <any> tis('number');\nexport const isString = <(x) => x is string> tis('string');\nexport const isObject = (x) => x !== null && typeof x === 'object';\nexport const isArray = Array.isArray;\nexport const isDate: (x) => x is Date = <any> ((x) => toStr.call(x) === '[object Date]');\nexport const isRegExp: (x) => x is RegExp = <any> ((x) => toStr.call(x) === '[object RegExp]');\n\n/**\n * Predicate which checks if a value is injectable\n *\n * A value is \"injectable\" if it is a function, or if it is an ng1 array-notation-style array\n * where all the elements in the array are Strings, except the last one, which is a Function\n */\nexport function isInjectable(val) {\n  if (isArray(val) && val.length) {\n    let head = val.slice(0, -1), tail = val.slice(-1);\n    return !(head.filter(not(isString)).length || tail.filter(not(isFunction)).length);\n  }\n  return isFunction(val);\n}\n\n/**\n * Predicate which checks if a value looks like a Promise\n *\n * It is probably a Promise if it's an object, and it has a `then` property which is a Function\n */\nexport const isPromise = and(isObject, pipe(prop('then'), isFunction));\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./common/predicates.ts\n **/","/**\n * Higher order functions\n *\n * @module common_hof\n */ /** */\n\nimport {Predicate} from \"./common\";\n/**\n * Returns a new function for [Partial Application](https://en.wikipedia.org/wiki/Partial_application) of the original function.\n *\n * Given a function with N parameters, returns a new function that supports partial application.\n * The new function accepts anywhere from 1 to N parameters.  When that function is called with M parameters,\n * where M is less than N, it returns a new function that accepts the remaining parameters.  It continues to\n * accept more parameters until all N parameters have been supplied.\n *\n *\n * This contrived example uses a partially applied function as an predicate, which returns true\n * if an object is found in both arrays.\n * @example\n * ```\n * // returns true if an object is in both of the two arrays\n * function inBoth(array1, array2, object) {\n *   return array1.indexOf(object) !== -1 &&\n *          array2.indexOf(object) !== 1;\n * }\n * let obj1, obj2, obj3, obj4, obj5, obj6, obj7\n * let foos = [obj1, obj3]\n * let bars = [obj3, obj4, obj5]\n *\n * // A curried \"copy\" of inBoth\n * let curriedInBoth = curry(inBoth);\n * // Partially apply both the array1 and array2\n * let inFoosAndBars = curriedInBoth(foos, bars);\n *\n * // Supply the final argument; since all arguments are\n * // supplied, the original inBoth function is then called.\n * let obj1InBoth = inFoosAndBars(obj1); // false\n *\n * // Use the inFoosAndBars as a predicate.\n * // Filter, on each iteration, supplies the final argument\n * let allObjs = [ obj1, obj2, obj3, obj4, obj5, obj6, obj7 ];\n * let foundInBoth = allObjs.filter(inFoosAndBars); // [ obj3 ]\n *\n * ```\n *\n * Stolen from: http://stackoverflow.com/questions/4394747/javascript-curry-function\n *\n * @param fn\n * @returns {*|function(): (*|any)}\n */\nexport function curry(fn: Function): Function {\n  let initial_args = [].slice.apply(arguments, [1]);\n  let func_args_length = fn.length;\n\n  function curried(args) {\n    if (args.length >= func_args_length)\n      return fn.apply(null, args);\n    return function () {\n      return curried(args.concat([].slice.apply(arguments)));\n    };\n  }\n  return curried(initial_args);\n}\n\n\n\n/**\n * Given a varargs list of functions, returns a function that composes the argument functions, right-to-left\n * given: f(x), g(x), h(x)\n * let composed = compose(f,g,h)\n * then, composed is: f(g(h(x)))\n */\nexport function compose() {\n  let args = arguments;\n  let start = args.length - 1;\n  return function() {\n    let i = start, result = args[start].apply(this, arguments);\n    while (i--) result = args[i].call(this, result);\n    return result;\n  };\n}\n\n/**\n * Given a varargs list of functions, returns a function that is composes the argument functions, left-to-right\n * given: f(x), g(x), h(x)\n * let piped = pipe(f,g,h);\n * then, piped is: h(g(f(x)))\n */\nexport function pipe(...funcs: Function[]): (obj: any) => any {\n  return compose.apply(null, [].slice.call(arguments).reverse());\n}\n\n/**\n * Given a property name, returns a function that returns that property from an object\n * let obj = { foo: 1, name: \"blarg\" };\n * let getName = prop(\"name\");\n * getName(obj) === \"blarg\"\n */\nexport const prop = (name: string) => (obj: any) => obj && obj[name];\n\n/**\n * Given a property name and a value, returns a function that returns a boolean based on whether\n * the passed object has a property that matches the value\n * let obj = { foo: 1, name: \"blarg\" };\n * let getName = propEq(\"name\", \"blarg\");\n * getName(obj) === true\n */\nexport const propEq = curry((name: string, val: any, obj: any) => obj && obj[name] === val);\n\n/**\n * Given a dotted property name, returns a function that returns a nested property from an object, or undefined\n * let obj = { id: 1, nestedObj: { foo: 1, name: \"blarg\" }, };\n * let getName = prop(\"nestedObj.name\");\n * getName(obj) === \"blarg\"\n * let propNotFound = prop(\"this.property.doesnt.exist\");\n * propNotFound(obj) === undefined\n */\nexport const parse = (name: string) => pipe.apply(null, name.split(\".\").map(prop));\n\n/**\n * Given a function that returns a truthy or falsey value, returns a\n * function that returns the opposite (falsey or truthy) value given the same inputs\n */\nexport const not = (fn) => (...args) => !fn.apply(null, args);\n\n/**\n * Given two functions that return truthy or falsey values, returns a function that returns truthy\n * if both functions return truthy for the given arguments\n */\nexport function and(fn1, fn2): Predicate<any> {\n  return (...args) => fn1.apply(null, args) && fn2.apply(null, args);\n}\n\n/**\n * Given two functions that return truthy or falsey values, returns a function that returns truthy\n * if at least one of the functions returns truthy for the given arguments\n */\nexport function or(fn1, fn2): Predicate<any> {\n  return (...args) => fn1.apply(null, args) || fn2.apply(null, args);\n}\n\n/**\n * Check if all the elements of an array match a predicate function\n *\n * @param fn1 a predicate function `fn1`\n * @returns a function which takes an array and returns true if `fn1` is true for all elements of the array\n */\nexport const all = (fn1) => (arr: any[]) => arr.reduce((b, x) => b && !!fn1(x), true);\nexport const any = (fn1) => (arr: any[]) => arr.reduce((b, x) => b || !!fn1(x), false);\nexport const none: Function = not(any);\n\n/** Given a class, returns a Predicate function that returns true if the object is of that class */\nexport const is: (ctor) => (x) => boolean =\n    ctor => obj => (obj != null && obj.constructor === ctor || obj instanceof ctor);\n\n/** Given a value, returns a Predicate function that returns true if another value is === equal to the original value */\nexport const eq: (comp) => (x) => boolean =\n    (val) => (other) => val === other;\n\n/** Given a value, returns a function which returns the value */\nexport const val = <T> (v: T) => () => v;\n\n\n\nexport function invoke(fnName: string): Function;\nexport function invoke(fnName: string, args: any[]): Function;\nexport function invoke(fnName: string, args?): Function {\n  return (obj: any) => obj[fnName].apply(obj, args);\n}\n\n/**\n * Sorta like Pattern Matching (a functional programming conditional construct)\n *\n * See http://c2.com/cgi/wiki?PatternMatching\n *\n * This is a conditional construct which allows a series of predicates and output functions\n * to be checked and then applied.  Each predicate receives the input.  If the predicate\n * returns truthy, then its matching output function (mapping function) is provided with\n * the input and, then the result is returned.\n *\n * Each combination (2-tuple) of predicate + output function should be placed in an array\n * of size 2: [ predicate, mapFn ]\n *\n * These 2-tuples should be put in an outer array.\n *\n * @example\n * ```\n *\n * // Here's a 2-tuple where the first element is the isString predicate\n * // and the second element is a function that returns a description of the input\n * let firstTuple = [ angular.isString, (input) => `Heres your string ${input}` ];\n *\n * // Second tuple: predicate \"isNumber\", mapfn returns a description\n * let secondTuple = [ angular.isNumber, (input) => `(${input}) That's a number!` ];\n *\n * let third = [ (input) => input === null,  (input) => `Oh, null...` ];\n *\n * let fourth = [ (input) => input === undefined,  (input) => `notdefined` ];\n *\n * let descriptionOf = pattern([ firstTuple, secondTuple, third, fourth ]);\n *\n * console.log(descriptionOf(undefined)); // 'notdefined'\n * console.log(descriptionOf(55)); // '(55) That's a number!'\n * console.log(descriptionOf(\"foo\")); // 'Here's your string foo'\n * ```\n *\n * @param struct A 2D array.  Each element of the array should be an array, a 2-tuple,\n * with a Predicate and a mapping/output function\n * @returns {function(any): *}\n */\nexport function pattern(struct: Function[][]): Function {\n  return function(x) {\n    for (var i = 0; i < struct.length; i++) {\n      if (struct[i][0](x)) return struct[i][1](x);\n    }\n  };\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./common/hof.ts\n **/","/**\n * This module is a stub for core services such as Dependency Injection or Browser Location.\n * Core services may be implemented by a specific framework, such as ng1 or ng2, or be pure javascript.\n *\n * @module common\n */\n\n/** for typedoc */\n//import {IQService} from \"angular\";\n//import {IInjectorService} from \"angular\";\n\nlet notImplemented = (fnname) => () => {\n  throw new Error(`${fnname}(): No coreservices implementation for UI-Router is loaded. You should include one of: ['angular1.js']`);\n};\n\nlet services: CoreServices = {\n  $q: undefined,\n  $injector: undefined,\n  location: <any> {},\n  locationConfig: <any> {},\n  template: <any> {}\n};\n\n[\"replace\", \"url\", \"path\", \"search\", \"hash\", \"onChange\"]\n    .forEach(key => services.location[key] = notImplemented(key));\n\n[\"port\", \"protocol\", \"host\", \"baseHref\", \"html5Mode\", \"hashPrefix\" ]\n    .forEach(key => services.locationConfig[key] = notImplemented(key));\n\nexport interface CoreServices {\n  $q; // : IQService;\n  $injector; // : IInjectorService;\n  /** Services related to getting or setting the browser location (url) */\n  location: LocationServices;\n  /** Retrieves configuration for how to construct a URL. */\n  locationConfig: LocationConfig;\n  template: TemplateServices;\n}\n\nexport interface LocationServices {\n  replace(): void;\n  url(newurl: string): string;\n  url(): string;\n  path(): string;\n  search(): string;\n  hash(): string;\n  onChange(callback: Function): Function;\n}\n\nexport interface LocationConfig {\n  port(): number;\n  protocol(): string;\n  host(): string;\n\n  baseHref(): string;\n  html5Mode(): boolean;\n  hashPrefix(): string;\n  hashPrefix(newprefix: string): string;\n}\n\nexport interface TemplateServices {\n  get(url: string): string;\n}\n\n\nexport {services};\n\n\n/** WEBPACK FOOTER **\n ** ./common/coreservices.ts\n **/","/** @module common */ \n/** \n * Matches state names using glob-like patterns.\n * \n * See: [[StateService.includes]]\n */\nexport class Glob {\n  text: string;\n  glob: Array<string>;\n\n  constructor(text: string) {\n    this.text = text;\n    this.glob = text.split('.');\n  }\n\n  matches(name: string) {\n    let segments = name.split('.');\n\n    // match single stars\n    for (let i = 0, l = this.glob.length; i < l; i++) {\n      if (this.glob[i] === '*') segments[i] = '*';\n    }\n\n    // match greedy starts\n    if (this.glob[0] === '**') {\n       segments = segments.slice(segments.indexOf(this.glob[1]));\n       segments.unshift('**');\n    }\n    // match greedy ends\n    if (this.glob[this.glob.length - 1] === '**') {\n       segments.splice(segments.indexOf(this.glob[this.glob.length - 2]) + 1, Number.MAX_VALUE);\n       segments.push('**');\n    }\n    if (this.glob.length != segments.length) return false;\n\n    return segments.join('') === this.glob.join('');\n  }\n\n  static is(text: string) {\n    return text.indexOf('*') > -1;\n  }\n\n  static fromString(text: string) {\n    if (!this.is(text)) return null;\n    return new Glob(text);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./common/glob.ts\n **/","/** @module common */ /** for typedoc */\n\nexport class Queue<T> {\n  constructor(private _items: T[] = [], private _limit: number = null) { }\n\n  enqueue(item: T) {\n    let items = this._items;\n    items.push(item);\n    if (this._limit && items.length > this._limit) items.shift();\n    return item;\n  }\n\n  dequeue(): T {\n    if (this.size())\n      return this._items.splice(0, 1)[0];\n  }\n\n  clear(): Array<T> {\n    let current = this._items;\n    this._items = [];\n    return current;\n  }\n\n  size(): number {\n    return this._items.length;\n  }\n\n  remove(item: T) {\n    let idx = this._items.indexOf(item);\n    return idx > -1 && this._items.splice(idx, 1)[0];\n  }\n\n  peekTail(): T {\n    return this._items[this._items.length - 1];\n  }\n\n  peekHead(): T {\n    if (this.size())\n      return this._items[0];\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./common/queue.ts\n **/","/** @module common_strings */ /** */\n\nimport {isString, isArray, isDefined, isNull, isPromise, isInjectable, isObject} from \"./predicates\";\nimport {Rejection} from \"../transition/rejectFactory\";\nimport {IInjectable, identity} from \"./common\";\nimport {pattern, is, not, val, invoke} from \"./hof\";\nimport {Transition} from \"../transition/transition\";\nimport {Resolvable} from \"../resolve/resolvable\";\n\n/**\n * Returns a string shortened to a maximum length\n *\n * If the string is already less than the `max` length, return the string.\n * Else return the string, shortened to `max - 3` and append three dots (\"...\").\n *\n * @param max the maximum length of the string to return\n * @param str the input string\n */\nexport function maxLength(max: number, str: string) {\n  if (str.length <= max) return str;\n  return str.substr(0, max - 3) + \"...\";\n}\n\n/**\n * Returns a string, with spaces added to the end, up to a desired str length\n *\n * If the string is already longer than the desired length, return the string.\n * Else returns the string, with extra spaces on the end, such that it reaches `length` characters.\n *\n * @param length the desired length of the string to return\n * @param str the input string\n */\nexport function padString(length: number, str: string) {\n  while (str.length < length) str += \" \";\n  return str;\n}\n\nexport function kebobString(camelCase: string) {\n  return camelCase\n      .replace(/^([A-Z])/, $1 => $1.toLowerCase()) // replace first char\n      .replace(/([A-Z])/g, $1 => \"-\" + $1.toLowerCase()); // replace rest\n}\n\nfunction _toJson(obj: Object) {\n  return JSON.stringify(obj);\n}\n\nfunction _fromJson(json: string) {\n  return isString(json) ? JSON.parse(json) : json;\n}\n\n\nfunction promiseToString(p: Promise<any>) {\n  return `Promise(${JSON.stringify(p)})`;\n}\n\nexport function functionToString(fn: Function) {\n  let fnStr = fnToString(fn);\n  let namedFunctionMatch = fnStr.match(/^(function [^ ]+\\([^)]*\\))/);\n  return namedFunctionMatch ? namedFunctionMatch[1] : fnStr;\n}\n\nexport function fnToString(fn: IInjectable) {\n  let _fn = isArray(fn) ? fn.slice(-1)[0] : fn;\n  return _fn && _fn.toString() || \"undefined\";\n}\n\nlet stringifyPatternFn = null;\nlet stringifyPattern = function(value) {\n  let isTransitionRejectionPromise = Rejection.isTransitionRejectionPromise;\n\n  stringifyPatternFn = stringifyPatternFn || pattern([\n    [not(isDefined),                  val(\"undefined\")],\n    [isNull,                          val(\"null\")],\n    [isPromise,                       val(\"[Promise]\")],\n    [isTransitionRejectionPromise,    (x: any) => x._transitionRejection.toString()],\n    [is(Rejection),                   invoke(\"toString\")],\n    [is(Transition),                  invoke(\"toString\")],\n    [is(Resolvable),                  invoke(\"toString\")],\n    [isInjectable,                    functionToString],\n    [val(true),                       identity]\n  ]);\n\n  return stringifyPatternFn(value);\n};\n\nexport function stringify(o: Object) {\n  var seen: any[] = [];\n\n  function format(val: any) {\n    if (isObject(val)) {\n      if (seen.indexOf(val) !== -1) return '[circular ref]';\n      seen.push(val);\n    }\n    return stringifyPattern(val);\n  }\n\n  return JSON.stringify(o, (key, val) => format(val)).replace(/\\\\\"/g, '\"');\n}\n\n/** Returns a function that splits a string on a character or substring */\nexport const beforeAfterSubstr = (char: string) => (str: string) => {\n  if (!str) return [\"\", \"\"];\n  let idx = str.indexOf(char);\n  if (idx === -1) return [str, \"\"];\n  return [str.substr(0, idx), str.substr(idx + 1)];\n};\n\n\n/** WEBPACK FOOTER **\n ** ./common/strings.ts\n **/","/** @module transition */ /** for typedoc */\n\"use strict\";\nimport {extend, silentRejection} from \"../common/common\";\nimport {stringify} from \"../common/strings\";\n\nexport enum RejectType {\n  SUPERSEDED = 2, ABORTED = 3, INVALID = 4, IGNORED = 5, ERROR = 6\n}\n\nexport class Rejection {\n  type: number;\n  message: string;\n  detail: string;\n  redirected: boolean;\n\n  constructor(type, message?, detail?) {\n    this.type = type;\n    this.message = message;\n    this.detail = detail;\n  }\n\n  toString() {\n    const detailString = d => d && d.toString !== Object.prototype.toString ? d.toString() : stringify(d);\n    let type = this.type, message = this.message, detail = detailString(this.detail);\n    return `TransitionRejection(type: ${type}, message: ${message}, detail: ${detail})`;\n  }\n\n  toPromise() {\n    return extend(silentRejection(this), { _transitionRejection: this });\n  }\n\n  /** Returns true if the obj is a rejected promise created from the `asPromise` factory */\n  static isTransitionRejectionPromise(obj) {\n    return obj && (typeof obj.then === 'function') && obj._transitionRejection instanceof Rejection;\n  }\n\n  /** Returns a TransitionRejection due to transition superseded */\n  static superseded(detail?: any, options?: any) {\n    let message = \"The transition has been superseded by a different transition (see detail).\";\n    let rejection = new Rejection(RejectType.SUPERSEDED, message, detail);\n    if (options && options.redirected) {\n      rejection.redirected = true;\n    }\n    return rejection;\n  }\n\n  /** Returns a TransitionRejection due to redirected transition */\n  static redirected(detail?: any) {\n    return Rejection.superseded(detail, {redirected: true});\n  }\n\n  /** Returns a TransitionRejection due to invalid transition */\n  static invalid(detail?: any) {\n    let message = \"This transition is invalid (see detail)\";\n    return new Rejection(RejectType.INVALID, message, detail);\n  }\n\n  /** Returns a TransitionRejection due to ignored transition */\n  static ignored(detail?: any) {\n    let message = \"The transition was ignored.\";\n    return new Rejection(RejectType.IGNORED, message, detail);\n  }\n\n  /** Returns a TransitionRejection due to aborted transition */\n  static aborted(detail?: any) {\n    // TODO think about how to encapsulate an Error() object\n    let message = \"The transition has been aborted.\";\n    return new Rejection(RejectType.ABORTED, message, detail);\n  }\n\n  /** Returns a TransitionRejection due to aborted transition */\n  static errored(detail?: any) {\n    // TODO think about how to encapsulate an Error() object\n    let message = \"The transition errored.\";\n    return new Rejection(RejectType.ERROR, message, detail);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./transition/rejectFactory.ts\n **/","/** @module transition */ /** for typedoc */\nimport {trace} from \"../common/trace\";\nimport {services} from \"../common/coreservices\";\nimport {\n    map, find, extend, mergeR,  tail,\n    omit, toJson, abstractKey, arrayTuples, unnestR, identity, anyTrueR\n} from \"../common/common\";\nimport { isObject, isArray } from \"../common/predicates\";\nimport { prop, propEq, val, not } from \"../common/hof\";\n\nimport {StateDeclaration, StateOrName} from \"../state/interface\";\nimport {\n    TransitionOptions, TransitionHookOptions, TreeChanges, IHookRegistry, IHookGetter,\n    HookMatchCriteria, TransitionHookFn, TransitionStateHookFn, HookRegOptions\n} from \"./interface\";\n\nimport {TransitionHook} from \"./transitionHook\";\nimport {HookRegistry, matchState} from \"./hookRegistry\";\nimport {HookBuilder} from \"./hookBuilder\";\nimport {PathNode} from \"../path/node\";\nimport {PathFactory} from \"../path/pathFactory\";\nimport {State} from \"../state/stateObject\";\nimport {TargetState} from \"../state/targetState\";\nimport {Param} from \"../params/param\";\nimport {Resolvable} from \"../resolve/resolvable\";\nimport {ViewConfig} from \"../view/interface\";\nimport {Rejection} from \"./rejectFactory\";\nimport {ResolveContext} from \"../resolve/resolveContext\";\nimport {UIRouter} from \"../router\";\nimport {Globals} from \"../globals\";\nimport {UIInjector} from \"../common/interface\";\n\n\nlet transitionCount = 0;\nconst stateSelf: (_state: State) => StateDeclaration = prop(\"self\");\n\n/**\n * Represents a transition between two states.\n *\n * When navigating to a state, we are transitioning **from** the current state **to** the new state.\n *\n * This object contains all contextual information about the to/from states, parameters, resolves.\n * It has information about all states being entered and exited as a result of the transition.\n */\nexport class Transition implements IHookRegistry {\n  static diToken = Transition;\n  \n  $id: number;\n  success: boolean;\n\n  /**\n   * A reference to the [[UIRouter]] instance\n   *\n   * This reference can be used to access the router services, such as the [[StateService]]\n   */\n  router: UIRouter;\n\n  /** @hidden */\n  private _deferred = services.$q.defer();\n  /**\n   * This promise is resolved or rejected based on the outcome of the Transition.\n   *\n   * When the transition is successful, the promise is resolved\n   * When the transition is unsuccessful, the promise is rejected with the [[TransitionRejection]] or javascript error\n   */\n  promise: Promise<any> = this._deferred.promise;\n\n  private _options: TransitionOptions;\n  private _treeChanges: TreeChanges;\n\n  /** @inheritdoc */\n  onBefore (matchCriteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions) : Function { throw \"\"; };\n  /** @inheritdoc */\n  onStart (matchCriteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions) : Function { throw \"\"; };\n  /** @inheritdoc */\n  onExit (matchCriteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions) : Function { throw \"\"; };\n  /** @inheritdoc */\n  onRetain (matchCriteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions) : Function { throw \"\"; };\n  /** @inheritdoc */\n  onEnter (matchCriteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions) : Function { throw \"\"; };\n  /** @inheritdoc */\n  onFinish (matchCriteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions) : Function { throw \"\"; };\n  /** @inheritdoc */\n  onSuccess (matchCriteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions) : Function { throw \"\"; };\n  /** @inheritdoc */\n  onError (matchCriteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions) : Function { throw \"\"; };\n\n  getHooks:   IHookGetter;\n\n  /**\n   * Creates a new Transition object.\n   *\n   * If the target state is not valid, an error is thrown.\n   *\n   * @param fromPath The path of [[PathNode]]s from which the transition is leaving.  The last node in the `fromPath`\n   *        encapsulates the \"from state\".\n   * @param targetState The target state and parameters being transitioned to (also, the transition options)\n   * @param router The [[UIRouter]] instance\n   */\n  constructor(fromPath: PathNode[], targetState: TargetState, router: UIRouter) {\n    this.router = router;\n    if (!targetState.valid()) {\n      throw new Error(targetState.error());\n    }\n\n    // Makes the Transition instance a hook registry (onStart, etc)\n    HookRegistry.mixin(new HookRegistry(), this);\n\n    // current() is assumed to come from targetState.options, but provide a naive implementation otherwise.\n    this._options = extend({ current: val(this) }, targetState.options());\n    this.$id = transitionCount++;\n    let toPath = PathFactory.buildToPath(fromPath, targetState);\n    this._treeChanges = PathFactory.treeChanges(fromPath, toPath, this._options.reloadState);\n    let enteringStates = this._treeChanges.entering.map(node => node.state);\n    PathFactory.applyViewConfigs(router.transitionService.$view, this._treeChanges.to, enteringStates);\n\n    let rootResolvables: Resolvable[] = [\n      new Resolvable(UIRouter, () => router, [], undefined, router),\n      new Resolvable(Transition, () => this, [], undefined, this),\n      new Resolvable('$transition$', () => this, [], undefined, this),\n      new Resolvable('$stateParams', () => this.params(), [], undefined, this.params())\n    ];\n\n    let rootNode: PathNode = this._treeChanges.to[0];\n    let context = new ResolveContext(this._treeChanges.to);\n    context.addResolvables(rootResolvables, rootNode.state);\n  }\n\n  $from() {\n    return tail(this._treeChanges.from).state;\n  }\n\n  $to() {\n    return tail(this._treeChanges.to).state;\n  }\n\n  /**\n   * Returns the \"from state\"\n   *\n   * @returns The state object for the Transition's \"from state\".\n   */\n  from(): StateDeclaration {\n    return this.$from().self;\n  }\n\n  /**\n   * Returns the \"to state\"\n   *\n   * @returns The state object for the Transition's target state (\"to state\").\n   */\n  to() {\n    return this.$to().self;\n  }\n\n  /**\n   * Determines whether two transitions are equivalent.\n   */\n  is(compare: (Transition|{to: any, from: any})): boolean {\n    if (compare instanceof Transition) {\n      // TODO: Also compare parameters\n      return this.is({ to: compare.$to().name, from: compare.$from().name });\n    }\n    return !(\n      (compare.to && !matchState(this.$to(), compare.to)) ||\n      (compare.from && !matchState(this.$from(), compare.from))\n    );\n  }\n\n  /**\n   * Gets transition parameter values\n   *\n   * @param pathname Pick which treeChanges path to get parameters for:\n   *   (`'to'`, `'from'`, `'entering'`, `'exiting'`, `'retained'`)\n   * @returns transition parameter values for the desired path.\n   */\n  params(pathname: string = \"to\"): { [key: string]: any } {\n    return this._treeChanges[pathname].map(prop(\"paramValues\")).reduce(mergeR, {});\n  }\n\n\n  /**\n   * Creates a [[UIInjector]] Dependency Injector\n   *\n   * Returns a Dependency Injector for the Transition's target state (to state).\n   * The injector provides resolve values which the target state has access to.\n   *\n   * The `UIInjector` can also provide values from the native root/global injector (ng1/ng2).\n   *\n   * If a `state` is provided, the injector that is returned will be limited to resolve values that the provided state has access to.\n   *\n   * @param state Limits the resolves provided to only the resolves the provided state has access to.\n   * @returns a [[UIInjector]]\n   */\n  injector(state?: StateOrName): UIInjector {\n    let path: PathNode[] = this.treeChanges().to;\n    if (state) path = PathFactory.subPath(path, node => node.state === state || node.state.name === state);\n    return new ResolveContext(path).injector();\n  }\n\n  /**\n   * Gets all available resolve tokens (keys)\n   *\n   * This method can be used in conjunction with [[getResolve]] to inspect the resolve values\n   * available to the Transition.\n   *\n   * The returned tokens include those defined on [[StateDeclaration.resolve]] blocks, for the states\n   * in the Transition's [[TreeChanges.to]] path.\n   *\n   * @returns an array of resolve tokens (keys)\n   */\n  getResolveTokens(): any[] {\n    return new ResolveContext(this._treeChanges.to).getTokens();\n  }\n\n\n  /**\n   * Gets resolved values\n   *\n   * This method can be used in conjunction with [[getResolveTokens]] to inspect what resolve values\n   * are available to the Transition.\n   *\n   * Given a token, returns the resolved data for that token.\n   * Given an array of tokens, returns an array of resolved data for those tokens.\n   *\n   * If a resolvable hasn't yet been fetched, returns `undefined` for that token\n   * If a resolvable doesn't exist for the token, throws an error.\n   *\n   * @param token the token (or array of tokens)\n   *\n   * @returns an array of resolve tokens (keys)\n   */\n  getResolveValue(token: (any|any[])): (any|any[]) {\n    let resolveContext = new ResolveContext(this._treeChanges.to);\n    const getData = token => {\n      var resolvable = resolveContext.getResolvable(token);\n      if (resolvable === undefined) {\n        throw new Error(\"Dependency Injection token not found: ${stringify(token)}\");\n      }\n      return resolvable.data;\n    };\n\n    if (isArray(token)) {\n      return token.map(getData);\n    }\n\n    return getData(token);\n  }\n\n  /**\n   * Dynamically adds a new [[Resolvable]] (`resolve`) to this transition.\n   *\n   * @param resolvable an [[Resolvable]] object\n   * @param state the state in the \"to path\" which should receive the new resolve (otherwise, the root state)\n   */\n  addResolvable(resolvable: Resolvable, state: StateOrName = \"\"): void {\n    let stateName: string = (typeof state === \"string\") ? state : state.name;\n    let topath = this._treeChanges.to;\n    let targetNode = find(topath, node => node.state.name === stateName);\n    let resolveContext: ResolveContext = new ResolveContext(topath);\n    resolveContext.addResolvables([resolvable], targetNode.state);\n  }\n\n  /**\n   * Gets the previous transition, from which this transition was redirected.\n   *\n   * @returns The previous Transition, or null if this Transition is not the result of a redirection\n   */\n  previous(): Transition {\n    return this._options.previous || null;\n  }\n\n  /**\n   * Get the transition options\n   *\n   * @returns the options for this Transition.\n   */\n  options(): TransitionOptions {\n    return this._options;\n  }\n\n  /**\n   * Gets the states being entered.\n   *\n   * @returns an array of states that will be entered during this transition.\n   */\n  entering(): StateDeclaration[] {\n    return map(this._treeChanges.entering, prop('state')).map(stateSelf);\n  }\n\n  /**\n   * Gets the states being exited.\n   *\n   * @returns an array of states that will be exited during this transition.\n   */\n  exiting(): StateDeclaration[] {\n    return map(this._treeChanges.exiting, prop('state')).map(stateSelf).reverse();\n  }\n\n  /**\n   * Gets the states being retained.\n   *\n   * @returns an array of states that are already entered from a previous Transition, that will not be\n   *    exited during this Transition\n   */\n  retained(): StateDeclaration[] {\n    return map(this._treeChanges.retained, prop('state')).map(stateSelf);\n  }\n\n  /**\n   * Get the [[ViewConfig]]s associated with this Transition\n   *\n   * Each state can define one or more views (template/controller), which are encapsulated as `ViewConfig` objects.\n   * This method fetches the `ViewConfigs` for a given path in the Transition (e.g., \"to\" or \"entering\").\n   *\n   * @param pathname the name of the path to fetch views for:\n   *   (`'to'`, `'from'`, `'entering'`, `'exiting'`, `'retained'`)\n   * @param state If provided, only returns the `ViewConfig`s for a single state in the path\n   *\n   * @returns a list of ViewConfig objects for the given path.\n   */\n  views(pathname: string = \"entering\", state?: State): ViewConfig[] {\n    let path = this._treeChanges[pathname];\n    path = !state ? path : path.filter(propEq('state', state));\n    return path.map(prop(\"views\")).filter(identity).reduce(unnestR, []);\n  }\n\n  treeChanges = () => this._treeChanges;\n\n  /**\n   * Creates a new transition that is a redirection of the current one.\n   *\n   * This transition can be returned from a [[TransitionService]] hook to\n   * redirect a transition to a new state and/or set of parameters.\n   *\n   * @returns Returns a new [[Transition]] instance.\n   */\n  redirect(targetState: TargetState): Transition {\n    let newOptions = extend({}, this.options(), targetState.options(), { previous: this });\n    targetState = new TargetState(targetState.identifier(), targetState.$state(), targetState.params(), newOptions);\n\n    let newTransition = this.router.transitionService.create(this._treeChanges.from, targetState);\n    let originalEnteringNodes = this.treeChanges().entering;\n    let redirectEnteringNodes = newTransition.treeChanges().entering;\n\n    // --- Re-use resolve data from original transition ---\n    // When redirecting from a parent state to a child state where the parent parameter values haven't changed\n    // (because of the redirect), the resolves fetched by the original transition are still valid in the\n    // redirected transition.\n    //\n    // This allows you to define a redirect on a parent state which depends on an async resolve value.\n    // You can wait for the resolve, then redirect to a child state based on the result.\n    // The redirected transition does not have to re-fetch the resolve.\n    // ---------------------------------------------------------\n\n    const nodeIsReloading = (reloadState: State) => (node: PathNode) => {\n      return reloadState && node.state.includes[reloadState.name];\n    };\n\n    // Find any \"entering\" nodes in the redirect path that match the original path and aren't being reloaded\n    let matchingEnteringNodes: PathNode[] = PathNode.matching(redirectEnteringNodes, originalEnteringNodes)\n        .filter(not(nodeIsReloading(targetState.options().reloadState)));\n\n    // Use the existing (possibly pre-resolved) resolvables for the matching entering nodes.\n    matchingEnteringNodes.forEach((node, idx) => {\n      node.resolvables = originalEnteringNodes[idx].resolvables;\n    });\n\n    return newTransition;\n  }\n\n  /** @hidden If a transition doesn't exit/enter any states, returns any [[Param]] whose value changed */\n  private _changedParams(): Param[] {\n    let {to, from} = this._treeChanges;\n    if (this._options.reload || tail(to).state !== tail(from).state) return undefined;\n\n    let nodeSchemas: Param[][] = to.map((node: PathNode) => node.paramSchema);\n    let [toValues, fromValues] = [to, from].map(path => path.map(x => x.paramValues));\n    let tuples = arrayTuples(nodeSchemas, toValues, fromValues);\n\n    return tuples.map(([schema, toVals, fromVals]) => Param.changed(schema, toVals, fromVals)).reduce(unnestR, []);\n  }\n\n  /**\n   * Returns true if the transition is dynamic.\n   *\n   * A transition is dynamic if no states are entered nor exited, but at least one dynamic parameter has changed.\n   *\n   * @returns true if the Transition is dynamic\n   */\n  dynamic(): boolean {\n    let changes = this._changedParams();\n    return !changes ? false : changes.map(x => x.dynamic).reduce(anyTrueR, false);\n  }\n\n  /**\n   * Returns true if the transition is ignored.\n   *\n   * A transition is ignored if no states are entered nor exited, and no parameter values have changed.\n   *\n   * @returns true if the Transition is ignored.\n   */\n  ignored(): boolean {\n    let changes = this._changedParams();\n    return !changes ? false : changes.length === 0;\n  }\n\n  /**\n   * @hidden\n   */\n  hookBuilder(): HookBuilder {\n    return new HookBuilder(this.router.transitionService, this, <TransitionHookOptions> {\n      transition: this,\n      current: this._options.current\n    });\n  }\n\n  /**\n   * Runs the transition\n   *\n   * This method is generally called from the [[StateService.transitionTo]]\n   *\n   * @returns a promise for a successful transition.\n   */\n  run (): Promise<any> {\n    let runSynchronousHooks = TransitionHook.runSynchronousHooks;\n    let hookBuilder = this.hookBuilder();\n    let globals = <Globals> this.router.globals;\n    globals.transitionHistory.enqueue(this);\n\n    let syncResult = runSynchronousHooks(hookBuilder.getOnBeforeHooks());\n\n    if (Rejection.isTransitionRejectionPromise(syncResult)) {\n      syncResult.catch(() => 0); // issue #2676\n      let rejectReason = (<any> syncResult)._transitionRejection;\n      this._deferred.reject(rejectReason);\n      return this.promise;\n    }\n\n    if (!this.valid()) {\n      let error = new Error(this.error());\n      this._deferred.reject(error);\n      return this.promise;\n    }\n\n    if (this.ignored()) {\n      trace.traceTransitionIgnored(this);\n      this._deferred.reject(Rejection.ignored());\n      return this.promise;\n    }\n\n    // When the chain is complete, then resolve or reject the deferred\n    const transitionSuccess = () => {\n      trace.traceSuccess(this.$to(), this);\n      this.success = true;\n      this._deferred.resolve(this.to());\n      runSynchronousHooks(hookBuilder.getOnSuccessHooks(), true);\n    };\n\n    const transitionError = (error) => {\n      trace.traceError(error, this);\n      this.success = false;\n      this._deferred.reject(error);\n      runSynchronousHooks(hookBuilder.getOnErrorHooks(), true);\n    };\n\n    trace.traceTransitionStart(this);\n\n    // Chain the next hook off the previous\n    const appendHookToChain = (prev, nextHook) =>\n        prev.then(() => nextHook.invokeHook());\n\n    // Run the hooks, then resolve or reject the overall deferred in the .then() handler\n    hookBuilder.asyncHooks()\n        .reduce(appendHookToChain, syncResult)\n        .then(transitionSuccess, transitionError);\n\n    return this.promise;\n  }\n\n  isActive = () => this === this._options.current();\n\n  /**\n   * Checks if the Transition is valid\n   *\n   * @returns true if the Transition is valid\n   */\n  valid() {\n    return !this.error();\n  }\n\n  /**\n   * The reason the Transition is invalid\n   *\n   * @returns an error message explaining why the transition is invalid\n   */\n  error() {\n    let state = this.$to();\n\n    if (state.self[abstractKey])\n      return `Cannot transition to abstract state '${state.name}'`;\n    if (!Param.validates(state.parameters(), this.params()))\n      return `Param values not valid for state '${state.name}'`;\n  }\n\n  /**\n   * A string representation of the Transition\n   *\n   * @returns A string representation of the Transition\n   */\n  toString () {\n    let fromStateOrName = this.from();\n    let toStateOrName = this.to();\n\n    const avoidEmptyHash = (params) =>\n      (params[\"#\"] !== null && params[\"#\"] !== undefined) ? params : omit(params, \"#\");\n\n    // (X) means the to state is invalid.\n    let id = this.$id,\n        from = isObject(fromStateOrName) ? fromStateOrName.name : fromStateOrName,\n        fromParams = toJson(avoidEmptyHash(this._treeChanges.from.map(prop('paramValues')).reduce(mergeR, {}))),\n        toValid = this.valid() ? \"\" : \"(X) \",\n        to = isObject(toStateOrName) ? toStateOrName.name : toStateOrName,\n        toParams = toJson(avoidEmptyHash(this.params()));\n\n    return `Transition#${id}( '${from}'${fromParams} -> ${toValid}'${to}'${toParams} )`;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./transition/transition.ts\n **/","/**\n * UI-Router Transition Tracing\n *\n * Enable transition tracing to print transition information to the console, in order to help debug your application.\n * Tracing logs detailed information about each Transition to your console.\n *\n * To enable tracing, import the [[trace]] singleton and enable one or more categories.\n *\n * ES6\n * ```\n *\n * import {trace} from \"ui-router-ng2\"; // or \"angular-ui-router\"\n * trace.enable(1, 5); // TRANSITION and VIEWCONFIG\n * ```\n *\n * CJS\n * ```\n *\n * let trace = require(\"angular-ui-router\").trace; // or \"ui-router-ng2\"\n * trace.enable(\"TRANSITION\", \"VIEWCONFIG\");\n * ```\n *\n * Globals\n * ```\n *\n * let trace = window[\"angular-ui-router\"].trace; // or \"ui-router-ng2\"\n * trace.enable(); // Trace everything (very verbose)\n * ```\n *\n * @module trace\n */ /** for typedoc */\nimport {parse} from \"../common/hof\";\nimport {isNumber} from \"../common/predicates\";\nimport {Transition}  from \"../transition/transition\";\nimport {ActiveUIView, ViewConfig}  from \"../view/interface\";\nimport {stringify, functionToString, maxLength, padString} from \"./strings\";\nimport {Resolvable} from \"../resolve/resolvable\";\nimport {PathNode} from \"../path/node\";\nimport {PolicyWhen} from \"../resolve/interface\";\n\n/** @hidden */\nfunction uiViewString (viewData) {\n    if (!viewData) return 'ui-view (defunct)';\n    return `[ui-view#${viewData.id} tag ` +\n        `in template from '${viewData.creationContext && viewData.creationContext.name || '(root)'}' state]: ` +\n        `fqn: '${viewData.fqn}', ` +\n        `name: '${viewData.name}@${viewData.creationContext}')`;\n}\n\n/** @hidden */\nconst viewConfigString = (viewConfig: ViewConfig) =>\n    `[ViewConfig#${viewConfig.$id} from '${viewConfig.viewDecl.$context.name || '(root)'}' state]: target ui-view: '${viewConfig.viewDecl.$uiViewName}@${viewConfig.viewDecl.$uiViewContextAnchor}'`;\n\n/** @hidden */\nfunction normalizedCat(input: Category): string {\n  return isNumber(input) ? Category[input] : Category[Category[input]];\n}\n\n\n/**\n * Trace categories\n *\n * [[Trace.enable]] or [[Trace.disable]] a category\n *\n * `trace.enable(Category.TRANSITION)`\n *\n * These can also be provided using a matching string, or position ordinal\n *\n * `trace.enable(\"TRANSITION\")`\n *\n * `trace.enable(1)`\n */\nexport enum Category {\n  RESOLVE, TRANSITION, HOOK, INVOKE, UIVIEW, VIEWCONFIG\n}\n\n/**\n * Prints UI-Router Transition trace information to the console.\n */\nexport class Trace {\n  approximateDigests: number;\n\n  constructor() {\n    this.approximateDigests = 0;\n  }\n\n  /** @hidden */\n  private _enabled: { [key: string]: boolean } = {};\n\n   /** @hidden */\n  private _set(enabled: boolean, categories: Category[]) {\n    if (!categories.length) {\n      categories = Object.keys(Category)\n          .filter(k => isNaN(parseInt(k, 10)))\n          .map(key => Category[key]);\n    }\n    categories.map(normalizedCat).forEach(category => this._enabled[category] = enabled);\n  }\n\n  /**\n   * Enables a trace [[Category]]\n   *\n   * ```\n   * trace.enable(\"TRANSITION\");\n   * ```\n   *\n   * @param categories categories to enable. If `categories` is omitted, all categories are enabled.\n   *        Also takes strings (category name) or ordinal (category position)\n   */\n  enable(...categories: Category[]) { this._set(true, categories) }\n  /**\n   * Disables a trace [[Category]]\n   *\n   * ```\n   * trace.disable(\"VIEWCONFIG\");\n   * ```\n   *\n   * @param categories categories to disable. If `categories` is omitted, all categories are disabled.\n   *        Also takes strings (category name) or ordinal (category position)\n   */\n  disable(...categories: Category[]) { this._set(false, categories) }\n\n  /**\n   * Retrieves the enabled stateus of a [[Category]]\n   *\n   * ```\n   * trace.enabled(\"VIEWCONFIG\"); // true or false\n   * ```\n   *\n   * @returns boolean true if the category is enabled\n   */\n  enabled(category: Category): boolean {\n    return !!this._enabled[normalizedCat(category)];\n  }\n\n  /** called by ui-router code */\n  traceTransitionStart(transition: Transition) {\n    if (!this.enabled(Category.TRANSITION)) return;\n    let tid = transition.$id,\n        digest = this.approximateDigests,\n        transitionStr = stringify(transition);\n    console.log(`Transition #${tid} Digest #${digest}: Started  -> ${transitionStr}`);\n  }\n\n  /** called by ui-router code */\n  traceTransitionIgnored(trans: Transition) {\n    if (!this.enabled(Category.TRANSITION)) return;\n    let tid = trans && trans.$id,\n        digest = this.approximateDigests,\n        transitionStr = stringify(trans);\n    console.log(`Transition #${tid} Digest #${digest}: Ignored  <> ${transitionStr}`);\n  }\n\n  /** called by ui-router code */\n  traceHookInvocation(step, options) {\n    if (!this.enabled(Category.HOOK)) return;\n    let tid = parse(\"transition.$id\")(options),\n        digest = this.approximateDigests,\n        event = parse(\"traceData.hookType\")(options) || \"internal\",\n        context = parse(\"traceData.context.state.name\")(options) || parse(\"traceData.context\")(options) || \"unknown\",\n        name = functionToString(step.fn);\n    console.log(`Transition #${tid} Digest #${digest}:   Hook -> ${event} context: ${context}, ${maxLength(200, name)}`);\n  }\n\n  /** called by ui-router code */\n  traceHookResult(hookResult, transitionResult, transitionOptions) {\n    if (!this.enabled(Category.HOOK)) return;\n    let tid = parse(\"transition.$id\")(transitionOptions),\n        digest = this.approximateDigests,\n        hookResultStr = stringify(hookResult),\n        transitionResultStr = stringify(transitionResult);\n    console.log(`Transition #${tid} Digest #${digest}:   <- Hook returned: ${maxLength(200, hookResultStr)}, transition result: ${maxLength(200, transitionResultStr)}`);\n  }\n\n  /** called by ui-router code */\n  traceResolvePath(path: PathNode[], when: PolicyWhen, trans?: Transition) {\n    if (!this.enabled(Category.RESOLVE)) return;\n    let tid = trans && trans.$id,\n        digest = this.approximateDigests,\n        pathStr = path && path.toString();\n    console.log(`Transition #${tid} Digest #${digest}:         Resolving ${pathStr} (${when})`);\n  }\n\n  /** called by ui-router code */\n  traceResolvableResolved(resolvable: Resolvable, trans?: Transition) {\n    if (!this.enabled(Category.RESOLVE)) return;\n    let tid = trans && trans.$id,\n        digest = this.approximateDigests,\n        resolvableStr = resolvable && resolvable.toString(),\n        result = stringify(resolvable.data);\n    console.log(`Transition #${tid} Digest #${digest}:               <- Resolved  ${resolvableStr} to: ${maxLength(200, result)}`);\n  }\n\n  /** called by ui-router code */\n  traceError(error, trans: Transition) {\n    if (!this.enabled(Category.TRANSITION)) return;\n    let tid = trans && trans.$id,\n        digest = this.approximateDigests,\n        transitionStr = stringify(trans);\n    console.log(`Transition #${tid} Digest #${digest}: <- Rejected ${transitionStr}, reason: ${error}`);\n  }\n\n  /** called by ui-router code */\n  traceSuccess(finalState, trans: Transition) {\n    if (!this.enabled(Category.TRANSITION)) return;\n    let tid = trans && trans.$id,\n        digest = this.approximateDigests,\n        state = finalState.name,\n        transitionStr = stringify(trans);\n    console.log(`Transition #${tid} Digest #${digest}: <- Success  ${transitionStr}, final state: ${state}`);\n  }\n\n  /** called by ui-router code */\n  traceUIViewEvent(event: string, viewData: ActiveUIView, extra = \"\") {\n    if (!this.enabled(Category.UIVIEW)) return;\n    console.log(`ui-view: ${padString(30, event)} ${uiViewString(viewData)}${extra}`);\n  }\n\n  /** called by ui-router code */\n  traceUIViewConfigUpdated(viewData: ActiveUIView, context) {\n    if (!this.enabled(Category.UIVIEW)) return;\n    this.traceUIViewEvent(\"Updating\", viewData, ` with ViewConfig from context='${context}'`);\n  }\n\n  /** called by ui-router code */\n  traceUIViewScopeCreated(viewData: ActiveUIView, newScope) {\n    if (!this.enabled(Category.UIVIEW)) return;\n    this.traceUIViewEvent(\"Created scope for\", viewData, `, scope #${newScope.$id}`);\n  }\n\n  /** called by ui-router code */\n  traceUIViewFill(viewData: ActiveUIView, html) {\n    if (!this.enabled(Category.UIVIEW)) return;\n    this.traceUIViewEvent(\"Fill\", viewData, ` with: ${maxLength(200, html)}`);\n  }\n\n  /** called by ui-router code */\n  traceViewServiceEvent(event: string, viewConfig: ViewConfig) {\n    if (!this.enabled(Category.VIEWCONFIG)) return;\n    console.log(`VIEWCONFIG: ${event} ${viewConfigString(viewConfig)}`);\n  }\n\n  /** called by ui-router code */\n  traceViewServiceUIViewEvent(event: string, viewData: ActiveUIView) {\n    if (!this.enabled(Category.VIEWCONFIG)) return;\n    console.log(`VIEWCONFIG: ${event} ${uiViewString(viewData)}`);\n  }\n}\n\n/**\n * The [[Trace]] singleton\n *\n * @example\n * ```js\n *\n * import {trace} from \"angular-ui-router\";\n * trace.enable(1, 5);\n * ```\n */\nlet trace = new Trace();\nexport {trace};\n\n\n/** WEBPACK FOOTER **\n ** ./common/trace.ts\n **/","/** @module transition */ /** for typedoc */\nimport {TransitionHookOptions, TransitionStateHookFn, HookFn, TransitionHookFn} from \"./interface\";\nimport {defaults, noop, Predicate} from \"../common/common\";\nimport {fnToString, maxLength} from \"../common/strings\";\nimport {isDefined, isPromise } from \"../common/predicates\";\nimport {pattern, val, eq, is, parse } from \"../common/hof\";\nimport {trace} from \"../common/trace\";\nimport {services} from \"../common/coreservices\";\n\nimport {Rejection} from \"./rejectFactory\";\nimport {TargetState} from \"../state/targetState\";\nimport {ResolveContext} from \"../resolve/resolveContext\";\nimport {Transition} from \"./transition\";\nimport {State} from \"../state/stateObject\";\n\nlet defaultOptions: TransitionHookOptions = {\n  async: true,\n  rejectIfSuperseded: true,\n  current: noop,\n  transition: null,\n  traceData: {},\n  bind: null\n};\n\n/** @hidden */\nexport class TransitionHook {\n  constructor(private transition: Transition,\n              private stateContext: State,\n              private hookFn: HookFn,\n              private resolveContext: ResolveContext,\n              private options: TransitionHookOptions) {\n    this.options = defaults(options, defaultOptions);\n  }\n\n  private isSuperseded = () => this.options.current() !== this.options.transition;\n\n  invokeHook(): Promise<any> {\n    let { options, hookFn, resolveContext } = this;\n    trace.traceHookInvocation(this, options);\n    if (options.rejectIfSuperseded && this.isSuperseded()) {\n      return Rejection.superseded(options.current()).toPromise();\n    }\n\n    let hookResult = hookFn.call(options.bind, this.transition, this.stateContext);\n    return this.handleHookResult(hookResult);\n  }\n\n  /**\n   * This method handles the return value of a Transition Hook.\n   *\n   * A hook can return false, a redirect (TargetState), or a promise (which may resolve to false or a redirect)\n   */\n  handleHookResult(hookResult): Promise<any> {\n    if (!isDefined(hookResult)) return undefined;\n\n    /**\n     * Handles transition superseded, transition aborted and transition redirect.\n     */\n    const mapHookResult = pattern([\n      // Transition is no longer current\n      [this.isSuperseded, () => Rejection.superseded(this.options.current()).toPromise()],\n      // If the hook returns false, abort the current Transition\n      [eq(false),         () => Rejection.aborted(\"Hook aborted transition\").toPromise()],\n      // If the hook returns a Transition, halt the current Transition and redirect to that Transition.\n      [is(TargetState),   (target) => Rejection.redirected(target).toPromise()],\n      // A promise was returned, wait for the promise and then chain another hookHandler\n      [isPromise,         (promise) => promise.then(this.handleHookResult.bind(this))]\n    ]);\n\n    let transitionResult = mapHookResult(hookResult);\n    if (transitionResult) trace.traceHookResult(hookResult, transitionResult, this.options);\n\n    return transitionResult;\n  }\n\n  toString() {\n    let { options, hookFn } = this;\n    let event = parse(\"traceData.hookType\")(options) || \"internal\",\n        context = parse(\"traceData.context.state.name\")(options) || parse(\"traceData.context\")(options) || \"unknown\",\n        name = fnToString(hookFn);\n    return `${event} context: ${context}, ${maxLength(200, name)}`;\n  }\n\n\n  /**\n   * Given an array of TransitionHooks, runs each one synchronously and sequentially.\n   *\n   * Returns a promise chain composed of any promises returned from each hook.invokeStep() call\n   */\n  static runSynchronousHooks(hooks: TransitionHook[], swallowExceptions: boolean = false): Promise<any> {\n    let results = [];\n    for (let i = 0; i < hooks.length; i++) {\n      try {\n        results.push(hooks[i].invokeHook());\n      } catch (exception) {\n        if (!swallowExceptions) {\n          return Rejection.errored(exception).toPromise();\n        }\n\n        console.error(\"Swallowed exception during synchronous hook handler: \" + exception); // TODO: What to do here?\n      }\n    }\n\n    let rejections = results.filter(Rejection.isTransitionRejectionPromise);\n    if (rejections.length) return rejections[0];\n\n    return results\n        .filter(<Predicate<any>> isPromise)\n        .reduce((chain, promise) => chain.then(val(promise)), services.$q.when());\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./transition/transitionHook.ts\n **/","/** @module state */ /** for typedoc */\n\nimport {StateDeclaration, StateOrName} from \"./interface\";\nimport {ParamsOrArray} from \"../params/interface\";\nimport {TransitionOptions} from \"../transition/interface\";\n\nimport {State} from \"./stateObject\";\n\n/**\n * @ngdoc object\n * @name ui.router.state.type:TargetState\n *\n * @description\n * Encapsulate the desired target of a transition.\n * Wraps an identifier for a state, a set of parameters, and transition options with the definition of the state.\n *\n * @param {StateOrName} _identifier  An identifier for a state. Either a fully-qualified path, or the object\n *            used to define the state.\n * @param {IState} _definition The `State` object definition.\n * @param {ParamsOrArray} _params Parameters for the target state\n * @param {TransitionOptions} _options Transition options.\n */\nexport class TargetState {\n  private _params: ParamsOrArray;\n\n  constructor(\n    private _identifier: StateOrName,\n    private _definition?: State,\n    _params: ParamsOrArray = {},\n    private _options: TransitionOptions = {}\n  ) {\n    this._params = _params || {};\n  }\n\n  name() {\n    return this._definition && this._definition.name || this._identifier;\n  }\n\n  identifier(): StateOrName {\n    return this._identifier;\n  }\n\n  params(): ParamsOrArray {\n    return this._params;\n  }\n\n  $state(): State {\n    return this._definition;\n  }\n\n  state(): StateDeclaration {\n    return this._definition && this._definition.self;\n  }\n\n  options() {\n    return this._options;\n  }\n\n  exists(): boolean {\n    return !!(this._definition && this._definition.self);\n  }\n\n  valid(): boolean {\n    return !this.error();\n  }\n\n  error(): string {\n    let base = <any> this.options().relative;\n    if (!this._definition && !!base) {\n      let stateName = base.name ? base.name : base;\n      return `Could not resolve '${this.name()}' from state '${stateName}'`;\n    }\n    if (!this._definition)\n      return `No such state '${this.name()}'`;\n    if (!this._definition.self)\n      return `State '${this.name()}' has an invalid definition`;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./state/targetState.ts\n **/","/** @module transition */ /** for typedoc */\nimport {extend, removeFrom, allTrueR, tail} from \"../common/common\";\nimport {isString, isFunction} from \"../common/predicates\";\nimport {PathNode} from \"../path/node\";\nimport {TransitionStateHookFn, TransitionHookFn} from \"./interface\";\n\nimport {\n    HookRegOptions, HookMatchCriteria, IEventHook, IHookRegistry, IHookRegistration, TreeChanges,\n    HookMatchCriterion, IMatchingNodes, HookFn\n} from \"./interface\";\nimport {Glob} from \"../common/glob\";\nimport {State} from \"../state/stateObject\";\n\n/**\n * Determines if the given state matches the matchCriteria\n *\n * @hidden\n *\n * @param state a State Object to test against\n * @param criterion\n * - If a string, matchState uses the string as a glob-matcher against the state name\n * - If an array (of strings), matchState uses each string in the array as a glob-matchers against the state name\n *   and returns a positive match if any of the globs match.\n * - If a function, matchState calls the function with the state and returns true if the function's result is truthy.\n * @returns {boolean}\n */\nexport function matchState(state: State, criterion: HookMatchCriterion) {\n  let toMatch = isString(criterion) ? [criterion] : criterion;\n\n  function matchGlobs(_state) {\n    let globStrings = <string[]> toMatch;\n    for (let i = 0; i < globStrings.length; i++) {\n      let glob = Glob.fromString(globStrings[i]);\n\n      if ((glob && glob.matches(_state.name)) || (!glob && globStrings[i] === _state.name)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  let matchFn = <any> (isFunction(toMatch) ? toMatch : matchGlobs);\n  return !!matchFn(state);\n}\n\n/** @hidden */\nexport class EventHook implements IEventHook {\n  callback: HookFn;\n  matchCriteria: HookMatchCriteria;\n  priority: number;\n  bind: any;\n\n  constructor(matchCriteria: HookMatchCriteria, callback: HookFn, options: HookRegOptions = <any>{}) {\n    this.callback = callback;\n    this.matchCriteria = extend({ to: true, from: true, exiting: true, retained: true, entering: true }, matchCriteria);\n    this.priority = options.priority || 0;\n    this.bind = options.bind || null;\n  }\n\n  private static _matchingNodes(nodes: PathNode[], criterion: HookMatchCriterion): PathNode[] {\n    if (criterion === true) return nodes;\n    let matching = nodes.filter(node => matchState(node.state, criterion));\n    return matching.length ? matching : null;\n  }\n\n  /**\n   * Determines if this hook's [[matchCriteria]] match the given [[TreeChanges]]\n   *\n   * @returns an IMatchingNodes object, or null. If an IMatchingNodes object is returned, its values\n   * are the matching [[PathNode]]s for each [[HookMatchCriterion]] (to, from, exiting, retained, entering)\n   */\n  matches(treeChanges: TreeChanges): IMatchingNodes {\n    let mc = this.matchCriteria, _matchingNodes = EventHook._matchingNodes;\n\n    let matches = {\n      to: _matchingNodes([tail(treeChanges.to)], mc.to),\n      from: _matchingNodes([tail(treeChanges.from)], mc.from),\n      exiting: _matchingNodes(treeChanges.exiting, mc.exiting),\n      retained: _matchingNodes(treeChanges.retained, mc.retained),\n      entering: _matchingNodes(treeChanges.entering, mc.entering),\n    };\n\n    // Check if all the criteria matched the TreeChanges object\n    let allMatched: boolean = [\"to\", \"from\", \"exiting\", \"retained\", \"entering\"]\n        .map(prop => matches[prop])\n        .reduce(allTrueR, true);\n\n    return allMatched ? matches : null;\n  }\n}\n\n/** @hidden */\ninterface ITransitionEvents { [key: string]: IEventHook[]; }\n\n/** @hidden Return a registration function of the requested type. */\nfunction makeHookRegistrationFn(hooks: ITransitionEvents, name: string): IHookRegistration {\n  return function (matchObject, callback, options = {}) {\n    let eventHook = new EventHook(matchObject, callback, options);\n    hooks[name].push(eventHook);\n\n    return function deregisterEventHook() {\n      removeFrom(hooks[name])(eventHook);\n    };\n  };\n}\n\n/**\n * Mixin class acts as a Transition Hook registry.\n *\n * Holds the registered [[HookFn]] objects.\n * Exposes functions to register new hooks.\n *\n * This is a Mixin class which can be applied to other objects.\n *\n * The hook registration functions are [[onBefore]], [[onStart]], [[onEnter]], [[onRetain]], [[onExit]], [[onFinish]], [[onSuccess]], [[onError]].\n *\n * This class is mixed into both the [[TransitionService]] and every [[Transition]] object.\n * Global hooks are added to the [[TransitionService]].\n * Since each [[Transition]] is itself a `HookRegistry`, hooks can also be added to individual Transitions\n * (note: the hook criteria still must match the Transition).\n */\nexport class HookRegistry implements IHookRegistry {\n  static mixin(source: HookRegistry, target: IHookRegistry) {\n    Object.keys(source._transitionEvents).concat([\"getHooks\"]).forEach(key => target[key] = source[key]);\n  }\n\n  private _transitionEvents: ITransitionEvents = {\n    onBefore: [], onStart: [], onEnter: [], onRetain: [], onExit: [], onFinish: [], onSuccess: [], onError: []\n  };\n\n  getHooks = (name: string) => this._transitionEvents[name];\n\n  /** @inheritdoc */\n  onBefore  = makeHookRegistrationFn(this._transitionEvents, \"onBefore\");\n  /** @inheritdoc */\n  onStart   = makeHookRegistrationFn(this._transitionEvents, \"onStart\");\n  /** @inheritdoc */\n  onEnter   = makeHookRegistrationFn(this._transitionEvents, \"onEnter\");\n  /** @inheritdoc */\n  onRetain  = makeHookRegistrationFn(this._transitionEvents, \"onRetain\");\n  /** @inheritdoc */\n  onExit    = makeHookRegistrationFn(this._transitionEvents, \"onExit\");\n  /** @inheritdoc */\n  onFinish  = makeHookRegistrationFn(this._transitionEvents, \"onFinish\");\n  /** @inheritdoc */\n  onSuccess = makeHookRegistrationFn(this._transitionEvents, \"onSuccess\");\n  /** @inheritdoc */\n  onError   = makeHookRegistrationFn(this._transitionEvents, \"onError\");\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./transition/hookRegistry.ts\n **/","/** @module transition */ /** for typedoc */\n\nimport {extend, tail, assertPredicate, unnestR, identity} from \"../common/common\";\nimport {isArray} from \"../common/predicates\";\n\nimport {TransitionOptions, TransitionHookOptions, IHookRegistry, TreeChanges, IEventHook, IMatchingNodes} from \"./interface\";\n\nimport {Transition} from \"./transition\";\nimport {TransitionHook} from \"./transitionHook\";\nimport {State} from \"../state/stateObject\";\nimport {PathNode} from \"../path/node\";\nimport {TransitionService} from \"./transitionService\";\nimport {ResolveContext} from \"../resolve/resolveContext\";\n\n/**\n * This class returns applicable TransitionHooks for a specific Transition instance.\n *\n * Hooks (IEventHook) may be registered globally, e.g., $transitions.onEnter(...), or locally, e.g.\n * myTransition.onEnter(...).  The HookBuilder finds matching IEventHooks (where the match criteria is\n * determined by the type of hook)\n *\n * The HookBuilder also converts IEventHooks objects to TransitionHook objects, which are used to run a Transition.\n *\n * The HookBuilder constructor is given the $transitions service and a Transition instance.  Thus, a HookBuilder\n * instance may only be used for one specific Transition object. (side note: the _treeChanges accessor is private\n * in the Transition class, so we must also provide the Transition's _treeChanges)\n *\n */\nexport class HookBuilder {\n\n  treeChanges: TreeChanges;\n  transitionOptions: TransitionOptions;\n\n  toState: State;\n  fromState: State;\n\n  constructor(private $transitions: TransitionService, private transition: Transition, private baseHookOptions: TransitionHookOptions) {\n    this.treeChanges        = transition.treeChanges();\n    this.toState            = tail(this.treeChanges.to).state;\n    this.fromState          = tail(this.treeChanges.from).state;\n    this.transitionOptions  = transition.options();\n  }\n\n  getOnBeforeHooks  = () => this._buildNodeHooks(\"onBefore\",  \"to\",       tupleSort(), { async: false });\n  getOnStartHooks   = () => this._buildNodeHooks(\"onStart\",   \"to\",       tupleSort());\n  getOnExitHooks    = () => this._buildNodeHooks(\"onExit\",    \"exiting\",  tupleSort(true),  { stateHook: true });\n  getOnRetainHooks  = () => this._buildNodeHooks(\"onRetain\",  \"retained\", tupleSort(false), { stateHook: true });\n  getOnEnterHooks   = () => this._buildNodeHooks(\"onEnter\",   \"entering\", tupleSort(false), { stateHook: true });\n  getOnFinishHooks  = () => this._buildNodeHooks(\"onFinish\",  \"to\",       tupleSort());\n  getOnSuccessHooks = () => this._buildNodeHooks(\"onSuccess\", \"to\",       tupleSort(), { async: false, rejectIfSuperseded: false });\n  getOnErrorHooks   = () => this._buildNodeHooks(\"onError\",   \"to\",       tupleSort(), { async: false, rejectIfSuperseded: false });\n\n  asyncHooks() {\n    let onStartHooks    = this.getOnStartHooks();\n    let onExitHooks     = this.getOnExitHooks();\n    let onRetainHooks   = this.getOnRetainHooks();\n    let onEnterHooks    = this.getOnEnterHooks();\n    let onFinishHooks   = this.getOnFinishHooks();\n\n    let asyncHooks = [onStartHooks, onExitHooks, onRetainHooks, onEnterHooks, onFinishHooks];\n    return asyncHooks.reduce(unnestR, []).filter(identity);\n  }\n\n  /**\n   * Returns an array of newly built TransitionHook objects.\n   *\n   * - Finds all IEventHooks registered for the given `hookType` which matched the transition's [[TreeChanges]].\n   * - Finds [[PathNode]] (or `PathNode[]`) to use as the TransitionHook context(s)\n   * - For each of the [[PathNode]]s, creates a TransitionHook\n   *\n   * @param hookType the name of the hook registration function, e.g., 'onEnter', 'onFinish'.\n   * @param matchingNodesProp selects which [[PathNode]]s from the [[IMatchingNodes]] object to create hooks for.\n   * @param getLocals a function which accepts a [[PathNode]] and returns additional locals to provide to the hook as injectables\n   * @param sortHooksFn a function which compares two HookTuple and returns <1, 0, or >1\n   * @param options any specific Transition Hook Options\n   */\n  private _buildNodeHooks(hookType: string,\n                          matchingNodesProp: string,\n                          sortHooksFn: (l: HookTuple, r: HookTuple) => number,\n                          options?: TransitionHookOptions): TransitionHook[] {\n\n    // Find all the matching registered hooks for a given hook type\n    let matchingHooks = this._matchingHooks(hookType, this.treeChanges);\n    if (!matchingHooks) return [];\n\n     const makeTransitionHooks = (hook: IEventHook) => {\n       // Fetch the Nodes that caused this hook to match.\n       let matches: IMatchingNodes = hook.matches(this.treeChanges);\n       // Select the PathNode[] that will be used as TransitionHook context objects\n       let matchingNodes: PathNode[] = matches[matchingNodesProp];\n\n       // When invoking 'exiting' hooks, give them the \"from path\" for resolve data.\n       // Everything else gets the \"to path\"\n       let resolvePath = matchingNodesProp === 'exiting' ? this.treeChanges.from : this.treeChanges.to;\n       let resolveContext = new ResolveContext(resolvePath);\n\n       // Return an array of HookTuples\n       return matchingNodes.map(node => {\n         let _options = extend({ bind: hook.bind, traceData: { hookType, context: node} }, this.baseHookOptions, options);\n         let state = _options.stateHook ? node.state : null;\n         let context = resolveContext.subContext(node.state);\n         let transitionHook = new TransitionHook(this.transition, state, hook.callback, context, _options);\n         return <HookTuple> { hook, node, transitionHook };\n       });\n    };\n\n    return matchingHooks.map(makeTransitionHooks)\n        .reduce(unnestR, [])\n        .sort(sortHooksFn)\n        .map(tuple => tuple.transitionHook);\n  }\n\n  /**\n   * Finds all IEventHooks from:\n   * - The Transition object instance hook registry\n   * - The TransitionService ($transitions) global hook registry\n   *\n   * which matched:\n   * - the eventType\n   * - the matchCriteria (to, from, exiting, retained, entering)\n   *\n   * @returns an array of matched [[IEventHook]]s\n   */\n  private _matchingHooks(hookName: string, treeChanges: TreeChanges): IEventHook[] {\n    return [ this.transition, this.$transitions ]                             // Instance and Global hook registries\n        .map((reg: IHookRegistry) => reg.getHooks(hookName))                  // Get named hooks from registries\n        .filter(assertPredicate(isArray, `broken event named: ${hookName}`))  // Sanity check\n        .reduce(unnestR, [])                                                  // Un-nest IEventHook[][] to IEventHook[] array\n        .filter(hook => hook.matches(treeChanges));                           // Only those satisfying matchCriteria\n  }\n}\n\ninterface HookTuple { hook: IEventHook, node: PathNode, transitionHook: TransitionHook }\n\n/**\n * A factory for a sort function for HookTuples.\n *\n * The sort function first compares the PathNode depth (how deep in the state tree a node is), then compares\n * the EventHook priority.\n *\n * @param reverseDepthSort a boolean, when true, reverses the sort order for the node depth\n * @returns a tuple sort function\n */\nfunction tupleSort(reverseDepthSort = false) {\n  return function nodeDepthThenPriority(l: HookTuple, r: HookTuple): number {\n    let factor = reverseDepthSort ? -1 : 1;\n    let depthDelta = (l.node.state.path.length - r.node.state.path.length) * factor;\n    return depthDelta !== 0 ? depthDelta : r.hook.priority - l.hook.priority;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./transition/hookBuilder.ts\n **/","/** @module resolve */ /** for typedoc */\nimport { find, tail, uniqR, unnestR, inArray } from \"../common/common\";\nimport {propEq} from \"../common/hof\";\nimport {trace} from \"../common/trace\";\nimport {services} from \"../common/coreservices\";\nimport {resolvePolicies, PolicyWhen} from \"./interface\";\n\nimport {PathNode} from \"../path/node\";\nimport {Resolvable} from \"./resolvable\";\nimport {State} from \"../state/stateObject\";\nimport {PathFactory} from \"../path/pathFactory\";\nimport {stringify} from \"../common/strings\";\nimport {Transition} from \"../transition/transition\";\nimport {UIInjector} from \"../common/interface\";\n\nvar when = resolvePolicies.when;\nconst ALL_WHENS = [when.EAGER, when.LAZY];\nconst EAGER_WHENS = [when.EAGER];\n\n/**\n * Encapsulates Depenency Injection for a path of nodes\n *\n * UI-Router states are organized as a tree.\n * A nested state has a path of ancestors to the root of the tree.\n * When a state is being activated, each element in the path is wrapped as a [[PathNode]].\n * A `PathNode` is a stateful object that holds things like parameters and resolvables for the state being activated.\n *\n * The ResolveContext closes over the [[PathNode]]s, and provides DI for the last node in the path.\n */\nexport class ResolveContext {\n\n  constructor(private _path: PathNode[]) { }\n\n  /** Gets all the tokens found in the resolve context, de-duplicated */\n  getTokens() {\n    return this._path.reduce((acc, node) => acc.concat(node.resolvables.map(r => r.token)), []).reduce(uniqR, []);\n  }\n\n  /**\n   * Gets the Resolvable that matches the token\n   *\n   * Gets the last Resolvable that matches the token in this context, or undefined.\n   * Throws an error if it doesn't exist in the ResolveContext\n   */\n  getResolvable(token): Resolvable {\n    var matching = this._path.map(node => node.resolvables)\n        .reduce(unnestR, [])\n        .filter((r: Resolvable) => r.token === token);\n    return tail(matching);\n  }\n\n  /**\n   * Returns a ResolveContext that includes a portion of this one\n   *\n   * Given a state, this method creates a new ResolveContext from this one.\n   * The new context starts at the first node (root) and stops at the node for the `state` parameter.\n   *\n   * #### Why\n   *\n   * When a transition is created, the nodes in the \"To Path\" are injected from a ResolveContext.\n   * A ResolveContext closes over a path of [[PathNode]]s and processes the resolvables.\n   * The \"To State\" can inject values from its own resolvables, as well as those from all its ancestor state's (node's).\n   * This method is used to create a narrower context when injecting ancestor nodes.\n   *\n   * @example\n   * `let ABCD = new ResolveContext([A, B, C, D]);`\n   *\n   * Given a path `[A, B, C, D]`, where `A`, `B`, `C` and `D` are nodes for states `a`, `b`, `c`, `d`:\n   * When injecting `D`, `D` should have access to all resolvables from `A`, `B`, `C`, `D`.\n   * However, `B` should only be able to access resolvables from `A`, `B`.\n   *\n   * When resolving for the `B` node, first take the full \"To Path\" Context `[A,B,C,D]` and limit to the subpath `[A,B]`.\n   * `let AB = ABCD.subcontext(a)`\n   */\n  subContext(state: State): ResolveContext {\n    return new ResolveContext(PathFactory.subPath(this._path, node => node.state === state));\n  }\n\n  /**\n   * Adds Resolvables to the node that matches the state\n   *\n   * This adds a [[Resolvable]] (generally one created on the fly; not declared on a [[StateDeclaration.resolve]] block).\n   * The resolvable is added to the node matching the `state` parameter.\n   *\n   * These new resolvables are not automatically fetched.\n   * The calling code should either fetch them, fetch something that depends on them,\n   * or rely on [[resolvePath]] being called when some state is being entered.\n   *\n   * Note: each resolvable's [[ResolvePolicy]] is merged with the state's policy, and the global default.\n   *\n   * @param newResolvables the new Resolvables\n   * @param state Used to find the node to put the resolvable on\n   */\n  addResolvables(newResolvables: Resolvable[], state: State) {\n    var node = <PathNode> find(this._path, propEq('state', state));\n    var keys = newResolvables.map(r => r.token);\n    node.resolvables = node.resolvables.filter(r => keys.indexOf(r.token) === -1).concat(newResolvables);\n  }\n  \n  /**\n   * Returns a promise for an array of resolved path Element promises\n   *\n   * @param when\n   * @param trans\n   * @returns {Promise<any>|any}\n   */\n  resolvePath(when: PolicyWhen = \"LAZY\", trans?: Transition): Promise<{ token: any, value: any }[]> {\n    // This option determines which 'when' policy Resolvables we are about to fetch.\n    let whenOption: string = inArray(ALL_WHENS, when) ? when : \"LAZY\";\n    // If the caller specified EAGER, only the EAGER Resolvables are fetched.\n    // if the caller specified LAZY, both EAGER and LAZY Resolvables are fetched.`\n    let matchedWhens = whenOption === resolvePolicies.when.EAGER ? EAGER_WHENS : ALL_WHENS;\n    \n    // get the subpath to the state argument, if provided\n    trace.traceResolvePath(this._path, when, trans);\n\n    let promises: Promise<any>[] = this._path.reduce((acc, node) => {\n      const matchesRequestedPolicy = (resolvable: Resolvable) =>\n          inArray(matchedWhens, resolvable.getPolicy(node.state).when);\n      let nodeResolvables = node.resolvables.filter(matchesRequestedPolicy);\n      let subContext = this.subContext(node.state);\n\n      // For the matching Resolvables, start their async fetch process.\n      var getResult = (r: Resolvable) => r.get(subContext, trans)\n          // Return a tuple that includes the Resolvable's token\n          .then(value => ({ token: r.token, value: value }));\n      return acc.concat(nodeResolvables.map(getResult));\n    }, []);\n\n    return services.$q.all(promises);\n  }\n\n  injector(): UIInjector {\n    return new UIInjectorImpl(this);\n  }\n\n  findNode(resolvable: Resolvable): PathNode {\n    return find(this._path, (node: PathNode) => inArray(node.resolvables, resolvable));\n  }\n\n  /**\n   * Gets the async dependencies of a Resolvable\n   *\n   * Given a Resolvable, returns its dependencies as a Resolvable[]\n   */\n  getDependencies(resolvable: Resolvable): Resolvable[] {\n    let node = this.findNode(resolvable);\n    // Find which other resolvables are \"visible\" to the `resolvable` argument\n    // subpath stopping at resolvable's node, or the whole path (if the resolvable isn't in the path)\n    var subPath: PathNode[] = PathFactory.subPath(this._path, x => x === node) || this._path;\n    var availableResolvables: Resolvable[] = subPath\n        .reduce((acc, node) => acc.concat(node.resolvables), []) //all of subpath's resolvables\n        .filter(res => res !== resolvable); // filter out the `resolvable` argument\n\n    const getDependency = token => {\n      let matching = availableResolvables.filter(r => r.token === token);\n      if (matching.length) return tail(matching);\n\n      let fromInjector = services.$injector.get(token);\n      if (!fromInjector) {\n        throw new Error(\"Could not find Dependency Injection token: \" + stringify(token));\n      }\n\n      return new Resolvable(token, () => fromInjector, [], fromInjector);\n    };\n\n    return resolvable.deps.map(getDependency);\n  }\n}\n\nclass UIInjectorImpl implements UIInjector {\n  constructor(public context: ResolveContext) { }\n  get(token: any) {\n    var resolvable = this.context.getResolvable(token);\n    if (resolvable) {\n      if (!resolvable.resolved) {\n        throw new Error(\"Resolvable async .get() not complete:\" + stringify(resolvable.token))\n      }\n      return resolvable.data;\n    }\n    return services.$injector.get(token);\n  }\n\n  getAsync(token: any) {\n    var resolvable = this.context.getResolvable(token);\n    if (resolvable) return resolvable.get(this.context);\n    return services.$q.when(services.$injector.get(token));\n  }\n  \n  /** The native injector ($injector on ng1, Root Injector on ng2, justjs injector for everything else) */\n  native = services.$injector;\n}\n\n\n/** WEBPACK FOOTER **\n ** ./resolve/resolveContext.ts\n **/","/** @module resolve */ /** for typedoc */\nimport {Resolvable} from \"./resolvable\";\n\nexport interface Resolvables {\n  [key: string]: Resolvable;\n}\n\n/**\n * A plain object used to describe a [[Resolvable]]\n *\n * These objects may be defined in [[StateDefinition.resolve]] blocks to declare\n * async data that the state or substates require.\n */\nexport interface ResolvableLiteral {\n  /** The Dependency Injection token that will be used to inject/access the resolvable */\n  token: any;\n\n  /**\n   * The function that returns one of:\n   *\n   * - The resolved value (synchronously)\n   * - A promise for the resolved value\n   * - An Observable of the resolved value(s)\n   *\n   * This function will be provided the dependencies listed in [[deps]] as its arguments.\n   * The resolve system will asynchronously fetch the dependencies before invoking this function.\n   */\n  resolveFn: Function;\n\n  /** A policy that defines when to invoke the resolve, and whether to wait for async and unwrap the data */\n  policy?: ResolvePolicy;\n\n  /**\n   * The Dependency Injection tokens for dependencies of the [[resolveFn]].\n   * The DI tokens are references to other `Resolvables`, or to global services.\n   */\n  deps?: any[];\n\n  /** Pre-resolved value. */\n  data?: any\n}\n\n/**\n * Defines how a resolve is processed during a transition\n *\n * @example\n * ```js\n *\n * // Fetched when the resolve's state is being entered.\n * // Wait for the promise to resolve.\n * var policy1 = { when: \"LAZY\", async: \"WAIT\" }\n *\n * // Fetched when the Transition is starting.\n * // Do not wait for the returned promise to resolve.\n * // Inject the raw promise/value\n * var policy2 = { when: \"EAGER\", async: \"NOWAIT\" }\n * ```\n *\n * The policy for a given Resolvable is merged from three sources (highest priority first):\n *\n * 1) Individual resolve definition\n * 2) State definition\n * 3) Global default\n *\n * @example\n * ```js\n *\n * // Wait for an Observable to emit one item.\n * // Since `wait` is not specified, it uses the `wait`\n * // policy defined on the state, or the global default\n * // if no `wait` policy is defined on the state\n * var myResolvablePolicy = { async: \"RXWAIT\" }\n * ```\n */\nexport interface ResolvePolicy {\n  /**\n   * Defines when a Resolvable is resolved (fetched) during a transition\n   *\n   * - `LAZY` (default) resolved as the resolve's state is being entered\n   * - `EAGER` resolved as the transition is starting\n   */\n  when?: PolicyWhen;\n\n  /**\n   * Determines the unwrapping behavior of asynchronous resolve values.\n   *\n   * - `WAIT` (default) if a promise is returned from the resolveFn, wait for the promise before proceeding\n   * - `NOWAIT` if a promise is returned from the resolve, do not wait for the promise.\n   *            The promise will not be unwrapped.\n   *            The promise itself will be provided when the resolve is injected or bound elsewhere.\n   * - `RXWAIT` When an Observable is returned from the resolveFn, wait until the Observable emits at least one item.\n   *            The Observable item will not be unwrapped.\n   *            The Observable stream itself will be provided when the resolve is injected or bound elsewhere.\n   */\n  async?: PolicyAsync;\n}\n\nexport type PolicyWhen = \"LAZY\" | \"EAGER\" ;\nexport type PolicyAsync = \"WAIT\" | \"NOWAIT\" | \"RXWAIT\" ;\n\nexport let resolvePolicies = {\n  when: {\n    LAZY: \"LAZY\",\n    EAGER: \"EAGER\"\n  },\n  async: {\n    WAIT: \"WAIT\",\n    NOWAIT: \"NOWAIT\",\n    RXWAIT: \"RXWAIT\"\n  }\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./resolve/interface.ts\n **/","/** @module resolve */ /** for typedoc */\nimport {extend, equals, inArray} from \"../common/common\";\nimport {services} from \"../common/coreservices\";\nimport {trace} from \"../common/trace\";\nimport {ResolvePolicy, ResolvableLiteral, resolvePolicies} from \"./interface\";\n\nimport {ResolveContext} from \"./resolveContext\";\nimport {stringify} from \"../common/strings\";\nimport {isFunction, isObject} from \"../common/predicates\";\nimport {Transition} from \"../transition/transition\";\nimport {State} from \"../state/stateObject\";\nimport {PathNode} from \"../path/node\";\n\n\n// TODO: explicitly make this user configurable\nexport let defaultResolvePolicy: ResolvePolicy = {\n  when: \"LAZY\",\n  async: \"WAIT\"\n};\n\n/**\n * The basic building block for the resolve system.\n *\n * Resolvables encapsulate a state's resolve's resolveFn, the resolveFn's declared dependencies, the wrapped (.promise),\n * and the unwrapped-when-complete (.data) result of the resolveFn.\n *\n * Resolvable.get() either retrieves the Resolvable's existing promise, or else invokes resolve() (which invokes the\n * resolveFn) and returns the resulting promise.\n *\n * Resolvable.get() and Resolvable.resolve() both execute within a context path, which is passed as the first\n * parameter to those fns.\n */\nexport class Resolvable implements ResolvableLiteral {\n  token: any;\n  policy: ResolvePolicy;\n  resolveFn: Function;\n  deps: any[];\n\n  data: any;\n  resolved: boolean = false;\n  promise: Promise<any> = undefined;\n\n  /** This constructor creates a Resolvable copy */\n  constructor(resolvable: Resolvable)\n\n  /** This constructor creates a new Resolvable from the plain old [[ResolvableLiteral]] javascript object */\n  constructor(resolvable: ResolvableLiteral)\n\n  /** \n   * This constructor creates a new `Resolvable`\n   *\n   * @example\n   * ```js\n   *\n   * var resolvable1 = new Resolvable('mytoken', http => http.get('foo.json').toPromise(), [Http]);\n   *\n   * var resolvable2 = new Resolvable(UserService, dep => new UserService(dep.data), [SomeDependency]);\n   *\n   * var resolvable1Clone = new Resolvable(resolvable1);\n   * ```\n   *\n   * @param token The new resolvable's injection token, such as `\"userList\"` (a string) or `UserService` (a class).\n   *              When this token is used during injection, the resolved value will be injected.\n   * @param resolveFn The function that returns the resolved value, or a promise for the resolved value\n   * @param deps An array of dependencies, which will be injected into the `resolveFn`\n   * @param policy the [[ResolvePolicy]] defines when and how the Resolvable is processed\n   * @param data Pre-resolved data. If the resolve value is already known, it may be provided here.\n   */\n  constructor(token: any, resolveFn: Function, deps?: any[], policy?: ResolvePolicy, data?: any)\n  constructor(arg1: any, resolveFn?: Function, deps?: any[], policy?: ResolvePolicy, data?: any) {\n    if (arg1 instanceof Resolvable) {\n      extend(this, arg1);\n    } else if (isFunction(resolveFn)) {\n      if (arg1 == null || arg1 == undefined) throw new Error(\"new Resolvable(): token argument is required\");\n      if (!isFunction(resolveFn)) throw new Error(\"new Resolvable(): resolveFn argument must be a function\");\n\n      this.token = arg1;\n      this.policy = policy;\n      this.resolveFn = resolveFn;\n      this.deps = deps || [];\n\n      this.data = data;\n      this.resolved = data !== undefined;\n      this.promise = this.resolved ? services.$q.when(this.data) : undefined;\n    } else if (isObject(arg1) && arg1.token && isFunction(arg1.resolveFn)) {\n      let literal = <ResolvableLiteral> arg1;\n      return new Resolvable(literal.token, literal.resolveFn, literal.deps, literal.policy, literal.data);\n    }\n  }\n\n  getPolicy(state:State): ResolvePolicy {\n    let thisPolicy = this.policy || {};\n    let statePolicy = state && state.resolvePolicy || {};\n    return {\n      when: thisPolicy.when || statePolicy.when || defaultResolvePolicy.when,\n      async: thisPolicy.async || statePolicy.async || defaultResolvePolicy.async,\n    }\n  }\n\n  /**\n   * Asynchronously resolve this Resolvable's data\n   *\n   * Given a ResolveContext that this Resolvable is found in:\n   * Wait for this Resolvable's dependencies, then invoke this Resolvable's function\n   * and update the Resolvable's state\n   */\n  resolve(resolveContext: ResolveContext, trans?: Transition) {\n    let $q = services.$q;\n\n    // Gets all dependencies from ResolveContext and wait for them to be resolved\n    const getResolvableDependencies = () =>\n        $q.all(resolveContext.getDependencies(this).map(r =>\n            r.get(resolveContext, trans)));\n\n    // Invokes the resolve function passing the resolved dependencies as arguments\n    const invokeResolveFn = resolvedDeps =>\n        this.resolveFn.apply(null, resolvedDeps);\n\n    /**\n     * For RXWAIT policy:\n     *\n     * Given an observable returned from a resolve function:\n     * - enables .cache() mode (this allows multicast subscribers)\n     * - then calls toPromise() (this triggers subscribe() and thus fetches)\n     * - Waits for the promise, then return the cached observable (not the first emitted value).\n     */\n    const waitForRx = observable$ => {\n      let cached = observable$.cache();\n      return cached.toPromise().then(() => cached);\n    };\n\n    // If the resolve policy is RXWAIT, wait for the observable to emit something. otherwise pass through.\n    let node: PathNode = resolveContext.findNode(this);\n    let state: State = node && node.state;\n    let maybeWaitForRx = this.getPolicy(state).async === \"RXWAIT\" ? waitForRx : x => x;\n\n    // After the final value has been resolved, update the state of the Resolvable\n    const applyResolvedValue = resolvedValue => {\n      this.data = resolvedValue;\n      this.resolved = true;\n      trace.traceResolvableResolved(this, trans);\n      return this.data;\n    };\n\n    // Sets the promise property first, then getsResolvableDependencies in the context of the promise chain. Always waits one tick.\n    return this.promise = $q.when()\n        .then(getResolvableDependencies)\n        .then(invokeResolveFn)\n        .then(maybeWaitForRx)\n        .then(applyResolvedValue);\n  }\n\n  /**\n   * Gets a promise for this Resolvable's data.\n   *\n   * Fetches the data and returns a promise.\n   * Returns the existing promise if it has already been fetched once.\n   */\n  get(resolveContext: ResolveContext, trans?: Transition): Promise<any> {\n    return this.promise || this.resolve(resolveContext, trans);\n  }\n\n  toString() {\n    return `Resolvable(token: ${stringify(this.token)}, requires: [${this.deps.map(stringify)}])`;\n  }\n\n  clone(): Resolvable {\n    return new Resolvable(this);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./resolve/resolvable.ts\n **/","/** @module path */ /** for typedoc */\n\nimport {extend, find, pick, omit, tail, mergeR, values, unnestR, Predicate, inArray} from \"../common/common\";\nimport {prop, propEq, not} from \"../common/hof\";\n\nimport {RawParams} from \"../params/interface\";\nimport {TreeChanges} from \"../transition/interface\";\nimport {ViewConfig} from \"../view/interface\";\nimport {_ViewDeclaration} from \"../state/interface\";\n\nimport {State} from \"../state/stateObject\";\nimport {TargetState} from \"../state/targetState\";\nimport {PathNode} from \"../path/node\";\nimport {ViewService} from \"../view/view\";\n\n/**\n * This class contains functions which convert TargetStates, Nodes and paths from one type to another.\n */\nexport class PathFactory {\n\n  constructor() { }\n\n  /** Given a PathNode[], create an TargetState */\n  static makeTargetState(path: PathNode[]): TargetState {\n    let state = tail(path).state;\n    return new TargetState(state, state, path.map(prop(\"paramValues\")).reduce(mergeR, {}));\n  }\n\n  static buildPath(targetState: TargetState) {\n    let toParams = targetState.params();\n    return targetState.$state().path.map(state => new PathNode(state).applyRawParams(toParams));\n  }\n\n  /** Given a fromPath: PathNode[] and a TargetState, builds a toPath: PathNode[] */\n  static buildToPath(fromPath: PathNode[], targetState: TargetState): PathNode[] {\n    let toPath: PathNode[] = PathFactory.buildPath(targetState);\n    if (targetState.options().inherit) {\n      return PathFactory.inheritParams(fromPath, toPath, Object.keys(targetState.params()));\n    }\n    return toPath;\n  }\n\n  /**\n   * Creates ViewConfig objects and adds to nodes.\n   *\n   * On each [[PathNode]], creates ViewConfig objects from the views: property of the node's state\n   */\n  static applyViewConfigs($view: ViewService, path: PathNode[], states: State[]) {\n    // Only apply the viewConfigs to the nodes for the given states\n    path.filter(node => inArray(states, node.state)).forEach(node => {\n      let viewDecls: _ViewDeclaration[] = values(node.state.views || {});\n      let subPath = PathFactory.subPath(path, n => n === node);\n      let viewConfigs: ViewConfig[][] = viewDecls.map(view => $view.createViewConfig(subPath, view));\n      node.views = viewConfigs.reduce(unnestR, []);\n    });\n  }\n\n  /**\n   * Given a fromPath and a toPath, returns a new to path which inherits parameters from the fromPath\n   *\n   * For a parameter in a node to be inherited from the from path:\n   * - The toPath's node must have a matching node in the fromPath (by state).\n   * - The parameter name must not be found in the toKeys parameter array.\n   *\n   * Note: the keys provided in toKeys are intended to be those param keys explicitly specified by some\n   * caller, for instance, $state.transitionTo(..., toParams).  If a key was found in toParams,\n   * it is not inherited from the fromPath.\n   */\n  static inheritParams(fromPath: PathNode[], toPath: PathNode[], toKeys: string[] = []): PathNode[] {\n    function nodeParamVals(path: PathNode[], state: State): RawParams {\n      let node: PathNode = find(path, propEq('state', state));\n      return extend({}, node && node.paramValues);\n    }\n\n    /**\n     * Given an [[PathNode]] \"toNode\", return a new [[PathNode]] with param values inherited from the\n     * matching node in fromPath.  Only inherit keys that aren't found in \"toKeys\" from the node in \"fromPath\"\"\n     */\n    function makeInheritedParamsNode(toNode: PathNode): PathNode {\n      // All param values for the node (may include default key/vals, when key was not found in toParams)\n      let toParamVals = extend({}, toNode && toNode.paramValues);\n      // limited to only those keys found in toParams\n      let incomingParamVals = pick(toParamVals, toKeys);\n      toParamVals = omit(toParamVals, toKeys);\n      let fromParamVals = nodeParamVals(fromPath, toNode.state) || {};\n      // extend toParamVals with any fromParamVals, then override any of those those with incomingParamVals\n      let ownParamVals: RawParams = extend(toParamVals, fromParamVals, incomingParamVals);\n      return new PathNode(toNode.state).applyRawParams(ownParamVals);\n    }\n\n    // The param keys specified by the incoming toParams\n    return <PathNode[]> toPath.map(makeInheritedParamsNode);\n  }\n\n  /**\n   * Computes the tree changes (entering, exiting) between a fromPath and toPath.\n   */\n  static treeChanges(fromPath: PathNode[], toPath: PathNode[], reloadState: State): TreeChanges {\n    let keep = 0, max = Math.min(fromPath.length, toPath.length);\n    const staticParams = (state) => state.parameters({ inherit: false }).filter(not(prop('dynamic'))).map(prop('id'));\n    const nodesMatch = (node1: PathNode, node2: PathNode) => node1.equals(node2, staticParams(node1.state));\n\n    while (keep < max && fromPath[keep].state !== reloadState && nodesMatch(fromPath[keep], toPath[keep])) {\n      keep++;\n    }\n\n    /** Given a retained node, return a new node which uses the to node's param values */\n    function applyToParams(retainedNode: PathNode, idx: number): PathNode {\n      let cloned = PathNode.clone(retainedNode);\n      cloned.paramValues = toPath[idx].paramValues;\n      return cloned;\n    }\n\n    let from: PathNode[], retained: PathNode[], exiting: PathNode[], entering: PathNode[], to: PathNode[];\n\n    from                  = fromPath;\n    retained              = from.slice(0, keep);\n    exiting               = from.slice(keep);\n\n    // Create a new retained path (with shallow copies of nodes) which have the params of the toPath mapped\n    let retainedWithToParams  = retained.map(applyToParams);\n    entering              = toPath.slice(keep);\n    to                    = (retainedWithToParams).concat(entering);\n\n    return { from, to, retained, exiting, entering };\n  }\n\n  /**\n   * Return a subpath of a path, which stops at the first matching node\n   *\n   * Given an array of nodes, returns a subset of the array starting from the first node,\n   * stopping when the first node matches the predicate.\n   *\n   * @param path a path of [[PathNode]]s\n   * @param predicate a [[Predicate]] fn that matches [[PathNode]]s\n   * @returns a subpath up to the matching node, or undefined if no match is found\n   */\n  static subPath(path: PathNode[], predicate: Predicate<PathNode>): PathNode[] {\n    let node = find(path, predicate);\n    let elementIdx = path.indexOf(node);\n    return elementIdx === -1 ? undefined : path.slice(0, elementIdx + 1);\n  }\n\n  /** Gets the raw parameter values from a path */\n  static paramValues = (path: PathNode[]) => path.reduce((acc, node) => extend(acc, node.paramValues), {});\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./path/pathFactory.ts\n **/","/** @module path */ /** for typedoc */\nimport {extend, applyPairs, find, allTrueR} from \"../common/common\";\nimport {prop, propEq} from \"../common/hof\";\nimport {State} from \"../state/stateObject\";\nimport {RawParams} from \"../params/interface\";\nimport {Param} from \"../params/param\";\nimport {Resolvable} from \"../resolve/resolvable\";\nimport {ViewConfig} from \"../view/interface\";\n\n/**\n * A node in a [[TreeChanges]] path\n *\n * For a [[TreeChanges]] path, this class holds the stateful information for a single node in the path.\n * Each PathNode corresponds to a state being entered, exited, or retained.\n * The stateful information includes parameter values and resolve data.\n */\nexport class PathNode {\n  /** The state being entered, exited, or retained */\n  public state: State;\n  /** The parameters declared on the state */\n  public paramSchema: Param[];\n  /** The parameter values that belong to the state */\n  public paramValues: { [key: string]: any };\n  /** The individual (stateful) resolvable objects that belong to the state */\n  public resolvables: Resolvable[];\n  /** The state's declared view configuration objects */\n  public views: ViewConfig[];\n\n  /** Creates a copy of a PathNode */\n  constructor(state: PathNode);\n  /** Creates a new (empty) PathNode for a State */\n  constructor(state: State);\n  constructor(state) {\n    if (state instanceof PathNode) {\n      let node: PathNode = state;\n      this.state = node.state;\n      this.paramSchema = node.paramSchema.slice();\n      this.paramValues = extend({}, node.paramValues);\n      this.resolvables = node.resolvables.slice();\n      this.views = node.views && node.views.slice();\n    } else {\n      this.state = state;\n      this.paramSchema = state.parameters({ inherit: false });\n      this.paramValues = {};\n      this.resolvables = state.resolvables.map(res => res.clone());\n    }\n  }\n\n  /** Sets [[paramValues]] for the node, from the values of an object hash */\n  applyRawParams(params: RawParams): PathNode {\n    const getParamVal = (paramDef: Param) => [ paramDef.id, paramDef.value(params[paramDef.id]) ];\n    this.paramValues = this.paramSchema.reduce((memo, pDef) => applyPairs(memo, getParamVal(pDef)), {});\n    return this;\n  }\n\n  /** Gets a specific [[Param]] metadata that belongs to the node */\n  parameter(name: string): Param {\n    return find(this.paramSchema, propEq(\"id\", name));\n  }\n\n  /**\n   * @returns true if the state and parameter values for another PathNode are\n   * equal to the state and param values for this PathNode\n   */\n  equals(node: PathNode, keys = this.paramSchema.map(prop('id'))): boolean {\n    const paramValsEq = key => this.parameter(key).type.equals(this.paramValues[key], node.paramValues[key]);\n    return this.state === node.state && keys.map(paramValsEq).reduce(allTrueR, true);\n  }\n\n  /** Returns a clone of the PathNode */\n  static clone(node: PathNode) {\n    return new PathNode(node);\n  }\n\n  /**\n   * Returns a new path which is a subpath of the first path which matched the second path.\n   *\n   * The new path starts from root and contains any nodes that match the nodes in the second path.\n   * Nodes are compared using their state property and parameter values.\n   */\n  static matching(pathA: PathNode[], pathB: PathNode[]): PathNode[] {\n    let matching = [];\n\n    for (let i = 0; i < pathA.length && i < pathB.length; i++) {\n      let a = pathA[i], b = pathB[i];\n\n      if (a.state !== b.state) break;\n      if (!Param.equals(a.paramSchema, a.paramValues, b.paramValues)) break;\n      matching.push(a);\n    }\n\n    return matching\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./path/node.ts\n **/","/** @module params */ /** for typedoc */\nimport {extend, filter, map, applyPairs, allTrueR} from \"../common/common\";\nimport {prop, propEq} from \"../common/hof\";\nimport {isInjectable, isDefined, isString, isArray} from \"../common/predicates\";\nimport {RawParams} from \"../params/interface\";\nimport {services} from \"../common/coreservices\";\nimport {matcherConfig} from \"../url/urlMatcherConfig\";\nimport {ParamType} from \"./type\";\nimport {paramTypes} from \"./paramTypes\";\n\nlet hasOwn = Object.prototype.hasOwnProperty;\nlet isShorthand = cfg => [\"value\", \"type\", \"squash\", \"array\", \"dynamic\"].filter(hasOwn.bind(cfg || {})).length === 0;\n\nexport enum DefType {\n  PATH, SEARCH, CONFIG\n}\n\nfunction unwrapShorthand(cfg) {\n  cfg = isShorthand(cfg) && { value: cfg } || cfg;\n\n  return extend(cfg, {\n    $$fn: isInjectable(cfg.value) ? cfg.value : () => cfg.value\n  });\n}\n\nfunction getType(cfg, urlType, location, id) {\n  if (cfg.type && urlType && urlType.name !== 'string') throw new Error(`Param '${id}' has two type configurations.`);\n  if (cfg.type && urlType && urlType.name === 'string' && paramTypes.type(cfg.type)) return paramTypes.type(cfg.type);\n  if (urlType) return urlType;\n  if (!cfg.type) return (location === DefType.CONFIG ? paramTypes.type(\"any\") : paramTypes.type(\"string\"));\n  return cfg.type instanceof ParamType ? cfg.type : paramTypes.type(cfg.type);\n}\n\n/**\n * returns false, true, or the squash value to indicate the \"default parameter url squash policy\".\n */\nfunction getSquashPolicy(config, isOptional) {\n  let squash = config.squash;\n  if (!isOptional || squash === false) return false;\n  if (!isDefined(squash) || squash == null) return matcherConfig.defaultSquashPolicy();\n  if (squash === true || isString(squash)) return squash;\n  throw new Error(`Invalid squash policy: '${squash}'. Valid policies: false, true, or arbitrary string`);\n}\n\nfunction getReplace(config, arrayMode, isOptional, squash) {\n  let replace, configuredKeys, defaultPolicy = [\n    {from: \"\", to: (isOptional || arrayMode ? undefined : \"\")},\n    {from: null, to: (isOptional || arrayMode ? undefined : \"\")}\n  ];\n  replace = isArray(config.replace) ? config.replace : [];\n  if (isString(squash)) replace.push({ from: squash, to: undefined });\n  configuredKeys = map(replace, prop(\"from\"));\n  return filter(defaultPolicy, item => configuredKeys.indexOf(item.from) === -1).concat(replace);\n}\n\n\nexport class Param {\n  id: string;\n  type: ParamType;\n  location: DefType;\n  array: boolean;\n  squash: (boolean|string);\n  replace: any;\n  isOptional: boolean;\n  dynamic: boolean;\n  config: any;\n\n  constructor(id: string, type: ParamType, config: any, location: DefType) {\n    config = unwrapShorthand(config);\n    type = getType(config, type, location, id);\n    let arrayMode = getArrayMode();\n    type = arrayMode ? type.$asArray(arrayMode, location === DefType.SEARCH) : type;\n    let isOptional = config.value !== undefined;\n    let dynamic = isDefined(config.dynamic) ? !!config.dynamic : !!type.dynamic;\n    let squash = getSquashPolicy(config, isOptional);\n    let replace = getReplace(config, arrayMode, isOptional, squash);\n\n    // array config: param name (param[]) overrides default settings.  explicit config overrides param name.\n    function getArrayMode() {\n      let arrayDefaults = { array: (location === DefType.SEARCH ? \"auto\" : false) };\n      let arrayParamNomenclature = id.match(/\\[\\]$/) ? { array: true } : {};\n      return extend(arrayDefaults, arrayParamNomenclature, config).array;\n    }\n\n    extend(this, {id, type, location, squash, replace, isOptional, dynamic, config, array: arrayMode});\n  }\n\n  isDefaultValue(value: any): boolean {\n    return this.isOptional && this.type.equals(this.value(), value);\n  }\n\n  /**\n   * [Internal] Gets the decoded representation of a value if the value is defined, otherwise, returns the\n   * default value, which may be the result of an injectable function.\n   */\n  value(value?: any): any {\n    /**\n     * [Internal] Get the default value of a parameter, which may be an injectable function.\n     */\n    const $$getDefaultValue = () => {\n      if (!services.$injector) throw new Error(\"Injectable functions cannot be called at configuration time\");\n      let defaultValue = services.$injector.invoke(this.config.$$fn);\n      if (defaultValue !== null && defaultValue !== undefined && !this.type.is(defaultValue))\n        throw new Error(`Default value (${defaultValue}) for parameter '${this.id}' is not an instance of ParamType (${this.type.name})`);\n      return defaultValue;\n    };\n\n    const $replace = (val) => {\n      let replacement: any = map(filter(this.replace, propEq('from', val)), prop(\"to\"));\n      return replacement.length ? replacement[0] : val;\n    };\n\n    value = $replace(value);\n    return !isDefined(value) ? $$getDefaultValue() : this.type.$normalize(value);\n  }\n\n  isSearch(): boolean {\n    return this.location === DefType.SEARCH;\n  }\n\n  validates(value: any): boolean {\n    // There was no parameter value, but the param is optional\n    if ((!isDefined(value) || value === null) && this.isOptional) return true;\n\n    // The value was not of the correct ParamType, and could not be decoded to the correct ParamType\n    const normalized = this.type.$normalize(value);\n    if (!this.type.is(normalized)) return false;\n\n    // The value was of the correct type, but when encoded, did not match the ParamType's regexp\n    const encoded = this.type.encode(normalized);\n    return !(isString(encoded) && !this.type.pattern.exec(<string> encoded));\n  }\n\n  toString() {\n    return `{Param:${this.id} ${this.type} squash: '${this.squash}' optional: ${this.isOptional}}`;\n  }\n\n  /** Creates a new [[Param]] from a CONFIG block */\n  static fromConfig(id: string, type: ParamType, config: any): Param {\n    return new Param(id, type, config, DefType.CONFIG);\n  }\n\n  /** Creates a new [[Param]] from a url PATH */\n  static fromPath(id: string, type: ParamType, config: any): Param {\n    return new Param(id, type, config, DefType.PATH);\n  }\n\n  /** Creates a new [[Param]] from a url SEARCH */\n  static fromSearch(id: string, type: ParamType, config: any): Param {\n    return new Param(id, type, config, DefType.SEARCH);\n  }\n\n  static values(params: Param[], values = {}): RawParams {\n    return <RawParams> params.map(param => [param.id, param.value(values[param.id])]).reduce(applyPairs, {});\n  }\n\n  /**\n   * Finds [[Param]] objects which have different param values\n   *\n   * Filters a list of [[Param]] objects to only those whose parameter values differ in two param value objects\n   *\n   * @param params: The list of Param objects to filter\n   * @param values1: The first set of parameter values\n   * @param values2: the second set of parameter values\n   *\n   * @returns any Param objects whose values were different between values1 and values2\n   */\n  static changed(params: Param[], values1 = {}, values2 = {}): Param[] {\n    return params.filter(param => !param.type.equals(values1[param.id], values2[param.id]));\n  }\n\n  /**\n   * Checks if two param value objects are equal (for a set of [[Param]] objects)\n   *\n   * @param params The list of [[Param]] objects to check\n   * @param values1 The first set of param values\n   * @param values2 The second set of param values\n   *\n   * @returns true if the param values in values1 and values2 are equal\n   */\n  static equals(params: Param[], values1 = {}, values2 = {}): boolean {\n    return Param.changed(params, values1, values2).length === 0;\n  }\n\n  /** Returns true if a the parameter values are valid, according to the Param definitions */\n  static validates(params: Param[], values = {}): boolean {\n    return params.map(param => param.validates(values[param.id])).reduce(allTrueR, true);\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./params/param.ts\n **/","/** @module url */ /** for typedoc */\nimport {isDefined, isString} from \"../common/predicates\";\n\nexport class MatcherConfig {\n  _isCaseInsensitive: boolean = false;\n  _isStrictMode: boolean = true;\n  _defaultSquashPolicy: (boolean|string) = false;\n\n  caseInsensitive(value?: boolean): boolean {\n    return this._isCaseInsensitive = isDefined(value) ? value : this._isCaseInsensitive;\n  }\n\n  strictMode(value?: boolean): boolean {\n    return this._isStrictMode = isDefined(value) ? value : this._isStrictMode;\n  }\n\n  defaultSquashPolicy(value?: (boolean|string)): (boolean|string) {\n    if (isDefined(value) && value !== true && value !== false && !isString(value))\n      throw new Error(`Invalid squash policy: ${value}. Valid policies: false, true, arbitrary-string`);\n    return this._defaultSquashPolicy = isDefined(value) ? value : this._defaultSquashPolicy;\n  }\n}\n\n// TODO: Do not export global instance; create one in UIRouter() constructor\nexport let matcherConfig = new MatcherConfig();\n\n\n\n/** WEBPACK FOOTER **\n ** ./url/urlMatcherConfig.ts\n **/","/** @module params */ /** for typedoc */\nimport {extend, filter, map} from \"../common/common\";\nimport {isArray, isDefined} from \"../common/predicates\";\nimport {ParamTypeDefinition} from \"./interface\";\n\n/**\n * Wraps up a `ParamType` object to handle array values.\n */\nfunction ArrayType(type, mode) {\n  // Wrap non-array value as array\n  function arrayWrap(val): any[] { return isArray(val) ? val : (isDefined(val) ? [ val ] : []); }\n\n  // Unwrap array value for \"auto\" mode. Return undefined for empty array.\n  function arrayUnwrap(val) {\n    switch (val.length) {\n      case 0: return undefined;\n      case 1: return mode === \"auto\" ? val[0] : val;\n      default: return val;\n    }\n  }\n\n  // Wraps type (.is/.encode/.decode) functions to operate on each value of an array\n  function arrayHandler(callback, allTruthyMode?: boolean) {\n    return function handleArray(val) {\n      if (isArray(val) && val.length === 0) return val;\n      let arr = arrayWrap(val);\n      let result = map(arr, callback);\n      return (allTruthyMode === true) ? filter(result, x => !x).length === 0 : arrayUnwrap(result);\n    };\n  }\n\n  // Wraps type (.equals) functions to operate on each value of an array\n  function arrayEqualsHandler(callback) {\n    return function handleArray(val1, val2) {\n      let left = arrayWrap(val1), right = arrayWrap(val2);\n      if (left.length !== right.length) return false;\n      for (let i = 0; i < left.length; i++) {\n        if (!callback(left[i], right[i])) return false;\n      }\n      return true;\n    };\n  }\n\n  ['encode', 'decode', 'equals', '$normalize'].map(name => {\n    this[name] = (name === 'equals' ? arrayEqualsHandler : arrayHandler)(type[name].bind(type));\n  });\n\n  extend(this, {\n    dynamic: type.dynamic,\n    name: type.name,\n    pattern: type.pattern,\n    is: arrayHandler(type.is.bind(type), true),\n    $arrayMode: mode\n  });\n}\n\n/**\n * A class that implements Custom Parameter Type functionality.\n *\n * This class has naive implementations for all the [[ParamTypeDefinition]] methods.\n *\n * An instance of this class is created when a custom [[ParamTypeDefinition]] object is registered with the [[UrlMatcherFactory.type]].\n *\n * Used by [[UrlMatcher]] when matching or formatting URLs, or comparing and validating parameter values.\n *\n * @example\n * ```\n *\n * {\n *   decode: function(val) { return parseInt(val, 10); },\n *   encode: function(val) { return val && val.toString(); },\n *   equals: function(a, b) { return this.is(a) && a === b; },\n *   is: function(val) { return angular.isNumber(val) && isFinite(val) && val % 1 === 0; },\n *   pattern: /\\d+/\n * }\n * ```\n */\nexport class ParamType implements ParamTypeDefinition {\n  pattern: RegExp = /.*/;\n  name: string;\n  raw: boolean;\n  dynamic: boolean;\n\n  /**\n   * @param def  A configuration object which contains the custom type definition.  The object's\n   *        properties will override the default methods and/or pattern in `ParamType`'s public interface.\n   * @returns a new ParamType object\n   */\n  constructor(def: ParamTypeDefinition) {\n    extend(this, def);\n  }\n\n\n  // consider these four methods to be \"abstract methods\" that should be overridden\n  /** @inheritdoc */\n  is(val: any, key?: string): boolean { return true; }\n  /** @inheritdoc */\n  encode(val: any, key?: string): (string|string[]) { return val; }\n  /** @inheritdoc */\n  decode(val: string, key?: string): any { return val; }\n  /** @inheritdoc */\n  equals(a: any, b: any): boolean { return a == b; }\n\n\n  $subPattern() {\n    let sub = this.pattern.toString();\n    return sub.substr(1, sub.length - 2);\n  }\n\n  toString() {\n    return `{ParamType:${this.name}}`;\n  }\n\n  /** Given an encoded string, or a decoded object, returns a decoded object */\n  $normalize(val) {\n    return this.is(val) ? val : this.decode(val);\n  }\n\n  /**\n   * Wraps an existing custom ParamType as an array of ParamType, depending on 'mode'.\n   * e.g.:\n   * - urlmatcher pattern \"/path?{queryParam[]:int}\"\n   * - url: \"/path?queryParam=1&queryParam=2\n   * - $stateParams.queryParam will be [1, 2]\n   * if `mode` is \"auto\", then\n   * - url: \"/path?queryParam=1 will create $stateParams.queryParam: 1\n   * - url: \"/path?queryParam=1&queryParam=2 will create $stateParams.queryParam: [1, 2]\n   */\n  $asArray(mode, isSearch) {\n    if (!mode) return this;\n    if (mode === \"auto\" && !isSearch) throw new Error(\"'auto' array mode is for query parameters only\");\n    return new ArrayType(this, mode);\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./params/type.ts\n **/","/** @module params */ /** for typedoc */\nimport {fromJson, toJson, identity, equals, inherit, map, extend} from \"../common/common\";\nimport {isDefined} from \"../common/predicates\";\nimport {is, val} from \"../common/hof\";\nimport {services} from \"../common/coreservices\";\nimport {ParamType} from \"./type\";\n\n// Use tildes to pre-encode slashes.\n// If the slashes are simply URLEncoded, the browser can choose to pre-decode them,\n// and bidirectional encoding/decoding fails.\n// Tilde was chosen because it's not a RFC 3986 section 2.2 Reserved Character\nfunction valToString(val) { return val != null ? val.toString().replace(/~/g, \"~~\").replace(/\\//g, \"~2F\") : val; }\nfunction valFromString(val) { return val != null ? val.toString().replace(/~2F/g, \"/\").replace(/~~/g, \"~\") : val; }\n\nexport class ParamTypes {\n  types: any;\n  enqueue: boolean = true;\n  typeQueue: any[] = [];\n\n  private defaultTypes: any = {\n    \"hash\": {\n      encode: valToString,\n      decode: valFromString,\n      is: is(String),\n      pattern: /.*/,\n      equals: (a, b) => a == b // allow coersion for null/undefined/\"\"\n    },\n    \"string\": {\n      encode: valToString,\n      decode: valFromString,\n      is: is(String),\n      pattern: /[^/]*/\n    },\n    \"int\": {\n      encode: valToString,\n      decode(val) { return parseInt(val, 10); },\n      is(val) { return isDefined(val) && this.decode(val.toString()) === val; },\n      pattern: /-?\\d+/\n    },\n    \"bool\": {\n      encode: val => val && 1 || 0,\n      decode: val => parseInt(val, 10) !== 0,\n      is: is(Boolean),\n      pattern: /0|1/\n    },\n    \"date\": {\n      encode(val) {\n        return !this.is(val) ? undefined : [\n          val.getFullYear(),\n          ('0' + (val.getMonth() + 1)).slice(-2),\n          ('0' + val.getDate()).slice(-2)\n        ].join(\"-\");\n      },\n      decode(val) {\n        if (this.is(val)) return val;\n        let match = this.capture.exec(val);\n        return match ? new Date(match[1], match[2] - 1, match[3]) : undefined;\n      },\n      is: (val) => val instanceof Date && !isNaN(val.valueOf()),\n      equals(l, r) {\n        return ['getFullYear', 'getMonth', 'getDate']\n            .reduce((acc, fn) => acc && l[fn]() === r[fn](), true)\n      },\n      pattern: /[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,\n      capture: /([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/\n    },\n    \"json\": {\n      encode: toJson,\n      decode: fromJson,\n      is: is(Object),\n      equals: equals,\n      pattern: /[^/]*/\n    },\n    \"any\": { // does not encode/decode\n      encode: identity,\n      decode: identity,\n      equals: equals,\n      pattern: /.*/\n    }\n  };\n\n  constructor() {\n    // Register default types. Store them in the prototype of this.types.\n    const makeType = (definition, name) => new ParamType(extend({ name }, definition));\n    this.types = inherit(map(this.defaultTypes, makeType), {});\n  }\n\n  type(name, definition?: any, definitionFn?: Function) {\n    if (!isDefined(definition)) return this.types[name];\n    if (this.types.hasOwnProperty(name)) throw new Error(`A type named '${name}' has already been defined.`);\n\n    this.types[name] = new ParamType(extend({ name }, definition));\n\n    if (definitionFn) {\n      this.typeQueue.push({ name, def: definitionFn });\n      if (!this.enqueue) this._flushTypeQueue();\n    }\n    return this;\n  }\n\n  _flushTypeQueue() {\n    while (this.typeQueue.length) {\n      let type = this.typeQueue.shift();\n      if (type.pattern) throw new Error(\"You cannot override a type's .pattern at runtime.\");\n      extend(this.types[type.name], services.$injector.invoke(type.def));\n    }\n  }\n}\n\nexport let paramTypes = new ParamTypes();\n\n\n\n/** WEBPACK FOOTER **\n ** ./params/paramTypes.ts\n **/","/** @module core */ /** */\nimport {UrlMatcherFactory} from \"./url/urlMatcherFactory\";\nimport {UrlRouterProvider} from \"./url/urlRouter\";\nimport {StateProvider} from \"./state/state\";\nimport {UrlRouter} from \"./url/urlRouter\";\nimport {TransitionService} from \"./transition/transitionService\";\nimport {ViewService} from \"./view/view\";\nimport {StateRegistry} from \"./state/stateRegistry\";\nimport {StateService} from \"./state/stateService\";\nimport {UIRouterGlobals, Globals} from \"./globals\";\n\n/**\n * The master class used to instantiate an instance of UI-Router.\n *\n * This class instantiates and wires the global UI-Router services.\n *\n * After instantiating a new instance of the Router class, configure it for your app.  For instance, register\n * your app states with the [[stateRegistry]] (and set url options using ...).  Then, tell UI-Router to monitor\n * the URL by calling `urlRouter.listen()` ([[URLRouter.listen]])\n */\nexport class UIRouter {\n  viewService = new ViewService();\n\n  transitionService: TransitionService = new TransitionService(this);\n\n  globals: UIRouterGlobals = new Globals(this.transitionService);\n\n  urlMatcherFactory: UrlMatcherFactory = new UrlMatcherFactory();\n\n  urlRouterProvider: UrlRouterProvider = new UrlRouterProvider(this.urlMatcherFactory, this.globals.params);\n\n  urlRouter: UrlRouter = new UrlRouter(this.urlRouterProvider);\n\n  stateRegistry: StateRegistry = new StateRegistry(this.urlMatcherFactory, this.urlRouterProvider);\n\n  /** @hidden TODO: move this to ng1.ts */\n  stateProvider = new StateProvider(this.stateRegistry);\n\n  stateService = new StateService(this);\n\n  constructor() {\n    this.viewService.rootContext(this.stateRegistry.root());\n    this.globals.$current = this.stateRegistry.root();\n    this.globals.current = this.globals.$current.self;\n  }\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./router.ts\n **/","/** @module url */ /** for typedoc */\nimport {forEach, extend} from \"../common/common\";\nimport {isObject, isDefined, isFunction} from \"../common/predicates\";\n\nimport {UrlMatcher} from \"./urlMatcher\";\nimport {matcherConfig} from \"./urlMatcherConfig\";\nimport {Param} from \"../params/param\";\nimport {paramTypes} from \"../params/paramTypes\";\nimport {ParamType} from \"../params/type\";\n\n/** @hidden */\nfunction getDefaultConfig() {\n  return {\n    strict: matcherConfig.strictMode(),\n    caseInsensitive: matcherConfig.caseInsensitive()\n  };\n}\n\n/**\n * Factory for [[UrlMatcher]] instances.\n *\n * The factory is available to ng1 services as\n * `$urlMatcherFactor` or ng1 providers as `$urlMatcherFactoryProvider`.\n */\nexport class UrlMatcherFactory {\n  constructor() {\n    extend(this, { UrlMatcher, Param });\n  }\n\n  /**\n   * Defines whether URL matching should be case sensitive (the default behavior), or not.\n   *\n   * @param value `false` to match URL in a case sensitive manner; otherwise `true`;\n   * @returns the current value of caseInsensitive\n   */\n  caseInsensitive(value: boolean) {\n    return matcherConfig.caseInsensitive(value);\n  }\n\n  /**\n   * Defines whether URLs should match trailing slashes, or not (the default behavior).\n   *\n   * @param value `false` to match trailing slashes in URLs, otherwise `true`.\n   * @returns the current value of strictMode\n   */\n  strictMode(value: boolean) {\n    return matcherConfig.strictMode(value);\n  }\n\n  /**\n   * Sets the default behavior when generating or matching URLs with default parameter values.\n   *\n   * @param value A string that defines the default parameter URL squashing behavior.\n   *    - `nosquash`: When generating an href with a default parameter value, do not squash the parameter value from the URL\n   *    - `slash`: When generating an href with a default parameter value, squash (remove) the parameter value, and, if the\n   *             parameter is surrounded by slashes, squash (remove) one slash from the URL\n   *    - any other string, e.g. \"~\": When generating an href with a default parameter value, squash (remove)\n   *             the parameter value from the URL and replace it with this string.\n   * @returns the current value of defaultSquashPolicy\n   */\n  defaultSquashPolicy(value: string) {\n    return matcherConfig.defaultSquashPolicy(value);\n  }\n\n  /**\n   * Creates a [[UrlMatcher]] for the specified pattern.\n   *\n   * @param pattern  The URL pattern.\n   * @param config  The config object hash.\n   * @returns The UrlMatcher.\n   */\n  compile(pattern: string, config?: { [key: string]: any }) {\n    return new UrlMatcher(pattern, extend(getDefaultConfig(), config));\n  }\n\n  /**\n   * Returns true if the specified object is a [[UrlMatcher]], or false otherwise.\n   *\n   * @param object  The object to perform the type check against.\n   * @returns `true` if the object matches the `UrlMatcher` interface, by\n   *          implementing all the same methods.\n   */\n  isMatcher(object: any) {\n    // TODO: typeof?\n    if (!isObject(object)) return false;\n    let result = true;\n\n    forEach(UrlMatcher.prototype, (val, name) => {\n      if (isFunction(val)) result = result && (isDefined(object[name]) && isFunction(object[name]));\n    });\n    return result;\n  };\n\n  /**\n   * Creates and registers a custom [[ParamType]] object that can be used to generate URLs with typed parameters.\n   *\n   * @param name  The type name.\n   * @param definition The type definition. See [[ParamTypeDefinition]] for information on the values accepted.\n   * @param definitionFn A function that is injected before the app\n   *        runtime starts.  The result of this function is merged into the existing `definition`.\n   *        See [[ParamType]] for information on the values accepted.\n   *\n   * @returns - if a type was registered: the [[UrlMatcherFactory]]\n   *   - if only the `name` parameter was specified: the currently registered [[ParamType]] object, or undefined\n   *\n   * This is a simple example of a custom type that encodes and decodes items from an\n   * array, using the array index as the URL-encoded value:\n   */\n  type(name: string, definition?: (Function|ParamType), definitionFn?: Function) {\n    let type = paramTypes.type(name, definition, definitionFn);\n    return !isDefined(definition) ? type : this;\n  };\n\n  /** @hidden */\n  $get() {\n    paramTypes.enqueue = false;\n    paramTypes._flushTypeQueue();\n    return this;\n  };\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./url/urlMatcherFactory.ts\n **/","/** @module url */ /** for typedoc */\nimport {\n  map, defaults, extend, inherit, identity,\n  unnest, tail, forEach, find, omit, pairs, allTrueR\n} from \"../common/common\";\nimport {prop, propEq } from \"../common/hof\";\nimport {isArray, isString} from \"../common/predicates\";\nimport {Param} from \"../params/param\";\nimport {paramTypes} from \"../params/paramTypes\";\nimport {isDefined} from \"../common/predicates\";\nimport {DefType} from \"../params/param\";\nimport {unnestR} from \"../common/common\";\nimport {arrayTuples} from \"../common/common\";\nimport {RawParams} from \"../params/interface\";\n\n/** @hidden */\nfunction quoteRegExp(string: any, param?: any) {\n  let surroundPattern = ['', ''], result = string.replace(/[\\\\\\[\\]\\^$*+?.()|{}]/g, \"\\\\$&\");\n  if (!param) return result;\n\n  switch (param.squash) {\n    case false:\n      surroundPattern = ['(', ')' + (param.isOptional ? '?' : '')]; break;\n    case true:\n      result = result.replace(/\\/$/, '');\n      surroundPattern = ['(?:\\/(', ')|\\/)?'];\n      break;\n    default:\n      surroundPattern = [`(${param.squash}|`, ')?']; break;\n  }\n  return result + surroundPattern[0] + param.type.pattern.source + surroundPattern[1];\n}\n\n/** @hidden */\nconst memoizeTo = (obj, prop, fn) => obj[prop] = obj[prop] || fn();\n\n/**\n * Matches URLs against patterns.\n *\n * Matches URLs against patterns and extracts named parameters from the path or the search\n * part of the URL.\n *\n * A URL pattern consists of a path pattern, optionally followed by '?' and a list of search (query)\n * parameters. Multiple search parameter names are separated by '&'. Search parameters\n * do not influence whether or not a URL is matched, but their values are passed through into\n * the matched parameters returned by [[UrlMatcher.exec]].\n *\n * - *Path parameters* are defined using curly brace placeholders (`/somepath/{param}`)\n * or colon placeholders (`/somePath/:param`).\n *\n * - *A parameter RegExp* may be defined for a param after a colon\n * (`/somePath/{param:[a-zA-Z0-9]+}`) in a curly brace placeholder.\n * The regexp must match for the url to be matched.\n * Should the regexp itself contain curly braces, they must be in matched pairs or escaped with a backslash.\n *\n * - *Custom parameter types* may also be specified after a colon (`/somePath/{param:int}`)\n * in curly brace parameters.  See [[UrlMatcherFactory.type]] for more information.\n *\n * - *Catch-all parameters* are defined using an asterisk placeholder (`/somepath/*catchallparam`).  A catch-all\n * parameter value will contain the remainder of the URL.\n *\n * ---\n *\n * Parameter names may contain only word characters (latin letters, digits, and underscore) and\n * must be unique within the pattern (across both path and search parameters).\n * A path parameter matches any number of characters other than '/'. For catch-all\n * placeholders the path parameter matches any number of characters.\n *\n * Examples:\n *\n * * `'/hello/'` - Matches only if the path is exactly '/hello/'. There is no special treatment for\n *   trailing slashes, and patterns have to match the entire path, not just a prefix.\n * * `'/user/:id'` - Matches '/user/bob' or '/user/1234!!!' or even '/user/' but not '/user' or\n *   '/user/bob/details'. The second path segment will be captured as the parameter 'id'.\n * * `'/user/{id}'` - Same as the previous example, but using curly brace syntax.\n * * `'/user/{id:[^/]*}'` - Same as the previous example.\n * * `'/user/{id:[0-9a-fA-F]{1,8}}'` - Similar to the previous example, but only matches if the id\n *   parameter consists of 1 to 8 hex digits.\n * * `'/files/{path:.*}'` - Matches any URL starting with '/files/' and captures the rest of the\n *   path into the parameter 'path'.\n * * `'/files/*path'` - ditto.\n * * `'/calendar/{start:date}'` - Matches \"/calendar/2014-11-12\" (because the pattern defined\n *   in the built-in  `date` ParamType matches `2014-11-12`) and provides a Date object in $stateParams.start\n *\n */\nexport class UrlMatcher {\n  /** @hidden */\n  static nameValidator: RegExp = /^\\w+([-.]+\\w+)*(?:\\[\\])?$/;\n\n  /** @hidden */\n  private _cache: { path: UrlMatcher[], pattern?: RegExp } = { path: [], pattern: null };\n  /** @hidden */\n  private _children: UrlMatcher[] = [];\n  /** @hidden */\n  private _params:   Param[]      = [];\n  /** @hidden */\n  private _segments: string[]     = [];\n  /** @hidden */\n  private _compiled: string[]     = [];\n\n  /**\n   * A static prefix of this pattern.\n   *\n   * The matcher guarantees that any\n   *   URL matching this matcher (i.e. any string for which {@link ui.router.util.type:UrlMatcher#methods_exec exec()} returns\n   *   non-null) will start with this prefix.\n   */\n  public prefix: string;\n  /** The pattern that was passed into the constructor */\n  public pattern: string;\n\n  /**\n   * @param pattern The pattern to compile into a matcher.\n   * @param config  A configuration object hash\n   * * `caseInsensitive` - `true` if URL matching should be case insensitive, otherwise `false`, the default value (for backward compatibility) is `false`.\n   * * `strict` - `false` if matching against a URL with a trailing slash should be treated as equivalent to a URL without a trailing slash, the default value is `true`.\n   *\n   * @property {string} pattern  The pattern that was passed into the constructor\n   */\n  constructor(pattern: string, public config: any) {\n    this.pattern = pattern;\n    this.config = defaults(this.config, {\n      params: {},\n      strict: true,\n      caseInsensitive: false,\n      paramMap: identity\n    });\n\n    // Find all placeholders and create a compiled pattern, using either classic or curly syntax:\n    //   '*' name\n    //   ':' name\n    //   '{' name '}'\n    //   '{' name ':' regexp '}'\n    // The regular expression is somewhat complicated due to the need to allow curly braces\n    // inside the regular expression. The placeholder regexp breaks down as follows:\n    //    ([:*])([\\w\\[\\]]+)              - classic placeholder ($1 / $2) (search version has - for snake-case)\n    //    \\{([\\w\\[\\]]+)(?:\\:\\s*( ... ))?\\}  - curly brace placeholder ($3) with optional regexp/type ... ($4) (search version has - for snake-case\n    //    (?: ... | ... | ... )+         - the regexp consists of any number of atoms, an atom being either\n    //    [^{}\\\\]+                       - anything other than curly braces or backslash\n    //    \\\\.                            - a backslash escape\n    //    \\{(?:[^{}\\\\]+|\\\\.)*\\}          - a matched set of curly braces containing other atoms\n    let placeholder = /([:*])([\\w\\[\\]]+)|\\{([\\w\\[\\]]+)(?:\\:\\s*((?:[^{}\\\\]+|\\\\.|\\{(?:[^{}\\\\]+|\\\\.)*\\})+))?\\}/g,\n        searchPlaceholder = /([:]?)([\\w\\[\\].-]+)|\\{([\\w\\[\\].-]+)(?:\\:\\s*((?:[^{}\\\\]+|\\\\.|\\{(?:[^{}\\\\]+|\\\\.)*\\})+))?\\}/g,\n        last = 0, m, patterns = [];\n\n    const checkParamErrors = (id) => {\n      if (!UrlMatcher.nameValidator.test(id)) throw new Error(`Invalid parameter name '${id}' in pattern '${pattern}'`);\n      if (find(this._params, propEq('id', id))) throw new Error(`Duplicate parameter name '${id}' in pattern '${pattern}'`);\n    };\n\n    // Split into static segments separated by path parameter placeholders.\n    // The number of segments is always 1 more than the number of parameters.\n    const matchDetails = (m, isSearch) => {\n      // IE[78] returns '' for unmatched groups instead of null\n      let id = m[2] || m[3], regexp = isSearch ? m[4] : m[4] || (m[1] === '*' ? '.*' : null);\n\n      return {\n        id,\n        regexp,\n        cfg:     this.config.params[id],\n        segment: pattern.substring(last, m.index),\n        type:    !regexp ? null : paramTypes.type(regexp || \"string\") || inherit(paramTypes.type(\"string\"), {\n          pattern: new RegExp(regexp, this.config.caseInsensitive ? 'i' : undefined)\n        })\n      };\n    }\n\n    let p, segment;\n\n    while ((m = placeholder.exec(pattern))) {\n      p = matchDetails(m, false);\n      if (p.segment.indexOf('?') >= 0) break; // we're into the search part\n\n      checkParamErrors(p.id);\n      this._params.push(Param.fromPath(p.id, p.type, this.config.paramMap(p.cfg, false)));\n      this._segments.push(p.segment);\n      patterns.push([p.segment, tail(this._params)]);\n      last = placeholder.lastIndex;\n    }\n    segment = pattern.substring(last);\n\n    // Find any search parameter names and remove them from the last segment\n    let i = segment.indexOf('?');\n\n    if (i >= 0) {\n      let search = segment.substring(i);\n      segment = segment.substring(0, i);\n\n      if (search.length > 0) {\n        last = 0;\n\n        while ((m = searchPlaceholder.exec(search))) {\n          p = matchDetails(m, true);\n          checkParamErrors(p.id);\n          this._params.push(Param.fromSearch(p.id, p.type, this.config.paramMap(p.cfg, true)));\n          last = placeholder.lastIndex;\n          // check if ?&\n        }\n      }\n    }\n\n    this._segments.push(segment);\n\n    extend(this, {\n      _compiled: patterns.map(pattern => quoteRegExp.apply(null, pattern)).concat(quoteRegExp(segment)),\n      prefix: this._segments[0]\n    });\n\n    Object.freeze(this);\n  }\n\n  /**\n   * Creates a new concatenated UrlMatcher\n   *\n   * Builds a new UrlMatcher by appending another UrlMatcher to this one.\n   *\n   * @param url A `UrlMatcher` instance to append as a child of the current `UrlMatcher`.\n   */\n  append(url: UrlMatcher): UrlMatcher {\n    this._children.push(url);\n    forEach(url._cache, (val, key) => url._cache[key] = isArray(val) ? [] : null);\n    url._cache.path = this._cache.path.concat(this);\n    return url;\n  }\n\n  /** @hidden */\n  isRoot(): boolean {\n    return this._cache.path.length === 0;\n  }\n\n  /** Returns the input pattern string */\n  toString(): string {\n    return this.pattern;\n  }\n\n  /**\n   * Tests the specified url/path against this matcher.\n   *\n   * Tests if the given url matches this matcher's pattern, and returns an object containing the captured\n   * parameter values.  Returns null if the path does not match.\n   *\n   * The returned object contains the values\n   * of any search parameters that are mentioned in the pattern, but their value may be null if\n   * they are not present in `search`. This means that search parameters are always treated\n   * as optional.\n   *\n   * @example\n   * ```js\n   *\n   * new UrlMatcher('/user/{id}?q&r').exec('/user/bob', {\n   *   x: '1', q: 'hello'\n   * });\n   * // returns { id: 'bob', q: 'hello', r: null }\n   * ```\n   *\n   * @param path    The URL path to match, e.g. `$location.path()`.\n   * @param search  URL search parameters, e.g. `$location.search()`.\n   * @param hash    URL hash e.g. `$location.hash()`.\n   * @param options\n   *\n   * @returns The captured parameter values.\n   */\n  exec(path: string, search: any = {}, hash?: string, options: any = {}): RawParams {\n    let match = memoizeTo(this._cache, 'pattern', () => {\n      return new RegExp([\n        '^',\n        unnest(this._cache.path.concat(this).map(prop('_compiled'))).join(''),\n        this.config.strict === false ? '\\/?' : '',\n        '$'\n      ].join(''), this.config.caseInsensitive ? 'i' : undefined);\n    }).exec(path);\n\n    if (!match) return null;\n\n    //options = defaults(options, { isolate: false });\n\n    let allParams:    Param[] = this.parameters(),\n        pathParams:   Param[] = allParams.filter(param => !param.isSearch()),\n        searchParams: Param[] = allParams.filter(param => param.isSearch()),\n        nPathSegments  = this._cache.path.concat(this).map(urlm => urlm._segments.length - 1).reduce((a, x) => a + x),\n        values = {};\n\n    if (nPathSegments !== match.length - 1)\n      throw new Error(`Unbalanced capture group in route '${this.pattern}'`);\n\n    function decodePathArray(string: string) {\n      const reverseString = (str: string) => str.split(\"\").reverse().join(\"\");\n      const unquoteDashes = (str: string) => str.replace(/\\\\-/g, \"-\");\n\n      let split = reverseString(string).split(/-(?!\\\\)/);\n      let allReversed = map(split, reverseString);\n      return map(allReversed, unquoteDashes).reverse();\n    }\n\n    for (let i = 0; i < nPathSegments; i++) {\n      let param: Param = pathParams[i];\n      let value: (any|any[]) = match[i + 1];\n\n      // if the param value matches a pre-replace pair, replace the value before decoding.\n      for (let j = 0; j < param.replace.length; j++) {\n        if (param.replace[j].from === value) value = param.replace[j].to;\n      }\n      if (value && param.array === true) value = decodePathArray(value);\n      if (isDefined(value)) value = param.type.decode(value);\n      values[param.id] = param.value(value);\n    }\n    forEach(searchParams, param => {\n      let value = search[param.id];\n      for (let j = 0; j < param.replace.length; j++) {\n        if (param.replace[j].from === value) value = param.replace[j].to;\n      }\n      if (isDefined(value)) value = param.type.decode(value);\n      values[param.id] = param.value(value);\n    });\n\n    if (hash) values[\"#\"] = hash;\n\n    return values;\n  }\n\n  /**\n   * @hidden\n   * Returns all the [[Param]] objects of all path and search parameters of this pattern in order of appearance.\n   *\n   * @returns {Array.<Param>}  An array of [[Param]] objects. Must be treated as read-only. If the\n   *    pattern has no parameters, an empty array is returned.\n   */\n  parameters(opts: any = {}): Param[] {\n    if (opts.inherit === false) return this._params;\n    return unnest(this._cache.path.concat(this).map(prop('_params')));\n  }\n\n  /**\n   * @hidden\n   * Returns a single parameter from this UrlMatcher by id\n   *\n   * @param id\n   * @param opts\n   * @returns {T|Param|any|boolean|UrlMatcher|null}\n   */\n  parameter(id: string, opts: any = {}): Param {\n    const parent = tail(this._cache.path);\n\n    return (\n      find(this._params, propEq('id', id)) ||\n      (opts.inherit !== false && parent && parent.parameter(id)) ||\n      null\n    );\n  }\n\n  /**\n   * Validates the input parameter values against this UrlMatcher\n   *\n   * Checks an object hash of parameters to validate their correctness according to the parameter\n   * types of this `UrlMatcher`.\n   *\n   * @param params The object hash of parameters to validate.\n   * @returns Returns `true` if `params` validates, otherwise `false`.\n   */\n  validates(params: RawParams): boolean {\n    const validParamVal = (param: Param, val) => !param || param.validates(val);\n    return pairs(params || {}).map(([key, val]) => validParamVal(this.parameter(key), val)).reduce(allTrueR, true);\n  }\n\n  /**\n   * Given a set of parameter values, creates a URL from this UrlMatcher.\n   *\n   * Creates a URL that matches this pattern by substituting the specified values\n   * for the path and search parameters.\n   *\n   * @example\n   * ```js\n   *\n   * new UrlMatcher('/user/{id}?q').format({ id:'bob', q:'yes' });\n   * // returns '/user/bob?q=yes'\n   * ```\n   *\n   * @param values  the values to substitute for the parameters in this pattern.\n   * @returns the formatted URL (path and optionally search part).\n   */\n  format(values = {}) {\n    if (!this.validates(values)) return null;\n\n    // Build the full path of UrlMatchers (including all parent UrlMatchers)\n    let urlMatchers = this._cache.path.slice().concat(this);\n\n    // Extract all the static segments and Params into an ordered array\n    let pathSegmentsAndParams: Array<string|Param> =\n        urlMatchers.map(UrlMatcher.pathSegmentsAndParams).reduce(unnestR, []);\n\n    // Extract the query params into a separate array\n    let queryParams: Array<Param> =\n        urlMatchers.map(UrlMatcher.queryParams).reduce(unnestR, []);\n\n    /**\n     * Given a Param,\n     * Applies the parameter value, then returns details about it\n     */\n    function getDetails(param: Param): ParamDetails {\n      // Normalize to typed value\n      let value = param.value(values[param.id]);\n      let isDefaultValue = param.isDefaultValue(value);\n      // Check if we're in squash mode for the parameter\n      let squash = isDefaultValue ? param.squash : false;\n      // Allow the Parameter's Type to encode the value\n      let encoded = param.type.encode(value);\n\n      return { param, value, isDefaultValue, squash, encoded };\n    }\n\n    // Build up the path-portion from the list of static segments and parameters\n    let pathString = pathSegmentsAndParams.reduce((acc: string, x: string|Param) => {\n      // The element is a static segment (a raw string); just append it\n      if (isString(x)) return acc + x;\n\n      // Otherwise, it's a Param.  Fetch details about the parameter value\n      let {squash, encoded, param} = getDetails(<Param> x);\n\n      // If squash is === true, try to remove a slash from the path\n      if (squash === true) return (acc.match(/\\/$/)) ? acc.slice(0, -1) : acc;\n      // If squash is a string, use the string for the param value\n      if (isString(squash)) return acc + squash;\n      if (squash !== false) return acc; // ?\n      if (encoded == null) return acc;\n      // If this parameter value is an array, encode the value using encodeDashes\n      if (isArray(encoded)) return acc + map(<string[]> encoded, UrlMatcher.encodeDashes).join(\"-\");\n      // If the parameter type is \"raw\", then do not encodeURIComponent\n      if (param.type.raw) return acc + encoded;\n      // Encode the value\n      return acc + encodeURIComponent(<string> encoded);\n    }, \"\");\n\n    // Build the query string by applying parameter values (array or regular)\n    // then mapping to key=value, then flattening and joining using \"&\"\n    let queryString = queryParams.map((param: Param) => {\n      let {squash, encoded, isDefaultValue} = getDetails(param);\n      if (encoded == null || (isDefaultValue && squash !== false)) return;\n      if (!isArray(encoded)) encoded = [<string> encoded];\n      if (encoded.length === 0) return;\n      if (!param.type.raw) encoded = map(<string[]> encoded, encodeURIComponent);\n\n      return (<string[]> encoded).map(val => `${param.id}=${val}`);\n    }).filter(identity).reduce(unnestR, []).join(\"&\");\n\n    // Concat the pathstring with the queryString (if exists) and the hashString (if exists)\n    return pathString + (queryString ? `?${queryString}` : \"\") + (values[\"#\"] ? \"#\" + values[\"#\"] : \"\");\n  }\n\n  /** @hidden */\n  static encodeDashes(str) { // Replace dashes with encoded \"\\-\"\n    return encodeURIComponent(str).replace(/-/g, c => `%5C%${c.charCodeAt(0).toString(16).toUpperCase()}`);\n  }\n\n  /** @hidden Given a matcher, return an array with the matcher's path segments and path params, in order */\n  static pathSegmentsAndParams(matcher: UrlMatcher) {\n    let staticSegments = matcher._segments;\n    let pathParams = matcher._params.filter(p => p.location === DefType.PATH);\n    return arrayTuples(staticSegments, pathParams.concat(undefined)).reduce(unnestR, []).filter(x => x !== \"\" && isDefined(x));\n  }\n\n  /** @hidden Given a matcher, return an array with the matcher's query params */\n  static queryParams(matcher: UrlMatcher): Param[] {\n    return matcher._params.filter(p => p.location === DefType.SEARCH);\n  }\n}\n\n/** @hidden */\ninterface ParamDetails {\n  param: Param;\n  value: any;\n  isDefaultValue: boolean;\n  squash: (boolean|string);\n  encoded: (string|string[]);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./url/urlMatcher.ts\n **/","/** @module url */ /** for typedoc */\nimport {extend, bindFunctions, IInjectable} from \"../common/common\";\nimport {isFunction, isString, isDefined, isArray} from \"../common/predicates\";\nimport {UrlMatcher} from \"./urlMatcher\";\nimport {services} from \"../common/coreservices\";\nimport {UrlMatcherFactory} from \"./urlMatcherFactory\";\nimport {StateParams} from \"../params/stateParams\";\n\n/** @hidden */\nlet $location = services.location;\n\n/** @hidden Returns a string that is a prefix of all strings matching the RegExp */\nfunction regExpPrefix(re) {\n  let prefix = /^\\^((?:\\\\[^a-zA-Z0-9]|[^\\\\\\[\\]\\^$*+?.()|{}]+)*)/.exec(re.source);\n  return (prefix != null) ? prefix[1].replace(/\\\\(.)/g, \"$1\") : '';\n}\n\n/** @hidden Interpolates matched values into a String.replace()-style pattern */\nfunction interpolate(pattern, match) {\n  return pattern.replace(/\\$(\\$|\\d{1,2})/, function (m, what) {\n    return match[what === '$' ? 0 : Number(what)];\n  });\n}\n\n/** @hidden */\nfunction handleIfMatch($injector, $stateParams, handler, match) {\n  if (!match) return false;\n  let result = $injector.invoke(handler, handler, { $match: match, $stateParams: $stateParams });\n  return isDefined(result) ? result : true;\n}\n\n/** @hidden */\nfunction appendBasePath(url: string, isHtml5: boolean, absolute: boolean): string {\n  let baseHref = services.locationConfig.baseHref();\n  if (baseHref === '/') return url;\n  if (isHtml5) return baseHref.slice(0, -1) + url;\n  if (absolute) return baseHref.slice(1) + url;\n  return url;\n}\n\n// TODO: Optimize groups of rules with non-empty prefix into some sort of decision tree\n/** @hidden */\nfunction update(rules: Function[], otherwiseFn: Function, evt?: any) {\n  if (evt && evt.defaultPrevented) return;\n\n  function check(rule) {\n    let handled = rule(services.$injector, $location);\n\n    if (!handled) return false;\n    if (isString(handled)) {\n      $location.replace();\n      $location.url(handled);\n    }\n    return true;\n  }\n  let n = rules.length, i;\n\n  for (i = 0; i < n; i++) {\n    if (check(rules[i])) return;\n  }\n  // always check otherwise last to allow dynamic updates to the set of rules\n  if (otherwiseFn) check(otherwiseFn);\n}\n\n\n/**\n * Manages rules for client-side URL\n *\n * This class manages the router rules for what to do when the URL changes.\n */\nexport class UrlRouterProvider {\n  /** @hidden */\n  rules = [];\n  /** @hidden */\n  otherwiseFn: ($injector, $location) => string;\n  /** @hidden */\n  interceptDeferred = false;\n\n  /** @hidden */\n  private $urlMatcherFactory: UrlMatcherFactory;\n  /** @hidden */\n  private $stateParams: StateParams;\n\n  constructor($urlMatcherFactory: UrlMatcherFactory, $stateParams: StateParams) {\n    this.$urlMatcherFactory = $urlMatcherFactory;\n    this.$stateParams = $stateParams;\n  }\n\n  /**\n   * Registers a url handler function.\n   *\n   * Registers a low level url handler (a `rule`). A rule detects specific URL patterns and returns\n   * a redirect, or performs some action.\n   *\n   * If a rule returns a string, the URL is replaced with the string, and all rules are fired again.\n   *\n   * @example\n   * ```js\n   *\n   * var app = angular.module('app', ['ui.router.router']);\n   *\n   * app.config(function ($urlRouterProvider) {\n   *   // Here's an example of how you might allow case insensitive urls\n   *   $urlRouterProvider.rule(function ($injector, $location) {\n   *     var path = $location.path(),\n   *         normalized = path.toLowerCase();\n   *\n   *     if (path !== normalized) {\n   *       return normalized;\n   *     }\n   *   });\n   * });\n   * ```\n   *\n   * @param rule\n   * Handler function that takes `$injector` and `$location` services as arguments.\n   * You can use them to detect a url and return a different url as a string.\n   *\n   * @return [[$urlRouterProvider]] (`this`)\n   */\n  rule(rule: ($injector, $location) => string): UrlRouterProvider {\n    if (!isFunction(rule)) throw new Error(\"'rule' must be a function\");\n    this.rules.push(rule);\n    return this;\n  };\n\n  /**\n   * Defines the path or behavior to use when no url can be matched.\n   *\n   * @example\n   * ```js\n   *\n   * var app = angular.module('app', ['ui.router.router']);\n   *\n   * app.config(function ($urlRouterProvider) {\n   *   // if the path doesn't match any of the urls you configured\n   *   // otherwise will take care of routing the user to the\n   *   // specified url\n   *   $urlRouterProvider.otherwise('/index');\n   *\n   *   // Example of using function rule as param\n   *   $urlRouterProvider.otherwise(function ($injector, $location) {\n   *     return '/a/valid/url';\n   *   });\n   * });\n   * ```\n   *\n   * @param rule \n   * The url path you want to redirect to or a function rule that returns the url path or performs a `$state.go()`. \n   * The function version is passed two params: `$injector` and `$location` services, and should return a url string.\n   *\n   * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance\n   */\n  otherwise(rule: string | (($injector, $location) => string)): UrlRouterProvider {\n    if (!isFunction(rule) && !isString(rule)) throw new Error(\"'rule' must be a string or function\");\n    this.otherwiseFn = isString(rule) ? () => rule : rule;\n    return this;\n  };\n\n  /**\n   * Registers a handler for a given url matching. \n   * \n   * If the handler is a string, it is\n   * treated as a redirect, and is interpolated according to the syntax of match\n   * (i.e. like `String.replace()` for `RegExp`, or like a `UrlMatcher` pattern otherwise).\n   *\n   * If the handler is a function, it is injectable.\n   * It gets invoked if `$location` matches.\n   * You have the option of inject the match object as `$match`.\n   *\n   * The handler can return\n   *\n   * - **falsy** to indicate that the rule didn't match after all, then `$urlRouter`\n   *   will continue trying to find another one that matches.\n   * - **string** which is treated as a redirect and passed to `$location.url()`\n   * - **void** or any **truthy** value tells `$urlRouter` that the url was handled.\n   *\n   * @example\n   * ```js\n   * \n   * var app = angular.module('app', ['ui.router.router']);\n   *\n   * app.config(function ($urlRouterProvider) {\n   *   $urlRouterProvider.when($state.url, function ($match, $stateParams) {\n   *     if ($state.$current.navigable !== state ||\n   *         !equalForKeys($match, $stateParams) {\n   *      $state.transitionTo(state, $match, false);\n   *     }\n   *   });\n   * });\n   * ```\n   *\n   * @param what A pattern string to match, compiled as a [[UrlMatcher]].\n   * @param handler The path (or function that returns a path) that you want to redirect your user to.\n   *\n   * Note: the handler may also invoke arbitrary code, such as `$state.go()`\n   */\n  when(what: (RegExp|UrlMatcher|string), handler: string|IInjectable) {\n    let {$urlMatcherFactory, $stateParams} = this;\n    let redirect, handlerIsString = isString(handler);\n\n    // @todo Queue this\n    if (isString(what)) what = $urlMatcherFactory.compile(<string> what);\n\n    if (!handlerIsString && !isFunction(handler) && !isArray(handler))\n      throw new Error(\"invalid 'handler' in when()\");\n\n    let strategies = {\n      matcher: function (_what, _handler) {\n        if (handlerIsString) {\n          redirect = $urlMatcherFactory.compile(_handler);\n          _handler = ['$match', redirect.format.bind(redirect)];\n        }\n        return extend(function () {\n          return handleIfMatch(services.$injector, $stateParams, _handler, _what.exec($location.path(), $location.search(), $location.hash()));\n        }, {\n          prefix: isString(_what.prefix) ? _what.prefix : ''\n        });\n      },\n      regex: function (_what, _handler) {\n        if (_what.global || _what.sticky) throw new Error(\"when() RegExp must not be global or sticky\");\n\n        if (handlerIsString) {\n          redirect = _handler;\n          _handler = ['$match', ($match) => interpolate(redirect, $match)];\n        }\n        return extend(function () {\n          return handleIfMatch(services.$injector, $stateParams, _handler, _what.exec($location.path()));\n        }, {\n          prefix: regExpPrefix(_what)\n        });\n      }\n    };\n\n    let check = {\n      matcher: $urlMatcherFactory.isMatcher(what),\n      regex: what instanceof RegExp\n    };\n\n    for (var n in check) {\n      if (check[n]) return this.rule(strategies[n](what, handler));\n    }\n\n    throw new Error(\"invalid 'what' in when()\");\n  };\n\n  /**\n   * Disables monitoring of the URL.\n   *\n   * Call this method before UI-Router has bootstrapped.\n   * It will stop UI-Router from performing the initial url sync.\n   *\n   * This can be useful to perform some asynchronous initialization before the router starts.\n   * Once the initialization is complete, call [[listen]] to tell UI-Router to start watching and synchronizing the URL.\n   *\n   * @example\n   * ```js\n   *\n   * var app = angular.module('app', ['ui.router']);\n   *\n   * app.config(function ($urlRouterProvider) {\n   *   // Prevent $urlRouter from automatically intercepting URL changes;\n   *   $urlRouterProvider.deferIntercept();\n   * })\n   *\n   * app.run(function (MyService, $urlRouter, $http) {\n   *   $http.get(\"/stuff\").then(function(resp) {\n   *     MyService.doStuff(resp.data);\n   *     $urlRouter.listen();\n   *     $urlRouter.sync();\n   *   });\n   * });\n   * ```\n   *\n   * @param defer Indicates whether to defer location change interception. Passing\n   *        no parameter is equivalent to `true`.\n   */\n  deferIntercept(defer) {\n    if (defer === undefined) defer = true;\n    this.interceptDeferred = defer;\n  };\n}\n\nexport class UrlRouter {\n  /** @hidden */\n  private location: string;\n  /** @hidden */\n  private listener: Function;\n  /** @hidden */\n  private urlRouterProvider: UrlRouterProvider;\n\n\n  /** @hidden */\n  constructor(urlRouterProvider: UrlRouterProvider) {\n    this.urlRouterProvider = urlRouterProvider;\n    bindFunctions(UrlRouter.prototype, this, this);\n  }\n\n  /**\n   * Checks the current URL for a matching rule\n   *\n   * Triggers an update; the same update that happens when the address bar url changes, aka `$locationChangeSuccess`.\n   * This method is useful when you need to use `preventDefault()` on the `$locationChangeSuccess` event,\n   * perform some custom logic (route protection, auth, config, redirection, etc) and then finally proceed\n   * with the transition by calling `$urlRouter.sync()`.\n   *\n   * @example\n   * ```js\n   *\n   * angular.module('app', ['ui.router'])\n   *   .run(function($rootScope, $urlRouter) {\n   *     $rootScope.$on('$locationChangeSuccess', function(evt) {\n   *       // Halt state change from even starting\n   *       evt.preventDefault();\n   *       // Perform custom logic\n   *       var meetsRequirement = ...\n   *       // Continue with the update and state transition if logic allows\n   *       if (meetsRequirement) $urlRouter.sync();\n   *     });\n   * });\n   * ```\n   */\n  sync() {\n    update(this.urlRouterProvider.rules, this.urlRouterProvider.otherwiseFn);\n  }\n\n  /**\n   * Starts listening for URL changes\n   *\n   * Call this sometime after calling [[deferIntercept]] to start monitoring the url.\n   * This causes [[UrlRouter]] to start listening for changes to the URL, if it wasn't already listening.\n   */\n  listen(): Function {\n    return this.listener = this.listener || $location.onChange(evt => update(this.urlRouterProvider.rules, this.urlRouterProvider.otherwiseFn, evt));\n  }\n\n  /**\n   * Internal API.\n   */\n  update(read?) {\n    if (read) {\n      this.location = $location.url();\n      return;\n    }\n    if ($location.url() === this.location) return;\n\n    $location.url(this.location);\n    $location.replace();\n  }\n\n  /**\n   * Internal API.\n   *\n   * Pushes a new location to the browser history.\n   *\n   * @param urlMatcher\n   * @param params\n   * @param options\n   */\n  push(urlMatcher: UrlMatcher, params: StateParams, options: { replace?: (string|boolean) }) {\n    $location.url(urlMatcher.format(params || {}));\n    if (options && options.replace) $location.replace();\n  }\n\n  /**\n   * Builds and returns a URL with interpolated parameters\n   *\n   * @example\n   * ```js\n   *\n   * $bob = $urlRouter.href(new UrlMatcher(\"/about/:person\"), {\n   *   person: \"bob\"\n   * });\n   * // $bob == \"/about/bob\";\n   * ```\n   *\n   * @param urlMatcher The [[UrlMatcher]] object which is used as the template of the URL to generate.\n   * @param params An object of parameter values to fill the matcher's required parameters.\n   * @param options Options object. The options are:\n   *\n   * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. \"http://www.example.com/fullurl\".\n   *\n   * @returns Returns the fully compiled URL, or `null` if `params` fail validation against `urlMatcher`\n   */\n  href(urlMatcher: UrlMatcher, params: any, options: { absolute: boolean }): string {\n    if (!urlMatcher.validates(params)) return null;\n\n    let url = urlMatcher.format(params);\n    options = options || { absolute: false };\n\n    let cfg = services.locationConfig;\n    let isHtml5 = cfg.html5Mode();\n    if (!isHtml5 && url !== null) {\n      url = \"#\" + cfg.hashPrefix() + url;\n    }\n    url = appendBasePath(url, isHtml5, options.absolute);\n\n    if (!options.absolute || !url) {\n      return url;\n    }\n\n    let slash = (!isHtml5 && url ? '/' : ''), port = cfg.port();\n    port = <any> (port === 80 || port === 443 ? '' : ':' + port);\n\n    return [cfg.protocol(), '://', cfg.host(), port, slash, url].join('');\n  }\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./url/urlRouter.ts\n **/","/** @module state */ /** for typedoc */\nimport {isObject} from \"../common/predicates\";\nimport {bindFunctions} from \"../common/common\";\nimport {BuilderFunction} from \"./stateBuilder\";\nimport {StateRegistry} from \"./stateRegistry\";\nimport {State} from \"./stateObject\"; // TS4053\n\n/**\n * @ngdoc object\n * @name ui.router.state.$stateProvider\n *\n * @requires ui.router.router.$urlRouterProvider\n * @requires ui.router.util.$urlMatcherFactoryProvider\n *\n * @description\n * The new `$stateProvider` works similar to Angular's v1 router, but it focuses purely\n * on state.\n *\n * A state corresponds to a \"place\" in the application in terms of the overall UI and\n * navigation. A state describes (via the controller / template / view properties) what\n * the UI looks like and does at that place.\n *\n * States often have things in common, and the primary way of factoring out these\n * commonalities in this model is via the state hierarchy, i.e. parent/child states aka\n * nested states.\n *\n * The `$stateProvider` provides interfaces to declare these states for your app.\n */\nexport class StateProvider {\n  invalidCallbacks: Function[] = [];\n  constructor(private stateRegistry: StateRegistry) {\n    bindFunctions(StateProvider.prototype, this, this);\n  }\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.$stateProvider#decorator\n   * @methodOf ui.router.state.$stateProvider\n   *\n   * @description\n   * Allows you to extend (carefully) or override (at your own peril) the\n   * `stateBuilder` object used internally by `$stateProvider`. This can be used\n   * to add custom functionality to ui-router, for example inferring templateUrl\n   * based on the state name.\n   *\n   * When passing only a name, it returns the current (original or decorated) builder\n   * function that matches `name`.\n   *\n   * The builder functions that can be decorated are listed below. Though not all\n   * necessarily have a good use case for decoration, that is up to you to decide.\n   *\n   * In addition, users can attach custom decorators, which will generate new\n   * properties within the state's internal definition. There is currently no clear\n   * use-case for this beyond accessing internal states (i.e. $state.$current),\n   * however, expect this to become increasingly relevant as we introduce additional\n   * meta-programming features.\n   *\n   * **Warning**: Decorators should not be interdependent because the order of\n   * execution of the builder functions in non-deterministic. Builder functions\n   * should only be dependent on the state definition object and super function.\n   *\n   *\n   * Existing builder functions and current return values:\n   *\n   * - **parent** `{object}` - returns the parent state object.\n   * - **data** `{object}` - returns state data, including any inherited data that is not\n   *   overridden by own values (if any).\n   * - **url** `{object}` - returns a {@link ui.router.util.type:UrlMatcher UrlMatcher}\n   *   or `null`.\n   * - **navigable** `{object}` - returns closest ancestor state that has a URL (aka is\n   *   navigable).\n   * - **params** `{object}` - returns an array of state params that are ensured to\n   *   be a super-set of parent's params.\n   * - **views** `{object}` - returns a views object where each key is an absolute view\n   *   name (i.e. \"viewName@stateName\") and each value is the config object\n   *   (template, controller) for the view. Even when you don't use the views object\n   *   explicitly on a state config, one is still created for you internally.\n   *   So by decorating this builder function you have access to decorating template\n   *   and controller properties.\n   * - **ownParams** `{object}` - returns an array of params that belong to the state,\n   *   not including any params defined by ancestor states.\n   * - **path** `{string}` - returns the full path from the root down to this state.\n   *   Needed for state activation.\n   * - **includes** `{object}` - returns an object that includes every state that\n   *   would pass a `$state.includes()` test.\n   *\n   * @example\n   * <pre>\n   * // Override the internal 'views' builder with a function that takes the state\n   * // definition, and a reference to the internal function being overridden:\n   * $stateProvider.decorator('views', function (state, parent) {\n   *   let result = {},\n   *       views = parent(state);\n   *\n   *   angular.forEach(views, function (config, name) {\n   *     let autoName = (state.name + '.' + name).replace('.', '/');\n   *     config.templateUrl = config.templateUrl || '/partials/' + autoName + '.html';\n   *     result[name] = config;\n   *   });\n   *   return result;\n   * });\n   *\n   * $stateProvider.state('home', {\n   *   views: {\n   *     'contact.list': { controller: 'ListController' },\n   *     'contact.item': { controller: 'ItemController' }\n   *   }\n   * });\n   *\n   * // ...\n   *\n   * $state.go('home');\n   * // Auto-populates list and item views with /partials/home/contact/list.html,\n   * // and /partials/home/contact/item.html, respectively.\n   * </pre>\n   *\n   * @param {string} name The name of the builder function to decorate.\n   * @param {object} func A function that is responsible for decorating the original\n   * builder function. The function receives two parameters:\n   *\n   *   - `{object}` - state - The state config object.\n   *   - `{object}` - super - The original builder function.\n   *\n   * @return {object} $stateProvider - $stateProvider instance\n   */\n  decorator(name: string, func: BuilderFunction) {\n    return this.stateRegistry.decorator(name, func) || this;\n  }\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.$stateProvider#state\n   * @methodOf ui.router.state.$stateProvider\n   *\n   * @description\n   * Registers a state configuration under a given state name. The stateConfig object\n   * has the following acceptable properties.\n   *\n   * <a id='template'></a>\n   *\n   * - **`template`** - {string|function=} - html template as a string or a function that returns\n   *   an html template as a string which should be used by the uiView directives. This property\n   *   takes precedence over templateUrl.\n   *\n   *   If `template` is a function, it will be called with the following parameters:\n   *\n   *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by\n   *     applying the current state\n   *\n   * <a id='templateUrl'></a>\n   *\n   * - **`templateUrl`** - {string|function=} - path or function that returns a path to an html\n   *   template that should be used by uiView.\n   *\n   *   If `templateUrl` is a function, it will be called with the following parameters:\n   *\n   *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by\n   *     applying the current state\n   *\n   * <a id='templateProvider'></a>\n   *\n   * - **`templateProvider`** - {function=} - Provider function that returns HTML content\n   *   string.\n   *\n   * <a id='controller'></a>\n   *\n   * - **`controller`** - {string|function=} -  Controller fn that should be associated with newly\n   *   related scope or the name of a registered controller if passed as a string.\n   *\n   * <a id='controllerProvider'></a>\n   *\n   * - **`controllerProvider`** - {function=} - Injectable provider function that returns\n   *   the actual controller or string.\n   *\n   * <a id='controllerAs'></a>\n   *\n   * - **`controllerAs`** – {string=} – A controller alias name. If present the controller will be\n   *   published to scope under the controllerAs name.\n   *\n   * <a id='resolve'></a>\n   *\n   * - **`resolve`** - {object.&lt;string, function&gt;=} - An optional map of dependencies which\n   *   should be injected into the controller. If any of these dependencies are promises,\n   *   the router will wait for them all to be resolved or one to be rejected before the\n   *   controller is instantiated. If all the promises are resolved successfully, the values\n   *   of the resolved promises are injected and $stateChangeSuccess event is fired. If any\n   *   of the promises are rejected the $stateChangeError event is fired. The map object is:\n   *\n   *   - key - {string}: name of dependency to be injected into controller\n   *   - factory - {string|function}: If string then it is alias for service. Otherwise if function,\n   *     it is injected and return value it treated as dependency. If result is a promise, it is\n   *     resolved before its value is injected into controller.\n   *\n   * <a id='url'></a>\n   *\n   * - **`url`** - {string=} - A url with optional parameters. When a state is navigated or\n   *   transitioned to, the `$stateParams` service will be populated with any\n   *   parameters that were passed.\n   *\n   * <a id='params'></a>\n   *\n   * - **`params`** - {object=} - An array of parameter names or regular expressions. Only\n   *   use this within a state if you are not using url. Otherwise you can specify your\n   *   parameters within the url. When a state is navigated or transitioned to, the\n   *   $stateParams service will be populated with any parameters that were passed.\n   *\n   * <a id='views'></a>\n   *\n   * - **`views`** - {object=} - Use the views property to set up multiple views or to target views\n   *   manually/explicitly.\n   *\n   * <a id='abstract'></a>\n   *\n   * - **`abstract`** - {boolean=} - An abstract state will never be directly activated,\n   *   but can provide inherited properties to its common children states.\n   *\n   * <a id='onEnter'></a>\n   *\n   * - **`onEnter`** - {object=} - Callback function for when a state is entered. Good way\n   *   to trigger an action or dispatch an event, such as opening a dialog.\n   * If minifying your scripts, make sure to use the `['injection1', 'injection2', function(injection1, injection2){}]` syntax.\n   *\n   * <a id='onExit'></a>\n   *\n   * - **`onExit`** - {object=} - Callback function for when a state is exited. Good way to\n   *   trigger an action or dispatch an event, such as opening a dialog.\n   * If minifying your scripts, make sure to use the `['injection1', 'injection2', function(injection1, injection2){}]` syntax.\n   *\n   * <a id='reloadOnSearch'></a>\n   *\n   * - **`reloadOnSearch = true`** - {boolean=} - If `false`, will not retrigger the same state\n   *   just because a search/query parameter has changed (via $location.search() or $location.hash()).\n   *   Useful for when you'd like to modify $location.search() without triggering a reload.\n   *\n   * <a id='data'></a>\n   *\n   * - **`data`** - {object=} - Arbitrary data object, useful for custom configuration.\n   *\n   * @example\n   * <pre>\n   * // Some state name examples\n   *\n   * // stateName can be a single top-level name (must be unique).\n   * $stateProvider.state(\"home\", {});\n   *\n   * // Or it can be a nested state name. This state is a child of the\n   * // above \"home\" state.\n   * $stateProvider.state(\"home.newest\", {});\n   *\n   * // Nest states as deeply as needed.\n   * $stateProvider.state(\"home.newest.abc.xyz.inception\", {});\n   *\n   * // state() returns $stateProvider, so you can chain state declarations.\n   * $stateProvider\n   *   .state(\"home\", {})\n   *   .state(\"about\", {})\n   *   .state(\"contacts\", {});\n   * </pre>\n   *\n   * @param {string} name A unique state name, e.g. \"home\", \"about\", \"contacts\".\n   * To create a parent/child state use a dot, e.g. \"about.sales\", \"home.newest\".\n   * @param {object} definition State configuration object.\n   */\n  state(name, definition) {\n    if (isObject(name)) {\n      definition = name;\n    } else {\n      definition.name = name;\n    }\n    this.stateRegistry.register(definition);\n    return this;\n  }\n\n  /**\n   * Registers an invalid state handler\n   *\n   * Registers a function to be injected and invoked when [[StateService.transitionTo]] has been called with an invalid\n   * state reference parameter\n   *\n   * This function can be injected with one some special values:\n   * - **`$to$`**: TargetState\n   * - **`$from$`**: TargetState\n   *\n   * Note: This API is subject to change.\n   * Replacement of dependency injection support with some alternative is likely.\n   *\n   * @param {function} callback\n   *   The function which will be injected and invoked, when a matching transition is started.\n   *   The function may optionally return a {TargetState} or a Promise for a TargetState.  If one\n   *   is returned, it is treated as a redirect.\n   */\n\n  onInvalid(callback: Function) {\n    this.invalidCallbacks.push(callback);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./state/state.ts\n **/","/** @module transition */ /** for typedoc */\nimport {\n    IHookRegistry, TransitionOptions, HookMatchCriteria, HookRegOptions,\n    TransitionStateHookFn, TransitionHookFn\n} from \"./interface\";\n\nimport {Transition} from \"./transition\";\nimport {HookRegistry} from \"./hookRegistry\";\nimport {TargetState} from \"../state/targetState\";\nimport {PathNode} from \"../path/node\";\nimport {IEventHook} from \"./interface\";\nimport {ViewService} from \"../view/view\";\nimport {eagerResolvePath, lazyResolveState} from \"../hooks/resolve\";\nimport {loadEnteringViews, activateViews} from \"../hooks/views\";\nimport {updateUrl} from \"../hooks/url\";\nimport {redirectToHook} from \"../hooks/redirectTo\";\nimport {onExitHook, onRetainHook, onEnterHook} from \"../hooks/onEnterExitRetain\";\nimport {UIRouter} from \"../router\";\nimport {val} from \"../common/hof\";\n\n/**\n * The default [[Transition]] options.\n *\n * Include this object when applying custom defaults:\n * let reloadOpts = { reload: true, notify: true }\n * let options = defaults(theirOpts, customDefaults, defaultOptions);\n */\nexport let defaultTransOpts: TransitionOptions = {\n  location    : true,\n  relative    : null,\n  inherit     : false,\n  notify      : true,\n  reload      : false,\n  custom      : {},\n  current     : () => null\n};\n\n/**\n * This class provides services related to Transitions.\n *\n * - Most importantly, it allows global Transition Hooks to be registered.\n * - It allows the default transition error handler to be set.\n * - It also has a factory function for creating new [[Transition]] objects, (used internally by the [[StateService]]).\n *\n * At bootstrap, [[UIRouter]] creates a single instance (singleton) of this class.\n */\nexport class TransitionService implements IHookRegistry {\n  /** @hidden */\n  public $view: ViewService;\n\n  /**\n   * This object has hook de-registration functions.\n   * This can be used by third parties libraries that wish to customize the behaviors\n   *\n   * @hidden\n   */\n  _deregisterHookFns: {\n    onExit: Function;\n    onRetain: Function;\n    onEnter: Function;\n    eagerResolve: Function;\n    lazyResolve: Function;\n    loadViews: Function;\n    activateViews: Function;\n    updateUrl: Function;\n    redirectTo: Function;\n  };\n\n  constructor(private _router: UIRouter) {\n    this.$view = _router.viewService;\n    HookRegistry.mixin(new HookRegistry(), this);\n    this._deregisterHookFns = <any> {};\n    this.registerTransitionHooks();\n  }\n\n  /** @hidden */\n  private registerTransitionHooks() {\n    let fns = this._deregisterHookFns;\n\n    // Wire up redirectTo hook\n    fns.redirectTo    = this.onStart({to: (state) => !!state.redirectTo}, redirectToHook);\n    \n    // Wire up onExit/Retain/Enter state hooks\n    fns.onExit        = this.onExit  ({exiting: state => !!state.onExit},     onExitHook);\n    fns.onRetain      = this.onRetain({retained: state => !!state.onRetain},  onRetainHook);\n    fns.onEnter       = this.onEnter ({entering: state => !!state.onEnter},   onEnterHook);\n\n    // Wire up Resolve hooks\n    fns.eagerResolve  = this.onStart({}, eagerResolvePath, {priority: 1000});\n    fns.lazyResolve   = this.onEnter({ entering: val(true) }, lazyResolveState, {priority: 1000});\n\n    // Wire up the View management hooks\n    fns.loadViews     = this.onStart({}, loadEnteringViews);\n    fns.activateViews = this.onSuccess({}, activateViews);\n\n    // After globals.current is updated at priority: 10000\n    fns.updateUrl     = this.onSuccess({}, updateUrl, {priority: 9999});\n  }\n\n  /** @inheritdoc */\n  onBefore (matchCriteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions) : Function { throw \"\"; };\n  /** @inheritdoc */\n  onStart (matchCriteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions) : Function { throw \"\"; };\n  /** @inheritdoc */\n  onExit (matchCriteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions) : Function { throw \"\"; };\n  /** @inheritdoc */\n  onRetain (matchCriteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions) : Function { throw \"\"; };\n  /** @inheritdoc */\n  onEnter (matchCriteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions) : Function { throw \"\"; };\n  /** @inheritdoc */\n  onFinish (matchCriteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions) : Function { throw \"\"; };\n  /** @inheritdoc */\n  onSuccess (matchCriteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions) : Function { throw \"\"; };\n  /** @inheritdoc */\n  onError (matchCriteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions) : Function { throw \"\"; };\n\n\n  /** @hidden */\n  getHooks  : (hookName: string) => IEventHook[];\n\n  /**\n   * Creates a new [[Transition]] object\n   *\n   * This is a factory function for creating new Transition objects.\n   * It is used internally by the [[StateService]] and should generally not be called by application code.\n   *\n   * @param fromPath the path to the current state (the from state)\n   * @param targetState the target state (destination)\n   * @returns a Transition\n   */\n  create(fromPath: PathNode[], targetState: TargetState): Transition {\n    return new Transition(fromPath, targetState, this._router);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./transition/transitionService.ts\n **/","/** @module hooks */ /** for typedoc */\nimport {noop} from \"../common/common\";\nimport {Transition} from \"../transition/transition\";\nimport {State} from \"../state/stateObject\";\nimport {ResolveContext} from \"../resolve/resolveContext\";\nimport {TransitionStateHookFn, TransitionHookFn} from \"../transition/interface\";\n\n/**\n * A [[TransitionHookFn]] which resolves all EAGER Resolvables in the To Path\n *\n * Registered using `transitionService.onStart({}, eagerResolvePath);`\n *\n * When a Transition starts, this hook resolves all the EAGER Resolvables, which the transition then waits for.\n *\n * See [[StateDeclaration.resolve]]\n */\nexport const eagerResolvePath: TransitionHookFn = (trans: Transition) =>\n    new ResolveContext(trans.treeChanges().to)\n        .resolvePath(\"EAGER\", trans)\n        .then(noop);\n\n/**\n * A [[TransitionHookFn]] which resolves all LAZY Resolvables for the state (and all its ancestors) in the To Path\n *\n * Registered using `transitionService.onEnter({ entering: () => true }, lazyResolveState);`\n *\n * When a State is being entered, this hook resolves all the Resolvables for this state, which the transition then waits for.\n *\n * See [[StateDeclaration.resolve]]\n */\nexport const lazyResolveState: TransitionStateHookFn = (trans: Transition, state: State) =>\n    new ResolveContext(trans.treeChanges().to)\n        .subContext(state)\n        .resolvePath(\"LAZY\", trans)\n        .then(noop);\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./hooks/resolve.ts\n **/","/** @module hooks */ /** for typedoc */\nimport {noop} from \"../common/common\";\nimport {services} from \"../common/coreservices\";\nimport {Transition} from \"../transition/transition\";\nimport {ViewService} from \"../view/view\";\nimport {ViewConfig} from \"../view/interface\";\n\n\n/**\n * A [[TransitionHookFn]] which waits for the views to load\n *\n * Registered using `transitionService.onStart({}, loadEnteringViews);`\n *\n * Allows the views to do async work in [[ViewConfig.load]] before the transition continues.\n * In angular 1, this includes loading the templates.\n */\nexport function loadEnteringViews(transition) {\n  let enteringViews = transition.views(\"entering\");\n  if (!enteringViews.length) return;\n  return services.$q.all(enteringViews.map(view => view.load())).then(noop);\n}\n\n/**\n * A [[TransitionHookFn]] which activates the new views when a transition is successful.\n *\n * Registered using `transitionService.onSuccess({}, activateViews);`\n *\n * After a transition is complete, this hook deactivates the old views from the previous state,\n * and activates the new views from the destination state.\n *\n * See [[ViewService]]\n */\nexport function activateViews(transition: Transition) {\n  let enteringViews = transition.views(\"entering\");\n  let exitingViews = transition.views(\"exiting\");\n  if (!enteringViews.length && !exitingViews.length) return;\n\n  let $view: ViewService = transition.router.viewService;\n\n  exitingViews.forEach((vc: ViewConfig) => $view.deactivateViewConfig(vc));\n  enteringViews.forEach((vc: ViewConfig) => $view.activateViewConfig(vc));\n\n  $view.sync();\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./hooks/views.ts\n **/","/** @module hooks */ /** */\nimport {UrlRouter} from \"../url/urlRouter\";\nimport {StateService} from \"../state/stateService\";\nimport {Transition} from \"../transition/transition\";\n\n/** \n * A [[TransitionHookFn]] which updates the URL after a successful transition\n * \n * Registered using `transitionService.onSuccess({}, updateUrl);`\n */\nexport function updateUrl(transition: Transition) {\n  let options = transition.options();\n  let $state: StateService = transition.router.stateService;\n  let $urlRouter: UrlRouter = transition.router.urlRouter;\n\n  if (options.location && $state.$current.navigable) {\n    var urlOptions = {replace: options.location === 'replace'};\n    $urlRouter.push($state.$current.navigable.url, $state.params, urlOptions);\n  }\n\n  $urlRouter.update(true);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./hooks/url.ts\n **/","/** @module hooks */ /** */\nimport {isString, isFunction} from \"../common/predicates\"\nimport {Transition} from \"../transition/transition\";\nimport {services} from \"../common/coreservices\";\nimport {TargetState} from \"../state/targetState\";\n\n/**\n * A [[TransitionHookFn]] that redirects to a different state or params\n *\n * Registered using `transitionService.onStart({ to: (state) => !!state.redirectTo }, redirectHook);`\n * \n * See [[StateDeclaration.redirectTo]]\n */\nexport const redirectToHook = (trans: Transition) => {\n  let redirect = trans.to().redirectTo;\n  if (!redirect) return;\n\n  function handleResult(result) {\n    let $state = trans.router.stateService;\n\n    if (result instanceof TargetState) return result;\n    if (isString(result)) return $state.target(<any> result, trans.params(), trans.options());\n    if (result['state'] || result['params'])\n      return $state.target(result['state'] || trans.to(), result['params'] || trans.params(), trans.options());\n  }\n\n  if (isFunction(redirect)) {\n    return services.$q.when(redirect(trans)).then(handleResult);\n  }\n  return handleResult(redirect);\n};\n\n\n/** WEBPACK FOOTER **\n ** ./hooks/redirectTo.ts\n **/","/** @module hooks */ /** for typedoc */\nimport {TransitionStateHookFn} from \"../transition/interface\";\nimport {State} from \"../state/stateObject\";\nimport {Transition} from \"../transition/transition\";\n\n/**\n * A factory which creates an onEnter, onExit or onRetain transition hook function\n *\n * The returned function invokes the (for instance) state.onEnter hook when the\n * state is being entered.\n *\n * @hidden\n */\nfunction makeEnterExitRetainHook(hookName: string): TransitionStateHookFn {\n    return (transition: Transition, state: State) =>\n        state[hookName](transition, state);\n}\n\n/**\n * The [[TransitionStateHookFn]] for onExit\n *\n * When the state is being exited, the state's .onExit function is invoked.\n *\n * Registered using `transitionService.onExit({ exiting: (state) => !!state.onExit }, onExitHook);`\n */\nexport const onExitHook: TransitionStateHookFn      = makeEnterExitRetainHook('onExit');\n\n/**\n * The [[TransitionStateHookFn]] for onRetain\n *\n * When the state is being exited, the state's .onRetain function is invoked.\n *\n * Registered using `transitionService.onRetain({ retained: (state) => !!state.onRetain }, onRetainHook);`\n */\nexport const onRetainHook: TransitionStateHookFn    = makeEnterExitRetainHook('onRetain');\n\n/**\n * The [[TransitionStateHookFn]] for onEnter\n *\n * When the state is being exited, the state's .onEnter function is invoked.\n *\n * Registered using `transitionService.onEnter({ entering: (state) => !!state.onEnter }, onEnterHook);`\n */\nexport const onEnterHook: TransitionStateHookFn     = makeEnterExitRetainHook('onEnter');\n\n\n\n/** WEBPACK FOOTER **\n ** ./hooks/onEnterExitRetain.ts\n **/","/** @module view */ /** for typedoc */\nimport {equals, applyPairs, removeFrom, TypedMap} from \"../common/common\";\nimport {curry, prop} from \"../common/hof\";\nimport {isString, isArray} from \"../common/predicates\";\nimport {trace} from \"../common/trace\";\nimport {PathNode} from \"../path/node\";\n\nimport {ActiveUIView, ViewContext, ViewConfig} from \"./interface\";\nimport {_ViewDeclaration} from \"../state/interface\";\n\nconst match = (obj1, ...keys) =>\n    (obj2) => keys.reduce((memo, key) => memo && obj1[key] === obj2[key], true);\n\nexport type ViewConfigFactory = (path: PathNode[], decl: _ViewDeclaration) => ViewConfig|ViewConfig[];\n\n/**\n * The View service\n */\nexport class ViewService {\n  private uiViews: ActiveUIView[] = [];\n  private viewConfigs: ViewConfig[] = [];\n  private _rootContext;\n  private _viewConfigFactories: { [key: string]: ViewConfigFactory } = {};\n\n  constructor() { }\n\n  rootContext(context) {\n    return this._rootContext = context || this._rootContext;\n  };\n\n  viewConfigFactory(viewType: string, factory: ViewConfigFactory) {\n    this._viewConfigFactories[viewType] = factory;\n  }\n\n  createViewConfig(path: PathNode[], decl: _ViewDeclaration): ViewConfig[] {\n    let cfgFactory = this._viewConfigFactories[decl.$type];\n    if (!cfgFactory) throw new Error(\"ViewService: No view config factory registered for type \" + decl.$type);\n    let cfgs = cfgFactory(path, decl);\n    return isArray(cfgs) ? cfgs : [cfgs];\n  }\n  \n  /**\n   * De-registers a ViewConfig.\n   *\n   * @param viewConfig The ViewConfig view to deregister.\n   */\n  deactivateViewConfig(viewConfig: ViewConfig) {\n    trace.traceViewServiceEvent(\"<- Removing\", viewConfig);\n    removeFrom(this.viewConfigs, viewConfig);\n  };\n\n  activateViewConfig(viewConfig: ViewConfig) {\n    trace.traceViewServiceEvent(\"-> Registering\", <any> viewConfig);\n    this.viewConfigs.push(viewConfig);\n  };\n\n  sync = () => {\n    let uiViewsByFqn: TypedMap<ActiveUIView> =\n        this.uiViews.map(uiv => [uiv.fqn, uiv]).reduce(applyPairs, <any> {});\n\n    /**\n     * Given a ui-view and a ViewConfig, determines if they \"match\".\n     *\n     * A ui-view has a fully qualified name (fqn) and a context object.  The fqn is built from its overall location in\n     * the DOM, describing its nesting relationship to any parent ui-view tags it is nested inside of.\n     *\n     * A ViewConfig has a target ui-view name and a context anchor.  The ui-view name can be a simple name, or\n     * can be a segmented ui-view path, describing a portion of a ui-view fqn.\n     *\n     * In order for a ui-view to match ViewConfig, ui-view's $type must match the ViewConfig's $type\n     *\n     * If the ViewConfig's target ui-view name is a simple name (no dots), then a ui-view matches if:\n     * - the ui-view's name matches the ViewConfig's target name\n     * - the ui-view's context matches the ViewConfig's anchor\n     *\n     * If the ViewConfig's target ui-view name is a segmented name (with dots), then a ui-view matches if:\n     * - There exists a parent ui-view where:\n     *    - the parent ui-view's name matches the first segment (index 0) of the ViewConfig's target name\n     *    - the parent ui-view's context matches the ViewConfig's anchor\n     * - And the remaining segments (index 1..n) of the ViewConfig's target name match the tail of the ui-view's fqn\n     *\n     * Example:\n     *\n     * DOM:\n     * <div ui-view>                        <!-- created in the root context (name: \"\") -->\n     *   <div ui-view=\"foo\">                <!-- created in the context named: \"A\"      -->\n     *     <div ui-view>                    <!-- created in the context named: \"A.B\"    -->\n     *       <div ui-view=\"bar\">            <!-- created in the context named: \"A.B.C\"  -->\n     *       </div>\n     *     </div>\n     *   </div>\n     * </div>\n     *\n     * uiViews: [\n     *  { fqn: \"$default\",                  creationContext: { name: \"\" } },\n     *  { fqn: \"$default.foo\",              creationContext: { name: \"A\" } },\n     *  { fqn: \"$default.foo.$default\",     creationContext: { name: \"A.B\" } }\n     *  { fqn: \"$default.foo.$default.bar\", creationContext: { name: \"A.B.C\" } }\n     * ]\n     *\n     * These four view configs all match the ui-view with the fqn: \"$default.foo.$default.bar\":\n     *\n     * - ViewConfig1: { uiViewName: \"bar\",                       uiViewContextAnchor: \"A.B.C\" }\n     * - ViewConfig2: { uiViewName: \"$default.bar\",              uiViewContextAnchor: \"A.B\" }\n     * - ViewConfig3: { uiViewName: \"foo.$default.bar\",          uiViewContextAnchor: \"A\" }\n     * - ViewConfig4: { uiViewName: \"$default.foo.$default.bar\", uiViewContextAnchor: \"\" }\n     *\n     * Using ViewConfig3 as an example, it matches the ui-view with fqn \"$default.foo.$default.bar\" because:\n     * - The ViewConfig's segmented target name is: [ \"foo\", \"$default\", \"bar\" ]\n     * - There exists a parent ui-view (which has fqn: \"$default.foo\") where:\n     *    - the parent ui-view's name \"foo\" matches the first segment \"foo\" of the ViewConfig's target name\n     *    - the parent ui-view's context \"A\" matches the ViewConfig's anchor context \"A\"\n     * - And the remaining segments [ \"$default\", \"bar\" ].join(\".\"_ of the ViewConfig's target name match\n     *   the tail of the ui-view's fqn \"default.bar\"\n     */\n    const matches = (uiView: ActiveUIView) => (viewConfig: ViewConfig) => {\n      // Don't supply an ng1 ui-view with an ng2 ViewConfig, etc\n      if (uiView.$type !== viewConfig.viewDecl.$type) return false;\n\n      // Split names apart from both viewConfig and uiView into segments\n      let vc = viewConfig.viewDecl;\n      let vcSegments = vc.$uiViewName.split(\".\");\n      let uivSegments = uiView.fqn.split(\".\");\n\n      // Check if the tails of the segment arrays match. ex, these arrays' tails match:\n      // vc: [\"foo\", \"bar\"], uiv fqn: [\"$default\", \"foo\", \"bar\"]\n      if (!equals(vcSegments, uivSegments.slice(0 - vcSegments.length)))\n        return false;\n\n      // Now check if the fqn ending at the first segment of the viewConfig matches the context:\n      // [\"$default\", \"foo\"].join(\".\") == \"$default.foo\", does the ui-view $default.foo context match?\n      let negOffset = (1 - vcSegments.length) || undefined;\n      let fqnToFirstSegment = uivSegments.slice(0, negOffset).join(\".\");\n      let uiViewContext = uiViewsByFqn[fqnToFirstSegment].creationContext;\n      return vc.$uiViewContextAnchor === (uiViewContext && uiViewContext.name);\n    };\n\n    // Return the number of dots in the fully qualified name\n    function uiViewDepth(uiView: ActiveUIView) {\n      return uiView.fqn.split(\".\").length;\n    }\n\n    // Return the ViewConfig's context's depth in the context tree.\n    function viewConfigDepth(config: ViewConfig) {\n      let context: ViewContext = config.viewDecl.$context, count = 0;\n      while (++count && context.parent) context = context.parent;\n      return count;\n    }\n\n    // Given a depth function, returns a compare function which can return either ascending or descending order\n    const depthCompare = curry((depthFn, posNeg, left, right) => posNeg * (depthFn(left) - depthFn(right)));\n\n    const matchingConfigPair = uiView => {\n      let matchingConfigs = this.viewConfigs.filter(matches(uiView));\n      if (matchingConfigs.length > 1)\n        matchingConfigs.sort(depthCompare(viewConfigDepth, -1)); // descending\n      return [uiView, matchingConfigs[0]];\n    };\n\n    const configureUIView = ([uiView, viewConfig]) => {\n      // If a parent ui-view is reconfigured, it could destroy child ui-views.\n      // Before configuring a child ui-view, make sure it's still in the active uiViews array.\n      if (this.uiViews.indexOf(uiView) !== -1)\n        uiView.configUpdated(viewConfig);\n    };\n\n    this.uiViews.sort(depthCompare(uiViewDepth, 1)).map(matchingConfigPair).forEach(configureUIView);\n  };\n\n  /**\n   * Allows a `ui-view` element to register its canonical name with a callback that allows it to\n   * be updated with a template, controller, and local variables.\n   *\n   * @param {String} name The fully-qualified name of the `ui-view` object being registered.\n   * @param {Function} configUpdatedCallback A callback that receives updates to the content & configuration\n   *                   of the view.\n   * @return {Function} Returns a de-registration function used when the view is destroyed.\n   */\n  registerUIView(uiView: ActiveUIView) {\n    trace.traceViewServiceUIViewEvent(\"-> Registering\", uiView);\n    let uiViews = this.uiViews;\n    const fqnMatches = uiv => uiv.fqn === uiView.fqn;\n    if (uiViews.filter(fqnMatches).length)\n      trace.traceViewServiceUIViewEvent(\"!!!! duplicate uiView named:\", uiView);\n\n    uiViews.push(uiView);\n    this.sync();\n\n    return () => {\n      let idx = uiViews.indexOf(uiView);\n      if (idx <= 0) {\n        trace.traceViewServiceUIViewEvent(\"Tried removing non-registered uiView\", uiView);\n        return;\n      }\n      trace.traceViewServiceUIViewEvent(\"<- Deregistering\", uiView);\n      removeFrom(uiViews)(uiView);\n    };\n  };\n\n  /**\n   * Returns the list of views currently available on the page, by fully-qualified name.\n   *\n   * @return {Array} Returns an array of fully-qualified view names.\n   */\n  available() {\n    return this.uiViews.map(prop(\"fqn\"));\n  }\n\n  /**\n   * Returns the list of views on the page containing loaded content.\n   *\n   * @return {Array} Returns an array of fully-qualified view names.\n   */\n  active() {\n    return this.uiViews.filter(prop(\"$config\")).map(prop(\"name\"));\n  }\n\n  /**\n   * Normalizes a view's name from a state.views configuration block.\n   *\n   * @param context the context object (state declaration) that the view belongs to\n   * @param rawViewName the name of the view, as declared in the [[StateDeclaration.views]]\n   *\n   * @returns the normalized uiViewName and uiViewContextAnchor that the view targets\n   */\n  static normalizeUIViewTarget(context: ViewContext, rawViewName = \"\") {\n    // TODO: Validate incoming view name with a regexp to allow:\n    // ex: \"view.name@foo.bar\" , \"^.^.view.name\" , \"view.name@^.^\" , \"\" ,\n    // \"@\" , \"$default@^\" , \"!$default.$default\" , \"!foo.bar\"\n    let viewAtContext: string[] = rawViewName.split(\"@\");\n    let uiViewName = viewAtContext[0] || \"$default\";  // default to unnamed view\n    let uiViewContextAnchor = isString(viewAtContext[1]) ? viewAtContext[1] : \"^\";    // default to parent context\n\n    // Handle relative view-name sugar syntax.\n    // Matches rawViewName \"^.^.^.foo.bar\" into array: [\"^.^.^.foo.bar\", \"^.^.^\", \"foo.bar\"],\n    let relativeViewNameSugar = /^(\\^(?:\\.\\^)*)\\.(.*$)/.exec(uiViewName);\n    if (relativeViewNameSugar) {\n      // Clobbers existing contextAnchor (rawViewName validation will fix this)\n      uiViewContextAnchor = relativeViewNameSugar[1]; // set anchor to \"^.^.^\"\n      uiViewName = relativeViewNameSugar[2]; // set view-name to \"foo.bar\"\n    }\n\n    if (uiViewName.charAt(0) === '!') {\n      uiViewName = uiViewName.substr(1);\n      uiViewContextAnchor = \"\"; // target absolutely from root\n    }\n\n    // handle parent relative targeting \"^.^.^\"\n    let relativeMatch = /^(\\^(?:\\.\\^)*)$/;\n    if (relativeMatch.exec(uiViewContextAnchor)) {\n      let anchor = uiViewContextAnchor.split(\".\").reduce(((anchor, x) => anchor.parent), context);\n      uiViewContextAnchor = anchor.name;\n    }\n\n    return {uiViewName, uiViewContextAnchor};\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./view/view.ts\n **/","/** @module state */ /** for typedoc */\n\nimport {State} from \"./stateObject\";\nimport {StateMatcher} from \"./stateMatcher\";\nimport {StateBuilder} from \"./stateBuilder\";\nimport {StateQueueManager} from \"./stateQueueManager\";\nimport {UrlMatcherFactory} from \"../url/urlMatcherFactory\";\nimport {StateDeclaration} from \"./interface\";\nimport {BuilderFunction} from \"./stateBuilder\";\nimport {StateOrName} from \"./interface\";\n\nexport class StateRegistry {\n  private _root: State;\n  private states: { [key: string]: State } = {};\n\n  matcher: StateMatcher;\n  private builder: StateBuilder;\n  stateQueue: StateQueueManager;\n\n  constructor(urlMatcherFactory: UrlMatcherFactory, urlRouterProvider) {\n    this.matcher = new StateMatcher(this.states);\n    this.builder = new StateBuilder(this.matcher, urlMatcherFactory);\n    this.stateQueue = new StateQueueManager(this.states, this.builder, urlRouterProvider);\n\n    let rootStateDef: StateDeclaration = {\n      name: '',\n      url: '^',\n      views: null,\n      params: {\n        '#': { value: null, type: 'hash', dynamic: true }\n      },\n      abstract: true\n    };\n\n    let _root = this._root = this.stateQueue.register(rootStateDef);\n    _root.navigable = null;\n  }\n\n  root() {\n    return this._root;\n  }\n\n  register(stateDefinition: StateDeclaration) {\n    return this.stateQueue.register(stateDefinition);\n  }\n\n  get(): StateDeclaration[];\n  get(stateOrName: StateOrName, base: StateOrName): StateDeclaration;\n  get(stateOrName?: StateOrName, base?: StateOrName): any {\n    if (arguments.length === 0) \n      return <StateDeclaration[]> Object.keys(this.states).map(name => this.states[name].self);\n    let found = this.matcher.find(stateOrName, base);\n    return found && found.self || null;\n  }\n\n  decorator(name: string, func: BuilderFunction) {\n    return this.builder.builder(name, func);\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./state/stateRegistry.ts\n **/","/** @module state */ /** for typedoc */\nimport {isString} from \"../common/predicates\";\nimport {StateOrName} from \"./interface\";\nimport {State} from \"./stateObject\";\n\nexport class StateMatcher {\n  constructor (private _states: { [key: string]: State }) { }\n  \n  isRelative(stateName: string) {\n    stateName = stateName || \"\";\n    return stateName.indexOf(\".\") === 0 || stateName.indexOf(\"^\") === 0;\n  }\n\n\n  find(stateOrName: StateOrName, base?: StateOrName): State {\n    if (!stateOrName && stateOrName !== \"\") return undefined;\n    let isStr = isString(stateOrName);\n    let name: string = isStr ? stateOrName : (<any>stateOrName).name;\n\n    if (this.isRelative(name)) name = this.resolvePath(name, base);\n    let state = this._states[name];\n\n    if (state && (isStr || (!isStr && (state === stateOrName || state.self === stateOrName)))) {\n      return state;\n    }\n    return undefined;\n  }\n\n  resolvePath(name: string, base: StateOrName) {\n    if (!base) throw new Error(`No reference point given for path '${name}'`);\n    \n    let baseState: State = this.find(base);\n\n    let splitName = name.split(\".\"), i = 0, pathLength = splitName.length, current = baseState;\n\n    for (; i < pathLength; i++) {\n      if (splitName[i] === \"\" && i === 0) {\n        current = baseState;\n        continue;\n      }\n      if (splitName[i] === \"^\") {\n        if (!current.parent) throw new Error(`Path '${name}' not valid for state '${baseState.name}'`);\n        current = current.parent;\n        continue;\n      }\n      break;\n    }\n    let relName = splitName.slice(i).join(\".\");\n    return current.name + (current.name && relName ? \".\" : \"\") + relName;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./state/stateMatcher.ts\n **/","/** @module state */ /** for typedoc */\nimport {map, omit, noop, extend, inherit, values, applyPairs, tail} from \"../common/common\";\nimport {isDefined, isFunction, isString, isArray} from \"../common/predicates\";\nimport {stringify} from \"../common/strings\";\nimport {prop, pattern, is, pipe, val} from \"../common/hof\";\nimport {StateDeclaration} from \"./interface\";\n\nimport {State} from \"./stateObject\";\nimport {StateMatcher} from \"./stateMatcher\";\nimport {Param} from \"../params/param\";\nimport {UrlMatcherFactory} from \"../url/urlMatcherFactory\";\nimport {UrlMatcher} from \"../url/urlMatcher\";\nimport {Resolvable} from \"../resolve/resolvable\";\nimport {services} from \"../common/coreservices\";\nimport {ResolvePolicy} from \"../resolve/interface\";\n\nconst parseUrl = (url: string): any => {\n  if (!isString(url)) return false;\n  let root = url.charAt(0) === '^';\n  return { val: root ? url.substring(1) : url, root };\n};\n\nexport type BuilderFunction = (state: State, parent?) => any;\n\ninterface Builders {\n  [key: string]: BuilderFunction[];\n\n  parent: BuilderFunction[];\n  data: BuilderFunction[];\n  url: BuilderFunction[];\n  navigable: BuilderFunction[];\n  params: BuilderFunction[];\n  views: BuilderFunction[];\n  path: BuilderFunction[];\n  includes: BuilderFunction[];\n  resolvables: BuilderFunction[];\n}\n\n\nfunction selfBuilder(state: State) {\n  state.self.$$state = () => state;\n  return state.self;\n}\n\nfunction dataBuilder(state: State) {\n  if (state.parent && state.parent.data) {\n    state.data = state.self.data = inherit(state.parent.data, state.data);\n  }\n  return state.data;\n}\n\nconst getUrlBuilder = ($urlMatcherFactoryProvider, root) =>\nfunction urlBuilder(state: State) {\n  let stateDec: StateDeclaration = <any> state;\n  const parsed = parseUrl(stateDec.url), parent = state.parent;\n  const url = !parsed ? stateDec.url : $urlMatcherFactoryProvider.compile(parsed.val, {\n    params: state.params || {},\n    paramMap: function (paramConfig, isSearch) {\n      if (stateDec.reloadOnSearch === false && isSearch) paramConfig = extend(paramConfig || {}, {dynamic: true});\n      return paramConfig;\n    }\n  });\n\n  if (!url) return null;\n  if (!$urlMatcherFactoryProvider.isMatcher(url)) throw new Error(`Invalid url '${url}' in state '${state}'`);\n  return (parsed && parsed.root) ? url : ((parent && parent.navigable) || root()).url.append(<UrlMatcher> url);\n};\n\nconst getNavigableBuilder = (isRoot) =>\nfunction navigableBuilder(state: State) {\n  return !isRoot(state) && state.url ? state : (state.parent ? state.parent.navigable : null);\n};\n\nfunction paramsBuilder(state: State): { [key: string]: Param } {\n  const makeConfigParam = (config: any, id: string) => Param.fromConfig(id, null, config);\n  let urlParams: Param[] = (state.url && state.url.parameters({inherit: false})) || [];\n  let nonUrlParams: Param[] = values(map(omit(state.params || {}, urlParams.map(prop('id'))), makeConfigParam));\n  return urlParams.concat(nonUrlParams).map(p => [p.id, p]).reduce(applyPairs, {});\n}\n\nfunction pathBuilder(state: State) {\n  return state.parent ? state.parent.path.concat(state) : /*root*/ [state];\n}\n\nfunction includesBuilder(state: State) {\n  let includes = state.parent ? extend({}, state.parent.includes) : {};\n  includes[state.name] = true;\n  return includes;\n}\n\n/**\n * This is a [[StateBuilder.builder]] function for the `resolve:` block on a [[StateDeclaration]].\n *\n * When the [[StateBuilder]] builds a [[State]] object from a raw [[StateDeclaration]], this builder\n * validates the `resolve` property and converts it to a [[Resolvable]] array.\n *\n * resolve: input value can be:\n *\n * {\n *   // analyzed but not injected\n *   myFooResolve: function() { return \"myFooData\"; },\n *\n *   // function.toString() parsed, \"DependencyName\" dep as string (not min-safe)\n *   myBarResolve: function(DependencyName) { return DependencyName.fetchSomethingAsPromise() },\n *\n *   // Array split; \"DependencyName\" dep as string\n *   myBazResolve: [ \"DependencyName\", function(dep) { return dep.fetchSomethingAsPromise() },\n *\n *   // Array split; DependencyType dep as token (compared using ===)\n *   myQuxResolve: [ DependencyType, function(dep) { return dep.fetchSometingAsPromise() },\n *\n *   // val.$inject used as deps\n *   // where:\n *   //     corgeResolve.$inject = [\"DependencyName\"];\n *   //     function corgeResolve(dep) { dep.fetchSometingAsPromise() }\n *   // then \"DependencyName\" dep as string\n *   myCorgeResolve: corgeResolve,\n *\n *  // inject service by name\n *  // When a string is found, desugar creating a resolve that injects the named service\n *   myGraultResolve: \"SomeService\"\n * }\n *\n * or:\n *\n * [\n *   new Resolvable(\"myFooResolve\", function() { return \"myFooData\" }),\n *   new Resolvable(\"myBarResolve\", function(dep) { return dep.fetchSomethingAsPromise() }, [ \"DependencyName\" ]),\n *   { provide: \"myBazResolve\", useFactory: function(dep) { dep.fetchSomethingAsPromise() }, deps: [ \"DependencyName\" ] }\n * ]\n */\nexport function resolvablesBuilder(state: State): Resolvable[] {\n  /** convert a resolve: {} object to an array of tuples */\n  const obj2Tuples        = obj => Object.keys(obj || {}).map(token => ({token, val: obj[token], deps: undefined}));\n  /** fetch DI annotations from a function or ng1-style array */\n  const annotate          = fn  => fn.$inject || services.$injector.annotate(fn, services.$injector.strictDi);\n  /** true if the object has both `token` and `resolveFn`, and is probably a [[ResolveLiteral]] */\n  const isResolveLiteral  = obj => !!(obj.token && obj.resolveFn);\n  /** true if the object looks like a provide literal, or a ng2 Provider */\n  const isLikeNg2Provider = obj => !!((obj.provide || obj.token) && (obj.useValue || obj.useFactory || obj.useExisting || obj.useClass));\n  /** true if the object looks like a tuple from obj2Tuples */\n  const isTupleFromObj    = obj => !!(obj && obj.val && (isString(obj.val) || isArray(obj.val)  || isFunction(obj.val)));\n  /** extracts the token from a Provider or provide literal */\n  const token             = p => p.provide || p.token;\n\n  /** Given a literal resolve or provider object, returns a Resolvable */\n  const literal2Resolvable = pattern([\n    [prop('resolveFn'),   p => new Resolvable(token(p), p.resolveFn, p.deps, p.policy)],\n    [prop('useFactory'),  p => new Resolvable(token(p), p.useFactory, (p.deps || p.dependencies), p.policy)],\n    [prop('useClass'),    p => new Resolvable(token(p), () => new (<any>p.useClass)(), [], p.policy)],\n    [prop('useValue'),    p => new Resolvable(token(p), () => p.useValue, [], p.policy, p.useValue)],\n    [prop('useExisting'), p => new Resolvable(token(p), (x) => x, [p.useExisting], p.policy)],\n  ]);\n\n  const tuple2Resolvable = pattern([\n    [pipe(prop(\"val\"), isString),   tuple => new Resolvable(tuple.token, x => x, [ tuple.val ], tuple.policy)],\n    [pipe(prop(\"val\"), isArray),    tuple => new Resolvable(tuple.token, tail(<any[]> tuple.val), tuple.val.slice(0, -1), tuple.policy)],\n    [pipe(prop(\"val\"), isFunction), tuple => new Resolvable(tuple.token, tuple.val, annotate(tuple.val), tuple.policy)],\n  ]);\n\n  const item2Resolvable = <(any) => Resolvable> pattern([\n    [is(Resolvable),                (r: Resolvable) => r],\n    [isResolveLiteral,              literal2Resolvable],\n    [isLikeNg2Provider,             literal2Resolvable],\n    [isTupleFromObj,                tuple2Resolvable],\n    [val(true),                     tuple => { throw new Error(\"Invalid resolve value: \" + stringify(tuple)) }]\n  ]);\n\n  // If resolveBlock is already an array, use it as-is.\n  // Otherwise, assume it's an object and convert to an Array of tuples\n  let decl = state.resolve;\n  let items: any[] = isArray(decl) ? decl : obj2Tuples(decl);\n  return items.map(item2Resolvable);\n}\n\n/**\n * @internalapi A internal global service\n *\n * StateBuilder is a factory for the internal [[State]] objects.\n *\n * When you register a state with the [[StateRegistry]], you register a plain old javascript object which\n * conforms to the [[StateDeclaration]] interface.  This factory takes that object and builds the corresponding\n * [[State]] object, which has an API and is used internally.\n *\n * Custom properties or API may be added to the internal [[State]] object by registering a decorator function\n * using the [[builder]] method.\n */\nexport class StateBuilder {\n  /** An object that contains all the BuilderFunctions registered, key'd by the name of the State property they build */\n  private builders: Builders;\n\n  constructor(private matcher: StateMatcher, $urlMatcherFactoryProvider: UrlMatcherFactory) {\n    let self = this;\n\n    const root = () => matcher.find(\"\");\n    const isRoot = (state) => state.name === \"\";\n\n    function parentBuilder(state: State) {\n      if (isRoot(state)) return null;\n      return matcher.find(self.parentName(state)) || root();\n    }\n\n    this.builders = {\n      self: [ selfBuilder ],\n      parent: [ parentBuilder ],\n      data: [ dataBuilder ],\n      // Build a URLMatcher if necessary, either via a relative or absolute URL\n      url: [ getUrlBuilder($urlMatcherFactoryProvider, root) ],\n      // Keep track of the closest ancestor state that has a URL (i.e. is navigable)\n      navigable: [ getNavigableBuilder(isRoot) ],\n      params: [ paramsBuilder ],\n      // Each framework-specific ui-router implementation should define its own `views` builder\n      // e.g., src/ng1/statebuilders/views.ts\n      views: [],\n      // Keep a full path from the root down to this state as this is needed for state activation.\n      path: [ pathBuilder ],\n      // Speed up $state.includes() as it's used a lot\n      includes: [ includesBuilder ],\n      resolvables: [ resolvablesBuilder ]\n    };\n  }\n\n  /**\n   * Registers a [[BuilderFunction]] for a specific [[State]] property (e.g., `parent`, `url`, or `path`).\n   * More than one BuilderFunction can be registered for a given property.\n   *\n   * The BuilderFunction(s) will be used to define the property on any subsequently built [[State]] objects.\n   *\n   * @param name The name of the State property being registered for.\n   * @param fn The BuilderFunction which will be used to build the State property\n   * @returns a function which deregisters the BuilderFunction\n   */\n  builder(name: string, fn: BuilderFunction) {\n    let builders = this.builders;\n    let array = builders[name] || [];\n    // Backwards compat: if only one builder exists, return it, else return whole arary.\n    if (isString(name) && !isDefined(fn)) return array.length > 1 ? array : array[0];\n    if (!isString(name) || !isFunction(fn)) return;\n\n    builders[name] = array;\n    builders[name].push(fn);\n    return () => builders[name].splice(builders[name].indexOf(fn, 1)) && null;\n  }\n\n  /**\n   * Builds all of the properties on an essentially blank State object, returning a State object which has all its\n   * properties and API built.\n   *\n   * @param state an uninitialized State object\n   * @returns the built State object\n   */\n  build(state: State): State {\n    let {matcher, builders} = this;\n    let parent = this.parentName(state);\n    if (parent && !matcher.find(parent)) return null;\n\n    for (let key in builders) {\n      if (!builders.hasOwnProperty(key)) continue;\n      let chain = builders[key].reduce((parentFn, step: BuilderFunction) => (_state) => step(_state, parentFn), noop);\n      state[key] = chain(state);\n    }\n    return state;\n  }\n\n  parentName(state) {\n    let name = state.name || \"\";\n    if (name.indexOf('.') !== -1) return name.substring(0, name.lastIndexOf('.'));\n    if (!state.parent) return \"\";\n    return isString(state.parent) ? state.parent : state.parent.name;\n  }\n\n  name(state) {\n    let name = state.name;\n    if (name.indexOf('.') !== -1 || !state.parent) return name;\n\n    let parentName = isString(state.parent) ? state.parent : state.parent.name;\n    return parentName ? parentName + \".\" + name : name;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./state/stateBuilder.ts\n **/","/** @module state */ /** for typedoc */\nimport {extend, inherit, pluck, equalForKeys, abstractKey} from \"../common/common\";\nimport {isString} from \"../common/predicates\";\nimport {StateDeclaration} from \"./interface\";\nimport {State} from \"./stateObject\";\nimport {StateBuilder} from \"./stateBuilder\";\nimport {StateService} from \"./stateService\";\n\nexport class StateQueueManager {\n  queue: State[];\n  private $state: StateService;\n\n  constructor(\n      public states: { [key: string]: State; },\n      public builder: StateBuilder,\n      public $urlRouterProvider) {\n    this.queue = [];\n  }\n\n  register(config: StateDeclaration) {\n    let {states, queue, $state} = this;\n    // Wrap a new object around the state so we can store our private details easily.\n    // @TODO: state = new State(extend({}, config, { ... }))\n    let state = inherit(new State(), extend({}, config, {\n      self: config,\n      resolve: config.resolve || [],\n      toString: () => config.name\n    }));\n\n    if (!isString(state.name)) throw new Error(\"State must have a valid name\");\n    if (states.hasOwnProperty(state.name) || pluck(queue, 'name').indexOf(state.name) !== -1)\n      throw new Error(`State '${state.name}' is already defined`);\n\n    queue.push(state);\n\n    if (this.$state) {\n      this.flush($state);\n    }\n    return state;\n  }\n\n  flush($state) {\n    let {queue, states, builder} = this;\n    let result, state, orphans = [], orphanIdx, previousQueueLength = {};\n\n    while (queue.length > 0) {\n      state = queue.shift();\n      result = builder.build(state);\n      orphanIdx = orphans.indexOf(state);\n\n      if (result) {\n        if (states.hasOwnProperty(state.name))\n          throw new Error(`State '${name}' is already defined`);\n        states[state.name] = state;\n        this.attachRoute($state, state);\n        if (orphanIdx >= 0) orphans.splice(orphanIdx, 1);\n        continue;\n      }\n\n      let prev = previousQueueLength[state.name];\n      previousQueueLength[state.name] = queue.length;\n      if (orphanIdx >= 0 && prev === queue.length) {\n        // Wait until two consecutive iterations where no additional states were dequeued successfully.\n        // throw new Error(`Cannot register orphaned state '${state.name}'`);\n        return states;\n      } else if (orphanIdx < 0) {\n        orphans.push(state);\n      }\n\n      queue.push(state);\n    }\n    return states;\n  }\n\n  autoFlush($state) {\n    this.$state = $state;\n    this.flush($state);\n  }\n\n  attachRoute($state, state) {\n    let {$urlRouterProvider} = this;\n    if (state[abstractKey] || !state.url) return;\n\n    $urlRouterProvider.when(state.url, ['$match', '$stateParams', function ($match, $stateParams) {\n      if ($state.$current.navigable !== state || !equalForKeys($match, $stateParams)) {\n        $state.transitionTo(state, $match, { inherit: true, location: false });\n      }\n    }]);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./state/stateQueueManager.ts\n **/","/** @module state */ /** for typedoc */\n\nimport {StateDeclaration, _ViewDeclaration} from \"./interface\";\nimport {extend, defaults, values, find} from \"../common/common\";\nimport {propEq} from \"../common/hof\";\nimport {Param} from \"../params/param\";\nimport {UrlMatcher} from \"../url/urlMatcher\";\nimport {Resolvable} from \"../resolve/resolvable\";\n\n/**\n * @ngdoc object\n * @name ui.router.state.type:State\n *\n * @description\n * Definition object for states. Includes methods for manipulating the state heirarchy.\n *\n * @param {Object} config  A configuration object hash that includes the results of user-supplied\n *        values, as well as values from `StateBuilder`.\n *\n * @returns {Object}  Returns a new `State` object.\n */\nexport class State {\n\n  public parent: State;\n  public name: string;\n  public abstract: boolean;\n  public resolve: ({ [key: string]: (string|any[]|Function) }|any[]);\n  public resolvables: Resolvable[];\n  public resolvePolicy: any;\n  public url: UrlMatcher;\n  public params: { [key: string]: Param };\n  public views: { [key: string]: _ViewDeclaration; };\n  public self: StateDeclaration;\n  public navigable: State;\n  public path: State[];\n  public data: any;\n  public includes: { [name: string] : boolean };\n\n  constructor(config?: StateDeclaration) {\n    extend(this, config);\n    // Object.freeze(this);\n  }\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.type:State#is\n   * @methodOf ui.router.state.type:State\n   *\n   * @description\n   * Compares the identity of the state against the passed value, which is either an object\n   * reference to the actual `State` instance, the original definition object passed to\n   * `$stateProvider.state()`, or the fully-qualified name.\n   *\n   * @param {Object} ref Can be one of (a) a `State` instance, (b) an object that was passed\n   *        into `$stateProvider.state()`, (c) the fully-qualified name of a state as a string.\n   * @returns {boolean} Returns `true` if `ref` matches the current `State` instance.\n   */\n  is(ref: State|StateDeclaration|string): boolean {\n    return this === ref || this.self === ref || this.fqn() === ref;\n  }\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.type:State#fqn\n   * @methodOf ui.router.state.type:State\n   *\n   * @description\n   * Returns the fully-qualified name of the state, based on its current position in the tree.\n   *\n   * @returns {string} Returns a dot-separated name of the state.\n   */\n  fqn(): string {\n    if (!this.parent || !(this.parent instanceof this.constructor)) return this.name;\n    let name = this.parent.fqn();\n    return name ? name + \".\" + this.name : this.name;\n  }\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.type:State#root\n   * @methodOf ui.router.state.type:State\n   *\n   * @description\n   * Returns the root node of this state's tree.\n   *\n   * @returns {State} The root of this state's tree.\n   */\n  root(): State {\n    return this.parent && this.parent.root() || this;\n  }\n\n  parameters(opts?): Param[] {\n    opts = defaults(opts, { inherit: true });\n    let inherited = opts.inherit && this.parent && this.parent.parameters() || [];\n    return inherited.concat(values(this.params));\n  }\n\n  parameter(id: string, opts: any = {}): Param {\n    return (\n        this.url && this.url.parameter(id, opts) ||\n        find(values(this.params), propEq('id', id)) ||\n        opts.inherit && this.parent && this.parent.parameter(id)\n    );\n  }\n\n  toString() {\n    return this.fqn();\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./state/stateObject.ts\n **/","/** @module state */ /** */\nimport {extend, defaults, silentRejection, silenceUncaughtInPromise} from \"../common/common\";\nimport {isDefined, isObject, isString} from \"../common/predicates\";\nimport {Queue} from \"../common/queue\";\nimport {services} from \"../common/coreservices\";\n\nimport {PathFactory} from \"../path/pathFactory\";\nimport {PathNode} from \"../path/node\";\n\nimport {TransitionOptions} from \"../transition/interface\";\nimport {defaultTransOpts} from \"../transition/transitionService\";\nimport {Rejection, RejectType} from \"../transition/rejectFactory\";\nimport {Transition} from \"../transition/transition\";\n\nimport {StateOrName, StateDeclaration, TransitionPromise} from \"./interface\";\nimport {State} from \"./stateObject\";\nimport {TargetState} from \"./targetState\";\n\nimport {RawParams} from \"../params/interface\";\nimport {ParamsOrArray} from \"../params/interface\";\nimport {Param} from \"../params/param\";\nimport {Glob} from \"../common/glob\";\nimport {equalForKeys} from \"../common/common\";\nimport {HrefOptions} from \"./interface\";\nimport {bindFunctions} from \"../common/common\";\nimport {Globals} from \"../globals\";\nimport {UIRouter} from \"../router\";\nimport {StateParams} from \"../params/stateParams\"; // for params() return type\n\nexport class StateService {\n  get transition()  { return this.router.globals.transition; }\n  get params()      { return this.router.globals.params; }\n  get current()     { return this.router.globals.current; }\n  get $current()    { return this.router.globals.$current; }\n\n  /** @hidden */\n  constructor(private router: UIRouter) {\n    let getters = ['current', '$current', 'params', 'transition'];\n    let boundFns = Object.keys(StateService.prototype).filter(key => getters.indexOf(key) === -1);\n    bindFunctions(StateService.prototype, this, this, boundFns);\n  }\n\n  /**\n   * Handler for when [[transitionTo]] is called with an invalid state.\n   *\n   * Invokes the [[onInvalid]] callbacks, in natural order.\n   * Each callback's return value is checked in sequence until one of them returns an instance of TargetState.\n   * The results of the callbacks are wrapped in $q.when(), so the callbacks may return promises.\n   *\n   * If a callback returns an TargetState, then it is used as arguments to $state.transitionTo() and the result returned.\n   */\n  private _handleInvalidTargetState(fromPath: PathNode[], $to$: TargetState) {\n    let globals = <Globals> this.router.globals;\n    const latestThing = () => globals.transitionHistory.peekTail();\n    let latest = latestThing();\n    let $from$ = PathFactory.makeTargetState(fromPath);\n    let callbackQueue = new Queue<Function>([].concat(this.router.stateProvider.invalidCallbacks));\n    let {$q, $injector} = services;\n\n    const invokeCallback = (callback: Function) => $q.when($injector.invoke(callback, null, { $to$, $from$ }));\n\n    const checkForRedirect = (result) => {\n      if (!(result instanceof TargetState)) {\n        return;\n      }\n      let target = <TargetState> result;\n      // Recreate the TargetState, in case the state is now defined.\n      target = this.target(target.identifier(), target.params(), target.options());\n\n      if (!target.valid()) return Rejection.invalid(target.error()).toPromise();\n      if (latestThing() !== latest) return Rejection.superseded().toPromise();\n\n      return this.transitionTo(target.identifier(), target.params(), target.options());\n    };\n\n    function invokeNextCallback() {\n      let nextCallback = callbackQueue.dequeue();\n      if (nextCallback === undefined) return Rejection.invalid($to$.error()).toPromise();\n      return invokeCallback(nextCallback).then(checkForRedirect).then(result => result || invokeNextCallback());\n    }\n\n    return invokeNextCallback();\n  }\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.$state#reload\n   * @methodOf ui.router.state.$state\n   *\n   * @description\n   * A method that force reloads the current state, or a partial state hierarchy. All resolves are re-resolved,\n   * controllers reinstantiated, and events re-fired.\n   *\n   * @example\n   * <pre>\n   * let app angular.module('app', ['ui.router']);\n   *\n   * app.controller('ctrl', function ($scope, $state) {\n   *   $scope.reload = function(){\n   *     $state.reload();\n   *   }\n   * });\n   * </pre>\n   *\n   * `reload()` is just an alias for:\n   * <pre>\n   * $state.transitionTo($state.current, $stateParams, {\n   *   reload: true, inherit: false, notify: true\n   * });\n   * </pre>\n   *\n   * @param {string=|object=} reloadState - A state name or a state object, which is the root of the resolves to be re-resolved.\n   * @example\n   * <pre>\n   * //assuming app application consists of 3 states: 'contacts', 'contacts.detail', 'contacts.detail.item'\n   * //and current state is 'contacts.detail.item'\n   * let app angular.module('app', ['ui.router']);\n   *\n   * app.controller('ctrl', function ($scope, $state) {\n   *   $scope.reload = function(){\n   *     //will reload 'contact.detail' and nested 'contact.detail.item' states\n   *     $state.reload('contact.detail');\n   *   }\n   * });\n   * </pre>\n   *\n   * @returns {promise} A promise representing the state of the new transition. See\n   * {@link ui.router.state.$state#methods_go $state.go}.\n   */\n  reload(reloadState: StateOrName): Promise<State> {\n    return this.transitionTo(this.current, this.params, {\n      reload: isDefined(reloadState) ? reloadState : true,\n      inherit: false,\n      notify: false\n    });\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.$state#go\n   * @methodOf ui.router.state.$state\n   *\n   * @description\n   * Convenience method for transitioning to a new state. `$state.go` calls\n   * `$state.transitionTo` internally but automatically sets options to\n   * `{ location: true, inherit: true, relative: $state.$current, notify: true }`.\n   * This allows you to easily use an absolute or relative to path and specify\n   * only the parameters you'd like to update (while letting unspecified parameters\n   * inherit from the currently active ancestor states).\n   *\n   * @example\n   * <pre>\n   * let app = angular.module('app', ['ui.router']);\n   *\n   * app.controller('ctrl', function ($scope, $state) {\n   *   $scope.changeState = function () {\n   *     $state.go('contact.detail');\n   *   };\n   * });\n   * </pre>\n   * <img src='../ngdoc_assets/StateGoExamples.png'/>\n   *\n   * @param {string} to Absolute state name or relative state path. Some examples:\n   *\n   * - `$state.go('contact.detail')` - will go to the `contact.detail` state\n   * - `$state.go('^')` - will go to a parent state\n   * - `$state.go('^.sibling')` - will go to a sibling state\n   * - `$state.go('.child.grandchild')` - will go to grandchild state\n   *\n   * @param {object=} params A map of the parameters that will be sent to the state,\n   * will populate $stateParams. Any parameters that are not specified will be inherited from currently\n   * defined parameters. This allows, for example, going to a sibling state that shares parameters\n   * specified in a parent state. Parameter inheritance only works between common ancestor states, I.e.\n   * transitioning to a sibling will get you the parameters for all parents, transitioning to a child\n   * will get you all current parameters, etc.\n   * @param {object=} options Options object. The options are:\n   *\n   * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`\n   *    will not. If string, must be `\"replace\"`, which will update url and also replace last history record.\n   * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.\n   * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'),\n   *    defines which state to be relative from.\n   * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.\n   * - **`reload`** (v0.2.5) - {boolean=false}, If `true` will force transition even if the state or params\n   *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd\n   *    use this when you want to force a reload when *everything* is the same, including search params.\n   *\n   * @returns {promise} A promise representing the state of the new transition.\n   *\n   * Possible success values:\n   *\n   * - $state.current\n   *\n   * <br/>Possible rejection values:\n   *\n   * - 'transition superseded' - when a newer transition has been started after this one\n   * - 'transition prevented' - when `event.preventDefault()` has been called in a `$stateChangeStart` listener\n   * - 'transition aborted' - when `event.preventDefault()` has been called in a `$stateNotFound` listener or\n   *   when a `$stateNotFound` `event.retry` promise errors.\n   * - 'transition failed' - when a state has been unsuccessfully found after 2 tries.\n   * - *resolve error* - when an error has occurred with a `resolve`\n   *\n   */\n  go(to: StateOrName, params?: RawParams, options?: TransitionOptions): TransitionPromise {\n    let defautGoOpts = { relative: this.$current, inherit: true };\n    let transOpts = defaults(options, defautGoOpts, defaultTransOpts);\n    return this.transitionTo(to, params, transOpts);\n  };\n\n  /** Factory method for creating a TargetState */\n  target(identifier: StateOrName, params?: ParamsOrArray, options: TransitionOptions = {}): TargetState {\n    // If we're reloading, find the state object to reload from\n    if (isObject(options.reload) && !(<any>options.reload).name)\n      throw new Error('Invalid reload state object');\n    let reg = this.router.stateRegistry;\n    options.reloadState = options.reload === true ? reg.root() : reg.matcher.find(<any> options.reload, options.relative);\n\n    if (options.reload && !options.reloadState)\n      throw new Error(`No such reload state '${(isString(options.reload) ? options.reload : (<any>options.reload).name)}'`);\n\n    let stateDefinition = reg.matcher.find(identifier, options.relative);\n    return new TargetState(identifier, stateDefinition, params, options);\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.$state#transitionTo\n   * @methodOf ui.router.state.$state\n   *\n   * @description\n   * Low-level method for transitioning to a new state. {@link ui.router.state.$state#methods_go $state.go}\n   * uses `transitionTo` internally. `$state.go` is recommended in most situations.\n   *\n   * @example\n   * <pre>\n   * let app = angular.module('app', ['ui.router']);\n   *\n   * app.controller('ctrl', function ($scope, $state) {\n   *   $scope.changeState = function () {\n   *     $state.transitionTo('contact.detail');\n   *   };\n   * });\n   * </pre>\n   *\n   * @param {string} to State name.\n   * @param {object=} toParams A map of the parameters that will be sent to the state,\n   * will populate $stateParams.\n   * @param {object=} options Options object. The options are:\n   *\n   * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`\n   *    will not. If string, must be `\"replace\"`, which will update url and also replace last history record.\n   * - **`inherit`** - {boolean=false}, If `true` will inherit url parameters from current url.\n   * - **`relative`** - {object=}, When transitioning with relative path (e.g '^'),\n   *    defines which state to be relative from.\n   * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.\n   * - **`reload`** (v0.2.5) - {boolean=false}, If `true` will force transition even if the state or params\n   *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd\n   *    use this when you want to force a reload when *everything* is the same, including search params.\n   *\n   * @returns {promise} A promise representing the state of the new transition. See\n   * {@link ui.router.state.$state#methods_go $state.go}.\n   */\n  transitionTo(to: StateOrName, toParams: RawParams = {}, options: TransitionOptions = {}): TransitionPromise {\n    let router = this.router;\n    let globals = <Globals> router.globals;\n    let transHistory = globals.transitionHistory;\n    options = defaults(options, defaultTransOpts);\n    options = extend(options, { current: transHistory.peekTail.bind(transHistory)});\n\n    let ref: TargetState = this.target(to, toParams, options);\n    let latestSuccess: Transition = globals.successfulTransitions.peekTail();\n    const rootPath = () => [ new PathNode(this.router.stateRegistry.root()) ];\n    let currentPath: PathNode[] = latestSuccess ? latestSuccess.treeChanges().to : rootPath();\n\n    if (!ref.exists())\n      return this._handleInvalidTargetState(currentPath, ref);\n\n    if (!ref.valid())\n      return <TransitionPromise> silentRejection(ref.error());\n\n    /**\n     * Special handling for Ignored, Aborted, and Redirected transitions\n     *\n     * The semantics for the transition.run() promise and the StateService.transitionTo()\n     * promise differ. For instance, the run() promise may be rejected because it was\n     * IGNORED, but the transitionTo() promise is resolved because from the user perspective\n     * no error occurred.  Likewise, the transition.run() promise may be rejected because of\n     * a Redirect, but the transitionTo() promise is chained to the new Transition's promise.\n     */\n    const rejectedTransitionHandler = (transition) => (error) => {\n      if (error instanceof Rejection) {\n        if (error.type === RejectType.IGNORED) {\n          router.urlRouter.update();\n          return globals.current;\n        }\n\n        if (error.type === RejectType.SUPERSEDED && error.redirected && error.detail instanceof TargetState) {\n          let redirect: Transition = transition.redirect(error.detail);\n          return redirect.run().catch(rejectedTransitionHandler(redirect));\n        }\n\n        if (error.type === RejectType.ABORTED) {\n          router.urlRouter.update();\n          return services.$q.reject(error);\n        }\n      }\n\n      var errorHandler = this.defaultErrorHandler();\n      errorHandler(error);\n\n      return services.$q.reject(error);\n    };\n\n    let transition = this.router.transitionService.create(currentPath, ref);\n    let transitionToPromise = transition.run().catch(rejectedTransitionHandler(transition));\n    silenceUncaughtInPromise(transitionToPromise); // issue #2676\n\n    // Return a promise for the transition, which also has the transition object on it.\n    return extend(transitionToPromise, { transition });\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.$state#is\n   * @methodOf ui.router.state.$state\n   *\n   * @description\n   * Similar to {@link ui.router.state.$state#methods_includes $state.includes},\n   * but only checks for the full state name. If params is supplied then it will be\n   * tested for strict equality against the current active params object, so all params\n   * must match with none missing and no extras.\n   *\n   * @example\n   * <pre>\n   * $state.$current.name = 'contacts.details.item';\n   *\n   * // absolute name\n   * $state.is('contact.details.item'); // returns true\n   * $state.is(contactDetailItemStateObject); // returns true\n   *\n   * // relative name (. and ^), typically from a template\n   * // E.g. from the 'contacts.details' template\n   * <div ng-class=\"{highlighted: $state.is('.item')}\">Item</div>\n   * </pre>\n   *\n   * @param {string|object} stateOrName The state name (absolute or relative) or state object you'd like to check.\n   * @param {object=} params A param object, e.g. `{sectionId: section.id}`, that you'd like\n   * to test against the current active state.\n   * @param {object=} options An options object.  The options are:\n   *\n   * - **`relative`** - {string|object} -  If `stateOrName` is a relative state name and `options.relative` is set, .is will\n   * test relative to `options.relative` state (or name).\n   *\n   * @returns {boolean} Returns true if it is the state.\n   */\n  is(stateOrName: StateOrName, params?: RawParams, options?: TransitionOptions): boolean {\n    options = defaults(options, { relative: this.$current });\n    let state = this.router.stateRegistry.matcher.find(stateOrName, options.relative);\n    if (!isDefined(state)) return undefined;\n    if (this.$current !== state) return false;\n    return isDefined(params) && params !== null ? Param.equals(state.parameters(), this.params, params) : true;\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.$state#includes\n   * @methodOf ui.router.state.$state\n   *\n   * @description\n   * A method to determine if the current active state is equal to or is the child of the\n   * state stateName. If any params are passed then they will be tested for a match as well.\n   * Not all the parameters need to be passed, just the ones you'd like to test for equality.\n   *\n   * @example\n   * Partial and relative names\n   * <pre>\n   * $state.$current.name = 'contacts.details.item';\n   *\n   * // Using partial names\n   * $state.includes(\"contacts\"); // returns true\n   * $state.includes(\"contacts.details\"); // returns true\n   * $state.includes(\"contacts.details.item\"); // returns true\n   * $state.includes(\"contacts.list\"); // returns false\n   * $state.includes(\"about\"); // returns false\n   *\n   * // Using relative names (. and ^), typically from a template\n   * // E.g. from the 'contacts.details' template\n   * <div ng-class=\"{highlighted: $state.includes('.item')}\">Item</div>\n   * </pre>\n   *\n   * Basic globbing patterns\n   * <pre>\n   * $state.$current.name = 'contacts.details.item.url';\n   *\n   * $state.includes(\"*.details.*.*\"); // returns true\n   * $state.includes(\"*.details.**\"); // returns true\n   * $state.includes(\"**.item.**\"); // returns true\n   * $state.includes(\"*.details.item.url\"); // returns true\n   * $state.includes(\"*.details.*.url\"); // returns true\n   * $state.includes(\"*.details.*\"); // returns false\n   * $state.includes(\"item.**\"); // returns false\n   * </pre>\n   *\n   * @param {string} stateOrName A partial name, relative name, or glob pattern\n   * to be searched for within the current state name.\n   * @param {object=} params A param object, e.g. `{sectionId: section.id}`,\n   * that you'd like to test against the current active state.\n   * @param {object=} options An options object.  The options are:\n   *\n   * - **`relative`** - {string|object=} -  If `stateOrName` is a relative state reference and `options.relative` is set,\n   * .includes will test relative to `options.relative` state (or name).\n   *\n   * @returns {boolean} Returns true if it does include the state\n   */\n  includes(stateOrName: StateOrName, params?: RawParams, options?: TransitionOptions): boolean {\n    options = defaults(options, { relative: this.$current });\n    let glob = isString(stateOrName) && Glob.fromString(<string> stateOrName);\n\n    if (glob) {\n      if (!glob.matches(this.$current.name)) return false;\n      stateOrName = this.$current.name;\n    }\n    let state = this.router.stateRegistry.matcher.find(stateOrName, options.relative), include = this.$current.includes;\n\n    if (!isDefined(state)) return undefined;\n    if (!isDefined(include[state.name])) return false;\n    // @TODO Replace with Param.equals() ?\n    return params ? equalForKeys(Param.values(state.parameters(), params), this.params, Object.keys(params)) : true;\n  };\n\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.$state#href\n   * @methodOf ui.router.state.$state\n   *\n   * @description\n   * A url generation method that returns the compiled url for the given state populated with the given params.\n   *\n   * @example\n   * <pre>\n   * expect($state.href(\"about.person\", { person: \"bob\" })).toEqual(\"/about/bob\");\n   * </pre>\n   *\n   * @param {string|object} stateOrName The state name or state object you'd like to generate a url from.\n   * @param {object=} params An object of parameter values to fill the state's required parameters.\n   * @param {object=} options Options object. The options are:\n   *\n   * - **`lossy`** - {boolean=true} -  If true, and if there is no url associated with the state provided in the\n   *    first parameter, then the constructed href url will be built from the first navigable ancestor (aka\n   *    ancestor with a valid url).\n   * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.\n   * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'),\n   *    defines which state to be relative from.\n   * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. \"http://www.example.com/fullurl\".\n   *\n   * @returns {string} compiled state url\n   */\n  href(stateOrName: StateOrName, params?: RawParams, options?: HrefOptions): string {\n    let defaultHrefOpts = {\n      lossy:    true,\n      inherit:  true,\n      absolute: false,\n      relative: this.$current\n    };\n    options = defaults(options, defaultHrefOpts);\n\n    let state = this.router.stateRegistry.matcher.find(stateOrName, options.relative);\n\n    if (!isDefined(state)) return null;\n    if (options.inherit) params = <any> this.params.$inherit(params || {}, this.$current, state);\n\n    let nav = (state && options.lossy) ? state.navigable : state;\n\n    if (!nav || nav.url === undefined || nav.url === null) {\n      return null;\n    }\n    return this.router.urlRouter.href(nav.url, Param.values(state.parameters(), params), {\n      absolute: options.absolute\n    });\n  };\n\n  /** @hidden */\n  private _defaultErrorHandler: ((_error) => void) = function $defaultErrorHandler($error$) {\n    if ($error$ instanceof Error && $error$.stack) {\n      console.error($error$.stack);\n    } else if ($error$ instanceof Rejection) {\n      console.error($error$);\n      if ($error$.detail && $error$.detail.stack)\n        console.error($error$.detail.stack);\n    } else {\n      console.error($error$);\n    }\n  };\n\n  /**\n   * Sets or gets the default [[transitionTo]] error handler.\n   *\n   * The error handler is called when a [[Transition]] is rejected or when any error occurred during the Transition.\n   * This includes errors caused by resolves and transition hooks.\n   *\n   * The built-in default error handler logs the error to the console.\n   *\n   * You can provide your own custom handler.\n   *\n   * @example\n   * ```js\n   *\n   * stateService.defaultErrorHandler(function() {\n   *   // Do not log transitionTo errors\n   * });\n   * ```\n   *\n   * @param handler a global error handler function\n   * @returns the current global error handler\n   */\n  defaultErrorHandler(handler?: (error) => void): (error) => void {\n    return this._defaultErrorHandler = handler || this._defaultErrorHandler;\n  }\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.$state#get\n   * @methodOf ui.router.state.$state\n   *\n   * @description\n   * Returns the state configuration object for any specific state or all states.\n   *\n   * @param {string|Object=} stateOrName (absolute or relative) If provided, will only get the config for\n   * the requested state. If not provided, returns an array of ALL state configs.\n   * @param {string|object=} base When stateOrName is a relative state reference, the state will be retrieved relative to context.\n   * @returns {Object|Array} State configuration object or array of all objects.\n   */\n  get(): StateDeclaration[];\n  get(stateOrName: StateOrName): StateDeclaration;\n  get(stateOrName: StateOrName, base: StateOrName): StateDeclaration;\n  get(stateOrName?: StateOrName, base?: StateOrName): any {\n    let reg = this.router.stateRegistry;\n    if (arguments.length === 0) return reg.get();\n    return reg.get(stateOrName, base || this.$current);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./state/stateService.ts\n **/","/** @module core */ /** */\nimport {StateParams} from \"./params/stateParams\";\nimport {StateDeclaration} from \"./state/interface\";\nimport {State} from \"./state/stateObject\";\nimport {Transition} from \"./transition/transition\";\nimport {Queue} from \"./common/queue\";\nimport {TransitionService} from \"./transition/transitionService\";\nimport {copy} from \"./common/common\";\nimport {Observable} from \"rxjs/Rx\";\n\n/**\n * Global mutable state\n *\n * This is where we hold the global mutable state such as current state, current\n * params, current transition, etc.\n */\nexport interface UIRouterGlobals {\n  /**\n   * Current parameter values\n   *\n   * The parameter values from the latest successful transition\n   */\n  params: StateParams;\n  /**\n   * Current state\n   *\n   * The to-state from the latest successful transition\n   */\n  current: StateDeclaration;\n  /**\n   * Current state\n   *\n   * The to-state from the latest successful transition\n   */\n  $current: State;\n  /**\n   * The current transition (in progress)\n   */\n  transition: Transition;\n}\n\n\n/**\n * Global mutable state\n */\nexport class Globals implements UIRouterGlobals {\n  params: StateParams = new StateParams();\n  current: StateDeclaration;\n  $current: State;\n  transition: Transition;\n  transitionHistory = new Queue<Transition>([], 1);\n  successfulTransitions = new Queue<Transition>([], 1);\n\n  constructor(transitionService: TransitionService) {\n    const beforeNewTransition = ($transition$: Transition) => {\n\n      this.transition = $transition$;\n      this.transitionHistory.enqueue($transition$);\n\n      const updateGlobalState = () => {\n        this.successfulTransitions.enqueue($transition$);\n        this.$current = $transition$.$to();\n        this.current = this.$current.self;\n        copy($transition$.params(), this.params);\n      };\n\n      $transition$.onSuccess({}, updateGlobalState, {priority: 10000});\n\n      const clearCurrentTransition = () => { if (this.transition === $transition$) this.transition = null; };\n\n      $transition$.promise.then(clearCurrentTransition, clearCurrentTransition);\n\n    };\n\n    transitionService.onBefore({}, beforeNewTransition);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./globals.ts\n **/","/** @module params */ /** for typedoc */\nimport {extend, ancestors} from \"../common/common\";\n\nexport class StateParams {\n  constructor(params: Object = {}) {\n    extend(this, params);\n  }\n\n  /**\n   * Merges a set of parameters with all parameters inherited between the common parents of the\n   * current state and a given destination state.\n   *\n   * @param {Object} newParams The set of parameters which will be composited with inherited params.\n   * @param {Object} $current Internal definition of object representing the current state.\n   * @param {Object} $to Internal definition of object representing state to transition to.\n   */\n  $inherit(newParams, $current, $to) {\n    let parents = ancestors($current, $to), parentParams, inherited = {}, inheritList = [];\n\n    for (let i in parents) {\n      if (!parents[i] || !parents[i].params) continue;\n      parentParams = Object.keys(parents[i].params);\n      if (!parentParams.length) continue;\n\n      for (let j in parentParams) {\n        if (inheritList.indexOf(parentParams[j]) >= 0) continue;\n        inheritList.push(parentParams[j]);\n        inherited[parentParams[j]] = this[parentParams[j]];\n      }\n    }\n    return extend({}, inherited, newParams);\n  };\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./params/stateParams.ts\n **/","/**\n * This module contains code for State Parameters.\n *\n * See [[ParamDeclaration]]\n * @module params\n * @preferred doc\n */\n/** for typedoc */\nexport * from \"./interface\";\nexport * from \"./param\";\nexport * from \"./paramTypes\";\nexport * from \"./stateParams\";\nexport * from \"./type\";\n\n\n\n/** WEBPACK FOOTER **\n ** ./params/module.ts\n **/","/** @module path */ /** for typedoc */\nexport * from \"./node\";\nexport * from \"./pathFactory\";\n\n\n/** WEBPACK FOOTER **\n ** ./path/module.ts\n **/","/** @module resolve */ /** for typedoc */\nexport * from \"./interface\";\nexport * from \"./resolvable\";\nexport * from \"./resolveContext\";\n\n\n\n/** WEBPACK FOOTER **\n ** ./resolve/module.ts\n **/","/** @module state */ /** for typedoc */\nexport * from \"./interface\";\nexport * from \"./state\";\nexport * from \"./stateBuilder\";\nexport * from \"./stateObject\";\nexport * from \"./stateMatcher\";\nexport * from \"./stateQueueManager\";\nexport * from \"./stateRegistry\";\nexport * from \"./stateService\";\nexport * from \"./targetState\";\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./state/module.ts\n **/","/**\n * This module contains APIs related to a Transition.\n *\n * See [[Transition]], [[$transitions]]\n *\n * @module transition\n * @preferred\n */\n/** for typedoc */\nexport * from \"./interface\";\nexport * from \"./hookBuilder\";\nexport * from \"./hookRegistry\";\nexport * from \"./rejectFactory\";\nexport * from \"./transition\";\nexport * from \"./transitionHook\";\nexport * from \"./transitionService\";\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./transition/module.ts\n **/","/** @module url */ /** for typedoc */\nexport * from \"./urlMatcher\";\nexport * from \"./urlMatcherConfig\";\nexport * from \"./urlMatcherFactory\";\nexport * from \"./urlRouter\";\n\n\n\n/** WEBPACK FOOTER **\n ** ./url/module.ts\n **/","/** @module view */ /** for typedoc */\nexport * from \"./interface\";\nexport * from \"./view\";\n\n\n\n/** WEBPACK FOOTER **\n ** ./view/module.ts\n **/","/**\n * # UI-Router for Angular 1\n *\n * - Provides an implementation for the [[CoreServices]] API, based on angular 1 services.\n * - Also registers some services with the angular 1 injector.\n * - Creates and bootstraps a new [[UIRouter]] object.  Ties it to the the angular 1 lifecycle.\n *\n * @module ng1\n * @preferred\n */\n\n/** for typedoc */\nimport {UIRouter} from \"../router\";\nimport {services} from \"../common/coreservices\";\nimport {bindFunctions, removeFrom, applyPairs} from \"../common/common\";\nimport {prop} from \"../common/hof\";\nimport {isObject, isString} from \"../common/predicates\";\nimport {resolveFactory} from \"./legacy/resolveService\";\nimport {trace} from \"../common/trace\";\nimport {ng1ViewsBuilder, ng1ViewConfigFactory} from \"./statebuilders/views\";\nimport {TemplateFactory} from \"./templateFactory\";\nimport {StateParams} from \"../params/stateParams\";\nimport {TransitionService} from \"../transition/transitionService\";\nimport {StateService} from \"../state/stateService\";\nimport {StateProvider} from \"../state/state\";\nimport {UrlRouterProvider, UrlRouter} from \"../url/urlRouter\";\nimport {UrlMatcherFactory} from \"../url/urlMatcherFactory\";\nimport {getStateHookBuilder} from \"./statebuilders/onEnterExitRetain\";\nimport {ResolveContext} from \"../resolve/resolveContext\";\nimport IInjectorService = angular.auto.IInjectorService;\n\n/** @hidden */\nlet app = angular.module(\"ui.router.angular1\", []);\n\n/**\n * @ngdoc overview\n * @name ui.router.util\n *\n * @description\n * # ui.router.util sub-module\n *\n * This module is a dependency of other sub-modules. Do not include this module as a dependency\n * in your angular app (use {@link ui.router} module instead).\n *\n */\nangular.module('ui.router.util', ['ng', 'ui.router.init']);\n\n/**\n * @ngdoc overview\n * @name ui.router.router\n *\n * @requires ui.router.util\n *\n * @description\n * # ui.router.router sub-module\n *\n * This module is a dependency of other sub-modules. Do not include this module as a dependency\n * in your angular app (use {@link ui.router} module instead).\n */\nangular.module('ui.router.router', ['ui.router.util']);\n\n/**\n * @ngdoc overview\n * @name ui.router.state\n *\n * @requires ui.router.router\n * @requires ui.router.util\n *\n * @description\n * # ui.router.state sub-module\n *\n * This module is a dependency of the main ui.router module. Do not include this module as a dependency\n * in your angular app (use {@link ui.router} module instead).\n *\n */\nangular.module('ui.router.state', ['ui.router.router', 'ui.router.util', 'ui.router.angular1']);\n\n/**\n * @ngdoc overview\n * @name ui.router\n *\n * @requires ui.router.state\n *\n * @description\n * # ui.router\n *\n * ## The main module for ui.router\n * There are several sub-modules included with the ui.router module, however only this module is needed\n * as a dependency within your angular app. The other modules are for organization purposes.\n *\n * The modules are:\n * * ui.router - the main \"umbrella\" module\n * * ui.router.router -\n *\n * *You'll need to include **only** this module as the dependency within your angular app.*\n *\n * <pre>\n * <!doctype html>\n * <html ng-app=\"myApp\">\n * <head>\n *   <script src=\"js/angular.js\"></script>\n *   <!-- Include the ui-router script -->\n *   <script src=\"js/angular-ui-router.min.js\"></script>\n *   <script>\n *     // ...and add 'ui.router' as a dependency\n *     var myApp = angular.module('myApp', ['ui.router']);\n *   </script>\n * </head>\n * <body>\n * </body>\n * </html>\n * </pre>\n */\nangular.module('ui.router', ['ui.router.init', 'ui.router.state', 'ui.router.angular1']);\n\nangular.module('ui.router.compat', ['ui.router']);\n\n/**\n * Annotates a controller expression (may be a controller function(), a \"controllername\",\n * or \"controllername as name\")\n *\n * - Temporarily decorates $injector.instantiate.\n * - Invokes $controller() service\n *   - Calls $injector.instantiate with controller constructor\n * - Annotate constructor\n * - Undecorate $injector\n *\n * returns an array of strings, which are the arguments of the controller expression\n */\n\nexport function annotateController(controllerExpression): string[] {\n  let $injector = services.$injector;\n  let $controller = $injector.get(\"$controller\");\n  let oldInstantiate = $injector.instantiate;\n  try {\n    let deps;\n\n    $injector.instantiate = function fakeInstantiate(constructorFunction) {\n      $injector.instantiate = oldInstantiate; // Un-decorate ASAP\n      deps = $injector.annotate(constructorFunction);\n    };\n\n    $controller(controllerExpression, { $scope: {} });\n\n    return deps;\n  } finally {\n    $injector.instantiate = oldInstantiate;\n  }\n}\n\nrunBlock.$inject = ['$injector', '$q'];\nfunction runBlock($injector, $q) {\n  services.$injector = $injector;\n  services.$q = $q;\n}\n\napp.run(runBlock);\n\nlet router: UIRouter = null;\n\nng1UIRouter.$inject = ['$locationProvider'];\n/** This angular 1 provider instantiates a Router and exposes its services via the angular injector */\nfunction ng1UIRouter($locationProvider) {\n\n  // Create a new instance of the Router when the ng1UIRouterProvider is initialized\n  router = new UIRouter();\n  \n  // Apply ng1 specific StateBuilder code for `views`, `resolve`, and `onExit/Retain/Enter` properties\n  router.stateRegistry.decorator(\"views\", ng1ViewsBuilder);\n  router.stateRegistry.decorator(\"onExit\", getStateHookBuilder(\"onExit\"));\n  router.stateRegistry.decorator(\"onRetain\", getStateHookBuilder(\"onRetain\"));\n  router.stateRegistry.decorator(\"onEnter\", getStateHookBuilder(\"onEnter\"));\n\n  router.viewService.viewConfigFactory('ng1', ng1ViewConfigFactory);\n\n  // Bind LocationConfig.hashPrefix to $locationProvider.hashPrefix\n  bindFunctions($locationProvider, services.locationConfig, $locationProvider, ['hashPrefix']);\n\n  // Create a LocationService.onChange registry\n  let urlListeners: Function[] = [];\n  services.location.onChange = (callback) => {\n    urlListeners.push(callback);\n    return () => removeFrom(urlListeners)(callback);\n  };\n\n  this.$get = $get;\n  $get.$inject = ['$location', '$browser', '$sniffer', '$rootScope', '$http', '$templateCache'];\n  function $get($location, $browser, $sniffer, $rootScope, $http, $templateCache) {\n\n    // Bind $locationChangeSuccess to the listeners registered in LocationService.onChange\n    $rootScope.$on(\"$locationChangeSuccess\", evt => urlListeners.forEach(fn => fn(evt)));\n\n    // Bind LocationConfig.html5Mode to $locationProvider.html5Mode and $sniffer.history\n    services.locationConfig.html5Mode = function() {\n      let html5Mode = $locationProvider.html5Mode();\n      html5Mode = isObject(html5Mode) ? html5Mode.enabled : html5Mode;\n      return html5Mode && $sniffer.history;\n    };\n\n    services.template.get = (url: string) =>\n        $http.get(url, { cache: $templateCache, headers: { Accept: 'text/html' }}).then(prop(\"data\"));\n\n    // Bind these LocationService functions to $location\n    bindFunctions($location, services.location, $location, [\"replace\", \"url\", \"path\", \"search\", \"hash\"]);\n    // Bind these LocationConfig functions to $location\n    bindFunctions($location, services.locationConfig, $location, ['port', 'protocol', 'host']);\n    // Bind these LocationConfig functions to $browser\n    bindFunctions($browser, services.locationConfig, $browser, ['baseHref']);\n\n    return router;\n  }\n}\n\nfunction $stateParamsFactory(ng1UIRouter) {\n  return ng1UIRouter.globals.params;\n}\n\n// The 'ui.router' ng1 module depends on 'ui.router.init' module.\nangular.module('ui.router.init', []).provider(\"ng1UIRouter\", <any> ng1UIRouter);\n// This effectively calls $get() to init when we enter runtime\nangular.module('ui.router.init').run(['ng1UIRouter', function(ng1UIRouter) { }]);\n\n// $urlMatcherFactory service and $urlMatcherFactoryProvider\nangular.module('ui.router.util').provider('$urlMatcherFactory', ['ng1UIRouterProvider', () => router.urlMatcherFactory]);\nangular.module('ui.router.util').run(['$urlMatcherFactory', function($urlMatcherFactory) { }]);\n\n// $urlRouter service and $urlRouterProvider\nfunction getUrlRouterProvider() {\n  router.urlRouterProvider[\"$get\"] = function() {\n    router.urlRouter.update(true);\n    if (!this.interceptDeferred) router.urlRouter.listen();\n    return router.urlRouter;\n  };\n  return router.urlRouterProvider;\n}\nangular.module('ui.router.router').provider('$urlRouter', ['ng1UIRouterProvider', getUrlRouterProvider]);\nangular.module('ui.router.router').run(['$urlRouter', function($urlRouter) { }]);\n\n// $state service and $stateProvider\n// $urlRouter service and $urlRouterProvider\nfunction getStateProvider() {\n  router.stateProvider[\"$get\"] = function() {\n    // Autoflush once we are in runtime\n    router.stateRegistry.stateQueue.autoFlush(router.stateService);\n    return router.stateService;\n  };\n  return router.stateProvider;\n}\nangular.module('ui.router.state').provider('$state', ['ng1UIRouterProvider', getStateProvider]);\nangular.module('ui.router.state').run(['$state', function($state) { }]);\n\n// $stateParams service\nangular.module('ui.router.state').factory('$stateParams', ['ng1UIRouter', (ng1UIRouter) =>\n    ng1UIRouter.globals.params]);\n\n// $transitions service and $transitionsProvider\nfunction getTransitionsProvider() {\n  router.transitionService[\"$get\"] = () => router.transitionService;\n  return router.transitionService;\n}\nangular.module('ui.router.state').provider('$transitions', ['ng1UIRouterProvider', getTransitionsProvider]);\n\n// $templateFactory service\nangular.module('ui.router.util').factory('$templateFactory', ['ng1UIRouter', () => new TemplateFactory()]);\n\n// The $view service\nangular.module('ui.router').factory('$view', () => router.viewService);\n\n// The old $resolve service\nangular.module('ui.router').factory('$resolve', <any> resolveFactory);\n\n// $trace service\nangular.module(\"ui.router\").service(\"$trace\", () => trace);\nwatchDigests.$inject = ['$rootScope'];\nexport function watchDigests($rootScope) {\n  $rootScope.$watch(function() { trace.approximateDigests++; });\n}\nangular.module(\"ui.router\").run(watchDigests);\n\nexport const getLocals = (ctx: ResolveContext) => {\n  let tokens = ctx.getTokens().filter(isString);\n  let tuples = tokens.map(key => [ key, ctx.getResolvable(key).data ]);\n  return tuples.reduce(applyPairs, {});\n};\n\n/** Adds the angular 1 `$injector` to the `UIInjector` interface */\ndeclare module \"../common/interface\" {\n  /**\n   * This enhances the [[common.UIInjector]] interface by adding the `$injector` service as the [[native]] injector.\n   */\n  interface UIInjector {\n    /**\n     * The native Angular 1 `$injector` service\n     *\n     * When you have access to a `UIInjector`, this property will contain the native `$injector` Angular 1 service.\n     *\n     * @example:\n     * ```js\n     *\n     * $transition.onStart({}, function(transition) {\n     *   var uiInjector = transition.injector();\n     *   var $injector = uiInjector.native;\n     *   var val = $injector.invoke(someFunction);\n     * });\n     */\n    native: IInjectorService;\n  }\n}\n\n/** Injectable services */\n\n/**\n * An injectable service object which has the current state parameters\n *\n * This angular service (singleton object) holds the current state parameters.\n * The values in `$stateParams` are not updated until *after* a [[Transition]] successfully completes.\n *\n * This object can be injected into other services.\n *\n * @example\n * ```js\n *\n * SomeService.$inject = ['$http', '$stateParams'];\n * function SomeService($http, $stateParams) {\n *   return {\n *     getUser: function() {\n *       return $http.get('/api/users/' + $stateParams.username);\n *     }\n *   }\n * };\n * angular.service('SomeService', SomeService);\n * ```\n *\n * ### Deprecation warning:\n *\n * When `$stateParams` is injected into transition hooks, resolves and view controllers, they receive a different\n * object than this global service object.  In those cases, the injected object has the parameter values for the\n * *pending* Transition.\n *\n * Because of these confusing details, this service is deprecated.\n *\n * @deprecated Instead of using `$stateParams, inject the current [[Transition]] as `$transition$` and use [[Transition.params]]\n * ```js\n * MyController.$inject = ['$transition$'];\n * function MyController($transition$) {\n *   var username = $transition$.params().username;\n *   // .. do something with username\n * }\n * ```\n */\nvar $stateParams: StateParams;\n\n/**\n * An injectable service primarily used to register transition hooks\n *\n * This angular service exposes the [[TransitionService]] singleton, which is primarily used to add transition hooks.\n *\n * The same object is also exposed as [[$transitionsProvider]] for injection during angular config time.\n */\nvar $transitions: TransitionService;\n\n/**\n * A config-time injectable provider primarily used to register transition hooks\n *\n * This angular provider exposes the [[TransitionService]] singleton, which is primarily used to add transition hooks.\n *\n * The same object is also exposed as [[$transitions]] for injection at runtime.\n */\nvar $transitionsProvider: TransitionService;\n\n/**\n * An injectable service used to query for current state information.\n *\n * This angular service exposes the [[StateService]] singleton.\n */\nvar $state: StateService;\n\n/**\n * A config-time injectable provider used to register states.\n *\n * This angular service exposes the [[StateProvider]] singleton.\n */\nvar $stateProvider: StateProvider;\n\n/**\n * A config-time injectable provider used to manage the URL.\n *\n * This angular service exposes the [[UrlRouterProvider]] singleton.\n */\nvar $urlRouterProvider: UrlRouterProvider;\n\n/**\n * An injectable service used to configure URL redirects.\n *\n * This angular service exposes the [[UrlRouter]] singleton.\n */\nvar $urlRouter: UrlRouter;\n\n/**\n * An injectable service used to configure the URL.\n *\n * This service is used to set url mapping options, and create [[UrlMatcher]] objects.\n *\n * This angular service exposes the [[UrlMatcherFactory]] singleton.\n * The singleton is also exposed at config-time as the [[$urlMatcherFactoryProvider]].\n */\nvar $urlMatcherFactory: UrlMatcherFactory;\n\n/**\n * An injectable service used to configure the URL.\n * \n * This service is used to set url mapping options, and create [[UrlMatcher]] objects.\n *\n * This angular service exposes the [[UrlMatcherFactory]] singleton at config-time.\n * The singleton is also exposed at runtime as the [[$urlMatcherFactory]].\n */\nvar $urlMatcherFactoryProvider: UrlMatcherFactory;\n\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./ng1/services.ts\n **/","/** @module ng1 */ /** */\nimport {State} from \"../../state/stateObject\";\nimport {PathNode} from \"../../path/node\";\nimport {ResolveContext} from \"../../resolve/resolveContext\";\nimport {map} from \"../../common/common\";\nimport {resolvablesBuilder} from \"../../state/stateBuilder\";\n\n/**\n * Implementation of the legacy `$resolve` service for angular 1.\n */\nvar $resolve = {\n  /**\n   * Asynchronously injects a resolve block.\n   *\n   * This emulates most of the behavior of the ui-router 0.2.x $resolve.resolve() service API.\n   *\n   * Given an object `invocables`, where keys are strings and values are injectable functions,\n   * injects each function, and waits for the resulting promise to resolve.\n   * When all resulting promises are resolved, returns the results as an object.\n   *\n   * @example\n   * ```js\n   *\n   * let invocables = {\n   *   foo: [ '$http', ($http) =>\n   *            $http.get('/api/foo').then(resp => resp.data) ],\n   *   bar: [ 'foo', '$http', (foo, $http) =>\n   *            $http.get('/api/bar/' + foo.barId).then(resp => resp.data) ]\n   * }\n   * $resolve.resolve(invocables)\n   *     .then(results => console.log(results.foo, results.bar))\n   * // Logs foo and bar:\n   * // { id: 123, barId: 456, fooData: 'foo data' }\n   * // { id: 456, barData: 'bar data' }\n   * ```\n   *\n   * @param invocables an object which looks like an [[StateDefinition.resolve]] object; keys are resolve names and values are injectable functions\n   * @param locals key/value pre-resolved data (locals)\n   * @param parent a promise for a \"parent resolve\"\n   */\n  resolve: (invocables, locals = {}, parent?) => {\n    let parentNode = new PathNode(new State(<any> { params: {}, resolvables: [] }));\n    let node = new PathNode(new State(<any> { params: {}, resolvables: [] }));\n    let context = new ResolveContext([parentNode, node]);\n\n    context.addResolvables(resolvablesBuilder(<any> { resolve: invocables }), node.state);\n\n    const resolveData = (parentLocals) => {\n      const rewrap = _locals => resolvablesBuilder(<any> { resolve: map(_locals, local => () => local) });\n      context.addResolvables(rewrap(parentLocals), parentNode.state);\n      context.addResolvables(rewrap(locals), node.state);\n\n      const tuples2ObjR = (acc, tuple) => {\n        acc[tuple.token] = tuple.value;\n        return acc;\n      };\n      return context.resolvePath().then(results => results.reduce(tuples2ObjR, {}));\n    };\n\n    return parent ? parent.then(resolveData) : resolveData({});\n  }\n};\n\n/** @hidden */\nexport const resolveFactory = () => $resolve;\n\n\n\n/** WEBPACK FOOTER **\n ** ./ng1/legacy/resolveService.ts\n **/","/** @module ng1 */ /** */\nimport {State} from \"../../state/stateObject\";\nimport {pick, forEach, anyTrueR, unnestR, tail, extend} from \"../../common/common\";\nimport {kebobString} from \"../../common/strings\";\nimport {ViewConfig} from \"../../view/interface\";\nimport {Ng1ViewDeclaration} from \"../interface\";\nimport {ViewService} from \"../../view/view\";\nimport {isArray, isInjectable, isDefined, isString, isObject} from \"../../common/predicates\";\nimport {services} from \"../../common/coreservices\";\nimport {trace} from \"../../common/trace\";\nimport {PathNode} from \"../../path/node\";\nimport {TemplateFactory} from \"../templateFactory\";\nimport {ResolveContext} from \"../../resolve/resolveContext\";\nimport {Resolvable} from \"../../resolve/resolvable\";\n\nexport const ng1ViewConfigFactory = (path, view) => new Ng1ViewConfig(path, view);\n\n/**\n * This is a [[StateBuilder.builder]] function for angular1 `views`.\n *\n * When the [[StateBuilder]] builds a [[State]] object from a raw [[StateDeclaration]], this builder\n * handles the `views` property with logic specific to angular-ui-router (ng1).\n *\n * If no `views: {}` property exists on the [[StateDeclaration]], then it creates the `views` object\n * and applies the state-level configuration to a view named `$default`.\n */\nexport function ng1ViewsBuilder(state: State) {\n  let tplKeys = ['templateProvider', 'templateUrl', 'template', 'notify', 'async'],\n      ctrlKeys = ['controller', 'controllerProvider', 'controllerAs', 'resolveAs'],\n      compKeys = ['component', 'bindings'],\n      nonCompKeys = tplKeys.concat(ctrlKeys),\n      allKeys = compKeys.concat(nonCompKeys);\n\n  let views = {}, viewsObject = state.views || {\"$default\": pick(state, allKeys)};\n\n  forEach(viewsObject, function (config: Ng1ViewDeclaration, name) {\n    // Account for views: { \"\": { template... } }\n    name = name || \"$default\";\n    // Account for views: { header: \"headerComponent\" }\n    if (isString(config)) config = { component: <string> config };\n    if (!Object.keys(config).length) return;\n\n    // Configure this view for routing to an angular 1.5+ style .component (or any directive, really)\n    if (config.component) {\n      if (nonCompKeys.map(key => isDefined(config[key])).reduce(anyTrueR, false)) {\n        throw new Error(`Cannot combine: ${compKeys.join(\"|\")} with: ${nonCompKeys.join(\"|\")} in stateview: 'name@${state.name}'`);\n      }\n\n      // Dynamically build a template like \"<component-name input1='::$resolve.foo'></component-name>\"\n      config.templateProvider = ['$injector', function($injector) {\n        const resolveFor = key => config.bindings && config.bindings[key] || key;\n        const prefix = angular.version.minor >= 3 ? \"::\" : \"\";\n        const attributeTpl = input => {\n          var attrName = kebobString(input.name);\n          var resolveName = resolveFor(input.name);\n          if (input.type === '@')\n            return `${attrName}='{{${prefix}$resolve.${resolveName}}}'`;\n          return `${attrName}='${prefix}$resolve.${resolveName}'`;\n        };\n\n        let attrs = getComponentInputs($injector, config.component).map(attributeTpl).join(\" \");\n        let kebobName = kebobString(config.component);\n        return `<${kebobName} ${attrs}></${kebobName}>`;\n      }];\n    }\n\n    config.resolveAs = config.resolveAs || '$resolve';\n    config.$type = \"ng1\";\n    config.$context = state;\n    config.$name = name;\n\n    let normalized = ViewService.normalizeUIViewTarget(config.$context, config.$name);\n    config.$uiViewName = normalized.uiViewName;\n    config.$uiViewContextAnchor = normalized.uiViewContextAnchor;\n\n    views[name] = config;\n  });\n  return views;\n}\n\n// for ng 1.2 style, process the scope: { input: \"=foo\" }\n// for ng 1.3 through ng 1.5, process the component's bindToController: { input: \"=foo\" } object\nconst scopeBindings = bindingsObj => Object.keys(bindingsObj || {})\n      .map(key => [key, /^([=<@])[?]?(.*)/.exec(bindingsObj[key])])        // [ 'input', [ '=foo', '=', 'foo' ] ]\n      .filter(tuple => isDefined(tuple) && isDefined(tuple[1]))             // skip malformed values\n      .map(tuple => ({ name: tuple[1][2] || tuple[0], type: tuple[1][1] }));// { name: ('foo' || 'input'), type: '=' }\n\n// Given a directive definition, find its object input attributes\n// Use different properties, depending on the type of directive (component, bindToController, normal)\nconst getBindings = def => {\n  if (isObject(def.bindToController)) return scopeBindings(def.bindToController);\n  return <any> scopeBindings(def.scope);\n};\n\n// Gets all the directive(s)' inputs ('@', '=', and '<')\nfunction getComponentInputs($injector, name) {\n  let cmpDefs = $injector.get(name + \"Directive\"); // could be multiple\n  if (!cmpDefs || !cmpDefs.length) throw new Error(`Unable to find component named '${name}'`);\n  return cmpDefs.map(getBindings).reduce(unnestR, []);\n}\n\nlet id = 0;\nexport class Ng1ViewConfig implements ViewConfig {\n  $id = id++;\n  loaded: boolean = false;\n  controller: Function;\n  template: string;\n  locals: any; // TODO: delete me\n\n  constructor(public path: PathNode[], public viewDecl: Ng1ViewDeclaration) { }\n\n  load() {\n    let $q = services.$q;\n    if (!this.hasTemplate())\n      throw new Error(`No template configuration specified for '${this.viewDecl.$uiViewName}@${this.viewDecl.$uiViewContextAnchor}'`);\n\n    let context = new ResolveContext(this.path);\n    let params = this.path.reduce((acc, node) => extend(acc, node.paramValues), {});\n\n    let promises: any = {\n      template: $q.when(this.getTemplate(params, new TemplateFactory(), context)),\n      controller: $q.when(this.getController(context))\n    };\n\n    return $q.all(promises).then((results) => {\n      trace.traceViewServiceEvent(\"Loaded\", this);\n      this.controller = results.controller;\n      this.template = results.template;\n    });\n  }\n\n  /**\n   * Checks a view configuration to ensure that it specifies a template.\n   *\n   * @return {boolean} Returns `true` if the configuration contains a valid template, otherwise `false`.\n   */\n  hasTemplate() {\n    return !!(this.viewDecl.template || this.viewDecl.templateUrl || this.viewDecl.templateProvider);\n  }\n\n  getTemplate(params, $factory, context: ResolveContext) {\n    return $factory.fromConfig(this.viewDecl, params, context);\n  }\n\n  /**\n   * Gets the controller for a view configuration.\n   *\n   * @returns {Function|Promise.<Function>} Returns a controller, or a promise that resolves to a controller.\n   */\n  getController(context: ResolveContext): (String|Function|Promise<Function|String>) {\n    let provider = this.viewDecl.controllerProvider;\n    if (!isInjectable(provider)) return this.viewDecl.controller;\n    let deps = services.$injector.annotate(provider);\n    let providerFn = isArray(provider) ? tail(<any> provider) : provider;\n    let resolvable = new Resolvable(\"\", <any> providerFn, deps);\n    return resolvable.get(context);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./ng1/statebuilders/views.ts\n **/","/** @module view */ /** for typedoc */\nimport {isArray, isDefined, isFunction} from \"../common/predicates\";\nimport {services} from \"../common/coreservices\";\nimport {Ng1ViewDeclaration} from \"./interface\";\nimport {IInjectable, tail} from \"../common/common\";\nimport {ResolveContext} from \"../resolve/resolveContext\";\nimport {Resolvable} from \"../resolve/resolvable\";\n\n/**\n * Service which manages loading of templates from a ViewConfig.\n */\nexport class TemplateFactory {\n  /**\n   * Creates a template from a configuration object.\n   *\n   * @param config Configuration object for which to load a template.\n   * The following properties are search in the specified order, and the first one \n   * that is defined is used to create the template:\n   *\n   * @param params  Parameters to pass to the template function.\n   * @param context The resolve context associated with the template's view\n   *\n   * @return {string|object}  The template html as a string, or a promise for \n   * that string,or `null` if no template is configured.\n   */\n  fromConfig(config: Ng1ViewDeclaration, params: any, context: ResolveContext) {\n    return (\n      isDefined(config.template) ? this.fromString(config.template, params) :\n      isDefined(config.templateUrl) ? this.fromUrl(config.templateUrl, params) :\n      isDefined(config.templateProvider) ? this.fromProvider(config.templateProvider, params, context) :\n      null\n    );\n  };\n\n  /**\n   * Creates a template from a string or a function returning a string.\n   *\n   * @param template html template as a string or function that returns an html template as a string.\n   * @param params Parameters to pass to the template function.\n   *\n   * @return {string|object} The template html as a string, or a promise for that \n   * string.\n   */\n  fromString(template: (string|Function), params?) {\n    return isFunction(template) ? (<any> template)(params) : template;\n  };\n\n  /**\n   * Loads a template from the a URL via `$http` and `$templateCache`.\n   *\n   * @param {string|Function} url url of the template to load, or a function \n   * that returns a url.\n   * @param {Object} params Parameters to pass to the url function.\n   * @return {string|Promise.<string>} The template html as a string, or a promise \n   * for that string.\n   */\n  fromUrl(url: (string|Function), params: any) {\n    if (isFunction(url)) url = (<any> url)(params);\n    if (url == null) return null;\n    return services.template.get(<string> url);\n  };\n\n  /**\n   * Creates a template by invoking an injectable provider function.\n   *\n   * @param provider Function to invoke via `locals`\n   * @param {Function} injectFn a function used to invoke the template provider\n   * @return {string|Promise.<string>} The template html as a string, or a promise \n   * for that string.\n   */\n  fromProvider(provider: IInjectable, params: any, context: ResolveContext) {\n    let deps = services.$injector.annotate(provider);\n    let providerFn = isArray(provider) ? tail(<any[]> provider) : provider;\n    let resolvable = new Resolvable(\"\", <Function> providerFn, deps);\n    return resolvable.get(context);\n  };\n}\n\n\n/** WEBPACK FOOTER **\n ** ./ng1/templateFactory.ts\n **/","/** @module ng1 */ /** */\nimport {State} from \"../../state/stateObject\";\nimport {TransitionStateHookFn, HookResult} from \"../../transition/interface\";\nimport {Transition} from \"../../transition/transition\";\nimport IInjectorService = angular.auto.IInjectorService;\nimport {services} from \"../../common/coreservices\";\nimport {getLocals} from \"../services\";\nimport {ResolveContext} from \"../../resolve/resolveContext\";\nimport {extend} from \"../../common/common\";\n\n/**\n * This is a [[StateBuilder.builder]] function for angular1 `onEnter`, `onExit`,\n * `onRetain` callback hooks on a [[Ng1StateDeclaration]].\n *\n * When the [[StateBuilder]] builds a [[State]] object from a raw [[StateDeclaration]], this builder\n * ensures that those hooks are injectable for angular-ui-router (ng1).\n */\nexport const getStateHookBuilder = (hookName) =>\nfunction stateHookBuilder(state: State, parentFn): TransitionStateHookFn {\n  let hook = state[hookName];\n  function decoratedNg1Hook(trans: Transition, state): HookResult {\n    let resolveContext = new ResolveContext(trans.treeChanges().to);\n    return services.$injector.invoke(hook, this, extend({ $state$: state }, getLocals(resolveContext)));\n  }\n\n  return hook ? decoratedNg1Hook : undefined;\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./ng1/statebuilders/onEnterExitRetain.ts\n **/","/**\n * These are the UI-Router angular 1 directives.\n *\n * These directives are used in templates to create viewports and navigate to states\n *\n * @preferred @module ng1_directives\n */ /** for typedoc */\nimport {extend, forEach, toJson, tail} from \"../../common/common\";\nimport {isString, isObject} from \"../../common/predicates\";\nimport {UIViewData} from \"./viewDirective\";\nimport {parse} from \"../../common/hof\";\nimport {PathNode} from \"../../path/node\";\n\n/** @hidden */\nfunction parseStateRef(ref, current) {\n  let preparsed = ref.match(/^\\s*({[^}]*})\\s*$/), parsed;\n  if (preparsed) ref = current + '(' + preparsed[1] + ')';\n  parsed = ref.replace(/\\n/g, \" \").match(/^([^(]+?)\\s*(\\((.*)\\))?$/);\n  if (!parsed || parsed.length !== 4) throw new Error(\"Invalid state ref '\" + ref + \"'\");\n  return { state: parsed[1], paramExpr: parsed[3] || null };\n}\n\n/** @hidden */\nfunction stateContext(el) {\n  let $uiView: UIViewData = el.parent().inheritedData('$uiView');\n  let path: PathNode[] = parse('$cfg.path')($uiView);\n  return path ? tail(path).state.name : undefined;\n}\n\n/** @hidden */\nfunction getTypeInfo(el) {\n  // SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.\n  var isSvg = Object.prototype.toString.call(el.prop('href')) === '[object SVGAnimatedString]';\n  var isForm = el[0].nodeName === \"FORM\";\n\n  return {\n    attr: isForm ? \"action\" : (isSvg ? 'xlink:href' : 'href'),\n    isAnchor: el.prop(\"tagName\").toUpperCase() === \"A\",\n    clickable: !isForm\n  };\n}\n\n/** @hidden */\nfunction clickHook(el, $state, $timeout, type, current) {\n  return function(e) {\n    var button = e.which || e.button, target = current();\n\n    if (!(button > 1 || e.ctrlKey || e.metaKey || e.shiftKey || el.attr('target'))) {\n      // HACK: This is to allow ng-clicks to be processed before the transition is initiated:\n      var transition = $timeout(function() {\n        $state.go(target.state, target.params, target.options);\n      });\n      e.preventDefault();\n\n      // if the state has no URL, ignore one preventDefault from the <a> directive.\n      var ignorePreventDefaultCount = type.isAnchor && !target.href ? 1: 0;\n\n      e.preventDefault = function() {\n        if (ignorePreventDefaultCount-- <= 0) $timeout.cancel(transition);\n      };\n    }\n  };\n}\n\n/** @hidden */\nfunction defaultOpts(el, $state) {\n  return { relative: stateContext(el) || $state.$current, inherit: true };\n}\n\n/**\n * `ui-sref`: A directive for linking to a state\n *\n * A directive that binds a link (`<a>` tag) to a state.\n * If the state has an associated URL, the directive will automatically generate and\n * update the `href` attribute via the [[StateService.href]]  method.\n * Clicking the link will trigger a state transition with optional parameters.\n *\n * Also middle-clicking, right-clicking, and ctrl-clicking on the link will be\n * handled natively by the browser.\n *\n * You can also use relative state paths within ui-sref, just like the relative\n * paths passed to `$state.go()`.\n * You just need to be aware that the path is relative to the state that the link lives in.\n * In other words, the state that created the view containing the link.\n *\n * You can specify options to pass to [[StateService.go]] using the `ui-sref-opts` attribute.\n * Options are restricted to `location`, `inherit`, and `reload`.\n *\n * Here's an example of how you'd use ui-sref and how it would compile.\n * If you have the following template:\n *\n * @example\n * ```html\n *\n * <pre>\n * <a ui-sref=\"home\">Home</a> | <a ui-sref=\"about\">About</a> | <a ui-sref=\"{page: 2}\">Next page</a>\n *\n * <ul>\n *     <li ng-repeat=\"contact in contacts\">\n *         <a ui-sref=\"contacts.detail({ id: contact.id })\">{{ contact.name }}</a>\n *     </li>\n * </ul>\n * </pre>\n * ```\n *\n * Then the compiled html would be (assuming Html5Mode is off and current state is contacts):\n *\n * ```html\n *\n * <pre>\n * <a href=\"#/home\" ui-sref=\"home\">Home</a> | <a href=\"#/about\" ui-sref=\"about\">About</a> | <a href=\"#/contacts?page=2\" ui-sref=\"{page: 2}\">Next page</a>\n *\n * <ul>\n *     <li ng-repeat=\"contact in contacts\">\n *         <a href=\"#/contacts/1\" ui-sref=\"contacts.detail({ id: contact.id })\">Joe</a>\n *     </li>\n *     <li ng-repeat=\"contact in contacts\">\n *         <a href=\"#/contacts/2\" ui-sref=\"contacts.detail({ id: contact.id })\">Alice</a>\n *     </li>\n *     <li ng-repeat=\"contact in contacts\">\n *         <a href=\"#/contacts/3\" ui-sref=\"contacts.detail({ id: contact.id })\">Bob</a>\n *     </li>\n * </ul>\n *\n * <a ui-sref=\"home\" ui-sref-opts=\"{reload: true}\">Home</a>\n * </pre>\n * ```\n *\n * @param {string} ui-sref 'stateName' can be any valid absolute or relative state\n * @param {Object} ui-sref-opts options to pass to [[StateService.go]]\n */\nlet uiSref = ['$state', '$timeout',\nfunction $StateRefDirective($state, $timeout) {\n  return {\n    restrict: 'A',\n    require: ['?^uiSrefActive', '?^uiSrefActiveEq'],\n    link: function(scope, element, attrs, uiSrefActive) {\n      var ref    = parseStateRef(attrs.uiSref, $state.current.name);\n      var def    = { state: ref.state, href: null, params: null, options: null };\n      var type   = getTypeInfo(element);\n      var active = uiSrefActive[1] || uiSrefActive[0];\n      var unlinkInfoFn = null;\n\n      def.options = extend(defaultOpts(element, $state), attrs.uiSrefOpts ? scope.$eval(attrs.uiSrefOpts) : {});\n\n      var update = function(val?) {\n        if (val) def.params = angular.copy(val);\n        def.href = $state.href(ref.state, def.params, def.options);\n\n        if (unlinkInfoFn) unlinkInfoFn();\n        if (active) unlinkInfoFn = active.$$addStateInfo(ref.state, def.params);\n        if (def.href !== null) attrs.$set(type.attr, def.href);\n      };\n\n      if (ref.paramExpr) {\n        scope.$watch(ref.paramExpr, function(val) { if (val !== def.params) update(val); }, true);\n        def.params = angular.copy(scope.$eval(ref.paramExpr));\n      }\n      update();\n\n      if (!type.clickable) return;\n      element.bind(\"click\", clickHook(element, $state, $timeout, type, function() { return def; }));\n    }\n  };\n}];\n\n/**\n * `ui-state`: A dynamic version of `ui-sref`\n *\n * Much like ui-sref, but will accept named $scope properties to evaluate for a state definition,\n * params and override options.\n *\n * @example\n * ```html\n *\n * <li ng-repeat=\"nav in navlinks\">\n *   <a ui-state=\"nav.statename\">{{nav.description}}</a>\n * </li>\n *\n * @param {string} ui-state 'stateName' can be any valid absolute or relative state\n * @param {Object} ui-state-params params to pass to [[StateService.href]]\n * @param {Object} ui-state-opts options to pass to [[StateService.go]]\n */\nlet uiState = ['$state', '$timeout',\nfunction $StateRefDynamicDirective($state, $timeout) {\n  return {\n    restrict: 'A',\n    require: ['?^uiSrefActive', '?^uiSrefActiveEq'],\n    link: function(scope, element, attrs, uiSrefActive) {\n      var type   = getTypeInfo(element);\n      var active = uiSrefActive[1] || uiSrefActive[0];\n      var group  = [attrs.uiState, attrs.uiStateParams || null, attrs.uiStateOpts || null];\n      var watch  = '[' + group.map(function(val) { return val || 'null'; }).join(', ') + ']';\n      var def    = { state: null, params: null, options: null, href: null };\n      var unlinkInfoFn = null;\n\n      function runStateRefLink (group) {\n        def.state = group[0]; def.params = group[1]; def.options = group[2];\n        def.href = $state.href(def.state, def.params, def.options);\n\n        if (unlinkInfoFn) unlinkInfoFn();\n        if (active) unlinkInfoFn = active.$$addStateInfo(def.state, def.params);\n        if (def.href) attrs.$set(type.attr, def.href);\n      }\n\n      scope.$watch(watch, runStateRefLink, true);\n      runStateRefLink(scope.$eval(watch));\n\n      if (!type.clickable) return;\n      element.bind(\"click\", clickHook(element, $state, $timeout, type, function() { return def; }));\n    }\n  };\n}];\n\n\n/**\n * `ui-sref-active` and `ui-sref-active-eq`: A directive that adds a CSS class when a `ui-sref` is active\n *\n * A directive working alongside ui-sref to add classes to an element when the\n * related ui-sref directive's state is active, and removing them when it is inactive.\n * The primary use-case is to simplify the special appearance of navigation menus\n * relying on `ui-sref`, by having the \"active\" state's menu button appear different,\n * distinguishing it from the inactive menu items.\n *\n * ui-sref-active can live on the same element as ui-sref or on a parent element. The first\n * ui-sref-active found at the same level or above the ui-sref will be used.\n *\n * Will activate when the ui-sref's target state or any child state is active. If you\n * need to activate only when the ui-sref target state is active and *not* any of\n * it's children, then you will use ui-sref-active-eq\n *\n * Given the following template:\n * @example\n * ```html\n *\n * <pre>\n * <ul>\n *   <li ui-sref-active=\"active\" class=\"item\">\n *     <a href ui-sref=\"app.user({user: 'bilbobaggins'})\">@bilbobaggins</a>\n *   </li>\n * </ul>\n * </pre>\n * ```\n *\n *\n * When the app state is \"app.user\" (or any children states), and contains the state parameter \"user\" with value \"bilbobaggins\",\n * the resulting HTML will appear as (note the 'active' class):\n *\n * ```html\n *\n * <pre>\n * <ul>\n *   <li ui-sref-active=\"active\" class=\"item active\">\n *     <a ui-sref=\"app.user({user: 'bilbobaggins'})\" href=\"/users/bilbobaggins\">@bilbobaggins</a>\n *   </li>\n * </ul>\n * </pre>\n * ```\n *\n * The class name is interpolated **once** during the directives link time (any further changes to the\n * interpolated value are ignored).\n *\n * Multiple classes may be specified in a space-separated format:\n *\n * ```html\n * <pre>\n * <ul>\n *   <li ui-sref-active='class1 class2 class3'>\n *     <a ui-sref=\"app.user\">link</a>\n *   </li>\n * </ul>\n * </pre>\n * ```\n *\n * It is also possible to pass ui-sref-active an expression that evaluates\n * to an object hash, whose keys represent active class names and whose\n * values represent the respective state names/globs.\n * ui-sref-active will match if the current active state **includes** any of\n * the specified state names/globs, even the abstract ones.\n *\n * Given the following template, with \"admin\" being an abstract state:\n * @example\n * ```html\n *\n * <pre>\n * <div ui-sref-active=\"{'active': 'admin.*'}\">\n *   <a ui-sref-active=\"active\" ui-sref=\"admin.roles\">Roles</a>\n * </div>\n * </pre>\n * ```\n *\n * When the current state is \"admin.roles\" the \"active\" class will be applied\n * to both the <div> and <a> elements. It is important to note that the state\n * names/globs passed to ui-sref-active shadow the state provided by ui-sref.\n */\nlet uiSrefActive = ['$state', '$stateParams', '$interpolate', '$transitions',\nfunction $StateRefActiveDirective($state, $stateParams, $interpolate, $transitions) {\n  return  {\n    restrict: \"A\",\n    controller: ['$scope', '$element', '$attrs', '$timeout', function ($scope, $element, $attrs, $timeout) {\n      var states = [], activeClasses = {}, activeEqClass, uiSrefActive;\n\n      // There probably isn't much point in $observing this\n      // uiSrefActive and uiSrefActiveEq share the same directive object with some\n      // slight difference in logic routing\n      activeEqClass = $interpolate($attrs.uiSrefActiveEq || '', false)($scope);\n\n      try {\n        uiSrefActive = $scope.$eval($attrs.uiSrefActive);\n      } catch (e) {\n        // Do nothing. uiSrefActive is not a valid expression.\n        // Fall back to using $interpolate below\n      }\n      uiSrefActive = uiSrefActive || $interpolate($attrs.uiSrefActive || '', false)($scope);\n      if (isObject(uiSrefActive)) {\n        forEach(uiSrefActive, function(stateOrName, activeClass) {\n          if (isString(stateOrName)) {\n            var ref = parseStateRef(stateOrName, $state.current.name);\n            addState(ref.state, $scope.$eval(ref.paramExpr), activeClass);\n          }\n        });\n      }\n\n      // Allow uiSref to communicate with uiSrefActive[Equals]\n      this.$$addStateInfo = function (newState, newParams) {\n        // we already got an explicit state provided by ui-sref-active, so we\n        // shadow the one that comes from ui-sref\n        if (isObject(uiSrefActive) && states.length > 0) {\n          return;\n        }\n        var deregister = addState(newState, newParams, uiSrefActive);\n        update();\n        return deregister;\n      };\n\n      $scope.$on('$stateChangeSuccess', update);\n      $scope.$on('$destroy', $transitions.onStart({}, (trans) => trans.promise.then(update) && null));\n\n      function addState(stateName, stateParams, activeClass) {\n        var state = $state.get(stateName, stateContext($element));\n        var stateHash = createStateHash(stateName, stateParams);\n\n        var stateInfo = {\n          state: state || { name: stateName },\n          params: stateParams,\n          hash: stateHash\n        };\n\n        states.push(stateInfo);\n        activeClasses[stateHash] = activeClass;\n\n        return function removeState() {\n          var idx = states.indexOf(stateInfo);\n          if (idx !== -1) states.splice(idx, 1);\n        }\n      }\n\n      /**\n       * @param {string} state\n       * @param {Object|string} [params]\n       * @return {string}\n       */\n      function createStateHash(state, params) {\n        if (!isString(state)) {\n          throw new Error('state should be a string');\n        }\n        if (isObject(params)) {\n          return state + toJson(params);\n        }\n        params = $scope.$eval(params);\n        if (isObject(params)) {\n          return state + toJson(params);\n        }\n        return state;\n      }\n\n      // Update route state\n      function update() {\n        for (var i = 0; i < states.length; i++) {\n          if (anyMatch(states[i].state, states[i].params)) {\n            addClass($element, activeClasses[states[i].hash]);\n          } else {\n            removeClass($element, activeClasses[states[i].hash]);\n          }\n\n          if (exactMatch(states[i].state, states[i].params)) {\n            addClass($element, activeEqClass);\n          } else {\n            removeClass($element, activeEqClass);\n          }\n        }\n      }\n\n      function addClass(el, className) { $timeout(function () { el.addClass(className); }); }\n      function removeClass(el, className) { el.removeClass(className); }\n      function anyMatch(state, params) { return $state.includes(state.name, params); }\n      function exactMatch(state, params) { return $state.is(state.name, params); }\n\n      update();\n    }]\n  };\n}];\n\nangular.module('ui.router.state')\n    .directive('uiSref', uiSref)\n    .directive('uiSrefActive', uiSrefActive)\n    .directive('uiSrefActiveEq', uiSrefActive)\n    .directive('uiState', uiState);\n\n\n\n/** WEBPACK FOOTER **\n ** ./ng1/directives/stateDirectives.ts\n **/","/** @module state */ /** for typedoc */\n\n/**\n * @ngdoc filter\n * @name ui.router.state.filter:isState\n *\n * @requires ui.router.state.$state\n *\n * @description\n * Translates to {@link ui.router.state.$state#methods_is $state.is(\"stateName\")}.\n */\n$IsStateFilter.$inject = ['$state'];\nexport function $IsStateFilter($state) {\n  var isFilter: any = function(state, params, options) {\n    return $state.is(state, params, options);\n  };\n  isFilter.$stateful = true;\n  return isFilter;\n}\n\n/**\n * @ngdoc filter\n * @name ui.router.state.filter:includedByState\n *\n * @requires ui.router.state.$state\n *\n * @description\n * Translates to {@link ui.router.state.$state#methods_includes $state.includes('fullOrPartialStateName')}.\n */\n$IncludedByStateFilter.$inject = ['$state'];\nexport function $IncludedByStateFilter($state) {\n  var includesFilter: any = function(state, params, options) {\n    return $state.includes(state, params, options);\n  };\n  includesFilter.$stateful = true;\n  return  includesFilter;\n}\n\nangular.module('ui.router.state')\n  .filter('isState', $IsStateFilter)\n  .filter('includedByState', $IncludedByStateFilter);\n\n\n\n/** WEBPACK FOOTER **\n ** ./ng1/stateFilters.ts\n **/","/** @module ng1_directives */ /** for typedoc */\n\"use strict\";\nimport {extend, unnestR, filter, tail} from \"../../common/common\";\nimport {isDefined, isFunction, isString} from \"../../common/predicates\";\nimport {trace} from \"../../common/trace\";\nimport {ActiveUIView} from \"../../view/interface\";\nimport {Ng1ViewConfig} from \"../statebuilders/views\";\nimport {TransitionService} from \"../../transition/transitionService\";\nimport {parse} from \"../../common/hof\";\nimport {ResolveContext} from \"../../resolve/resolveContext\";\nimport {Transition} from \"../../transition/transition\";\nimport {PathNode} from \"../../path/node\";\nimport {Param} from \"../../params/param\";\nimport {kebobString} from \"../../common/strings\";\nimport {HookRegOptions} from \"../../transition/interface\";\nimport {Ng1Controller, Ng1StateDeclaration} from \"../interface\";\nimport {getLocals} from \"../services\";\n\n/** @hidden */\nexport type UIViewData = {\n  $cfg: Ng1ViewConfig;\n  $uiView: ActiveUIView;\n\n  $animEnter: Promise<any>;\n  $animLeave: Promise<any>;\n  $$animLeave: { resolve(); } // \"deferred\"\n}\n\n/**\n * `ui-view`: A viewport directive which is filled in by a view from the active state.\n *\n * @param {string=} name A view name. The name should be unique amongst the other views in the\n * same state. You can have views of the same name that live in different states.\n *\n * @param {string=} autoscroll It allows you to set the scroll behavior of the browser window\n * when a view is populated. By default, $anchorScroll is overridden by ui-router's custom scroll\n * service, {@link ui.router.state.$uiViewScroll}. This custom service let's you\n * scroll ui-view elements into view when they are populated during a state activation.\n *\n * *Note: To revert back to old [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll)\n * functionality, call `$uiViewScrollProvider.useAnchorScroll()`.*\n *\n * @param {string=} onload Expression to evaluate whenever the view updates.\n *\n * A view can be unnamed or named.\n * @example\n * ```html\n *\n * <!-- Unnamed -->\n * <div ui-view></div>\n *\n * <!-- Named -->\n * <div ui-view=\"viewName\"></div>\n * ```\n *\n * You can only have one unnamed view within any template (or root html). If you are only using a\n * single view and it is unnamed then you can populate it like so:\n * ```\n *\n * <div ui-view></div>\n * $stateProvider.state(\"home\", {\n *   template: \"<h1>HELLO!</h1>\"\n * })\n * ```\n *\n * The above is a convenient shortcut equivalent to specifying your view explicitly with the {@link ui.router.state.$stateProvider#views `views`}\n * config property, by name, in this case an empty name:\n * ```js\n *\n * $stateProvider.state(\"home\", {\n *   views: {\n *     \"\": {\n *       template: \"<h1>HELLO!</h1>\"\n *     }\n *   }\n * })\n * ```\n *\n * But typically you'll only use the views property if you name your view or have more than one view\n * in the same template. There's not really a compelling reason to name a view if its the only one,\n * but you could if you wanted, like so:\n *\n * ```html\n *\n * <div ui-view=\"main\"></div>\n * ```\n *\n * ```js\n *\n * $stateProvider.state(\"home\", {\n *   views: {\n *     \"main\": {\n *       template: \"<h1>HELLO!</h1>\"\n *     }\n *   }\n * })\n * ```\n *\n * Really though, you'll use views to set up multiple views:\n * ```html\n *\n * <div ui-view></div>\n * <div ui-view=\"chart\"></div>\n * <div ui-view=\"data\"></div>\n * ```\n *\n * ```js\n * $stateProvider.state(\"home\", {\n *   views: {\n *     \"\": {\n *       template: \"<h1>HELLO!</h1>\"\n *     },\n *     \"chart\": {\n *       template: \"<chart_thing/>\"\n *     },\n *     \"data\": {\n *       template: \"<data_thing/>\"\n *     }\n *   }\n * })\n * ```\n *\n * Examples for `autoscroll`:\n *\n * ```html\n *\n * <!-- If autoscroll present with no expression,\n *      then scroll ui-view into view -->\n * <ui-view autoscroll/>\n *\n * <!-- If autoscroll present with valid expression,\n *      then scroll ui-view into view if expression evaluates to true -->\n * <ui-view autoscroll='true'/>\n * <ui-view autoscroll='false'/>\n * <ui-view autoscroll='scopeVariable'/>\n * ```\n *\n * Resolve data:\n *\n * The resolved data from the state's `resolve` block is placed on the scope as `$resolve` (this\n * can be customized using [[ViewDeclaration.resolveAs]]).  This can be then accessed from the template.\n *\n * Note that when `controllerAs` is being used, `$resolve` is set on the controller instance *after* the\n * controller is instantiated.  The `$onInit()` hook can be used to perform initialization code which\n * depends on `$resolve` data.\n *\n * @example\n * ```js\n *\n * $stateProvider.state('home', {\n *   template: '<my-component user=\"$resolve.user\"></my-component>',\n *   resolve: {\n *     user: function(UserService) { return UserService.fetchUser(); }\n *   }\n * });\n * ```\n */\nlet uiView = ['$view', '$animate', '$uiViewScroll', '$interpolate', '$q',\nfunction $ViewDirective(   $view,   $animate,   $uiViewScroll,   $interpolate,   $q) {\n\n  function getRenderer(attrs, scope) {\n    return {\n      enter: function(element, target, cb) {\n        if (angular.version.minor > 2) {\n          $animate.enter(element, null, target).then(cb);\n        } else {\n          $animate.enter(element, null, target, cb);\n        }\n      },\n      leave: function(element, cb) {\n        if (angular.version.minor > 2) {\n          $animate.leave(element).then(cb);\n        } else {\n          $animate.leave(element, cb);\n        }\n      }\n    };\n  }\n\n  function configsEqual(config1, config2) {\n    return config1 === config2;\n  }\n\n  let rootData = {\n    $cfg: { viewDecl: { $context: $view.rootContext() } },\n    $uiView: { }\n  };\n\n  let directive = {\n    count: 0,\n    restrict: 'ECA',\n    terminal: true,\n    priority: 400,\n    transclude: 'element',\n    compile: function (tElement, tAttrs, $transclude) {\n\n      return function (scope, $element, attrs) {\n        let previousEl, currentEl, currentScope, unregister,\n            onloadExp     = attrs.onload || '',\n            autoScrollExp = attrs.autoscroll,\n            renderer      = getRenderer(attrs, scope),\n            viewConfig    = undefined,\n            inherited     = $element.inheritedData('$uiView') || rootData,\n            name          = $interpolate(attrs.uiView || attrs.name || '')(scope) || '$default';\n\n        let activeUIView: ActiveUIView = {\n          $type: 'ng1',\n          id: directive.count++,                                   // Global sequential ID for ui-view tags added to DOM\n          name: name,                                              // ui-view name (<div ui-view=\"name\"></div>\n          fqn: inherited.$uiView.fqn ? inherited.$uiView.fqn + \".\" + name : name, // fully qualified name, describes location in DOM\n          config: null,                                            // The ViewConfig loaded (from a state.views definition)\n          configUpdated: configUpdatedCallback,                    // Called when the matching ViewConfig changes\n          get creationContext() {                                  // The context in which this ui-view \"tag\" was created\n            return parse('$cfg.viewDecl.$context')(inherited);\n          }\n        };\n\n        trace.traceUIViewEvent(\"Linking\", activeUIView);\n\n        function configUpdatedCallback(config?: Ng1ViewConfig) {\n          if (config && !(config instanceof Ng1ViewConfig)) return;\n          if (configsEqual(viewConfig, config)) return;\n          trace.traceUIViewConfigUpdated(activeUIView, config && config.viewDecl && config.viewDecl.$context);\n\n          viewConfig = config;\n          updateView(config);\n        }\n\n        $element.data('$uiView', { $uiView: activeUIView });\n\n        updateView();\n\n        unregister = $view.registerUIView(activeUIView);\n        scope.$on(\"$destroy\", function() {\n          trace.traceUIViewEvent(\"Destroying/Unregistering\", activeUIView);\n          unregister();\n        });\n\n        function cleanupLastView() {\n          if (previousEl) {\n            trace.traceUIViewEvent(\"Removing (previous) el\", previousEl.data('$uiView'));\n            previousEl.remove();\n            previousEl = null;\n          }\n\n          if (currentScope) {\n            trace.traceUIViewEvent(\"Destroying scope\", activeUIView);\n            currentScope.$destroy();\n            currentScope = null;\n          }\n\n          if (currentEl) {\n            let _viewData = currentEl.data('$uiView');\n            trace.traceUIViewEvent(\"Animate out\", _viewData);\n            renderer.leave(currentEl, function() {\n              _viewData.$$animLeave.resolve();\n              previousEl = null;\n            });\n\n            previousEl = currentEl;\n            currentEl = null;\n          }\n        }\n\n        function updateView(config?: Ng1ViewConfig) {\n          let newScope = scope.$new();\n          trace.traceUIViewScopeCreated(activeUIView, newScope);\n          let animEnter = $q.defer(), animLeave = $q.defer();\n          \n          let $uiViewData: UIViewData = {\n            $cfg: config,\n            $uiView: activeUIView,\n            $animEnter: animEnter.promise,\n            $animLeave: animLeave.promise,\n            $$animLeave: animLeave\n          };\n\n          let cloned = $transclude(newScope, function(clone) {\n            renderer.enter(clone.data('$uiView', $uiViewData), $element, function onUIViewEnter() {\n              animEnter.resolve();\n              if (currentScope) currentScope.$emit('$viewContentAnimationEnded');\n\n              if (isDefined(autoScrollExp) && !autoScrollExp || scope.$eval(autoScrollExp)) {\n                $uiViewScroll(clone);\n              }\n            });\n            \n            cleanupLastView();\n          });\n\n          currentEl = cloned;\n          currentScope = newScope;\n          /**\n           * @ngdoc event\n           * @name ui.router.state.directive:ui-view#$viewContentLoaded\n           * @eventOf ui.router.state.directive:ui-view\n           * @eventType emits on ui-view directive scope\n           * @description           *\n           * Fired once the view is **loaded**, *after* the DOM is rendered.\n           *\n           * @param {Object} event Event object.\n           */\n          currentScope.$emit('$viewContentLoaded', config || viewConfig);\n          currentScope.$eval(onloadExp);\n        }\n      };\n    }\n  };\n\n  return directive;\n}];\n\n$ViewDirectiveFill.$inject = ['$compile', '$controller', '$transitions', '$view', '$timeout'];\n/** @hidden */\nfunction $ViewDirectiveFill (  $compile,   $controller,   $transitions,   $view,   $timeout) {\n  const getControllerAs = parse('viewDecl.controllerAs');\n  const getResolveAs = parse('viewDecl.resolveAs');\n\n  return {\n    restrict: 'ECA',\n    priority: -400,\n    compile: function (tElement) {\n      let initial = tElement.html();\n\n      return function (scope, $element) {\n        let data: UIViewData = $element.data('$uiView');\n        if (!data) return;\n\n        let cfg: Ng1ViewConfig = data.$cfg || <any> { viewDecl: {} };\n        $element.html(cfg.template || initial);\n        trace.traceUIViewFill(data.$uiView, $element.html());\n\n        let link = $compile($element.contents());\n        let controller = cfg.controller;\n        let controllerAs: string = getControllerAs(cfg);\n        let resolveAs: string = getResolveAs(cfg);\n        let resolveCtx: ResolveContext = cfg.path && new ResolveContext(cfg.path);\n        let locals = resolveCtx && getLocals(resolveCtx);\n\n        scope[resolveAs] = locals;\n        \n        if (controller) {\n          let controllerInstance = $controller(controller, extend({}, locals, { $scope: scope, $element: $element }));\n          if (controllerAs) {\n            scope[controllerAs] = controllerInstance;\n            scope[controllerAs][resolveAs] = locals;\n          }\n\n          // TODO: Use $view service as a central point for registering component-level hooks\n          // Then, when a component is created, tell the $view service, so it can invoke hooks\n          // $view.componentLoaded(controllerInstance, { $scope: scope, $element: $element });\n          // scope.$on('$destroy', () => $view.componentUnloaded(controllerInstance, { $scope: scope, $element: $element }));\n\n          $element.data('$ngControllerController', controllerInstance);\n          $element.children().data('$ngControllerController', controllerInstance);\n\n          registerControllerCallbacks($transitions, controllerInstance, scope, cfg);\n        }\n\n        // Wait for the component to appear in the DOM\n        if (isString(cfg.viewDecl.component)) {\n          let cmp = cfg.viewDecl.component;\n          let kebobName = kebobString(cmp);\n          let getComponentController = () => {\n            let directiveEl = [].slice.call($element[0].children)\n                .filter(el => el && el.tagName && el.tagName.toLowerCase() === kebobName) ;\n            return directiveEl && angular.element(directiveEl).data(`$${cmp}Controller`);\n          };\n\n          let deregisterWatch = scope.$watch(getComponentController, function(ctrlInstance) {\n            if (!ctrlInstance) return;\n            registerControllerCallbacks($transitions, ctrlInstance, scope, cfg);\n            deregisterWatch();\n          });\n        }\n\n        link(scope);\n      };\n    }\n  };\n}\n\n/** @hidden */\nlet hasComponentImpl = typeof angular.module('ui.router')['component'] === 'function';\n\n/** @hidden TODO: move these callbacks to $view and/or `/hooks/components.ts` or something */\nfunction registerControllerCallbacks($transitions: TransitionService, controllerInstance: Ng1Controller, $scope, cfg: Ng1ViewConfig) {\n  // Call $onInit() ASAP\n  if (isFunction(controllerInstance.$onInit) && !(cfg.viewDecl.component && hasComponentImpl)) controllerInstance.$onInit();\n\n  let viewState: Ng1StateDeclaration = tail(cfg.path).state.self;\n\n  var hookOptions: HookRegOptions = { bind: controllerInstance };\n  // Add component-level hook for onParamsChange\n  if (isFunction(controllerInstance.uiOnParamsChanged)) {\n    let resolveContext: ResolveContext = new ResolveContext(cfg.path);\n    let viewCreationTrans = resolveContext.getResolvable('$transition$').data;\n\n    // Fire callback on any successful transition\n    const paramsUpdated = ($transition$: Transition) => {\n      // Exit early if the $transition$ is the same as the view was created within.\n      // Exit early if the $transition$ will exit the state the view is for.\n      if ($transition$ === viewCreationTrans || $transition$.exiting().indexOf(viewState) !== -1) return;\n\n      let toParams = $transition$.params(\"to\");\n      let fromParams = $transition$.params(\"from\");\n      let toSchema: Param[] = $transition$.treeChanges().to.map((node: PathNode) => node.paramSchema).reduce(unnestR, []);\n      let fromSchema: Param[] = $transition$.treeChanges().from.map((node: PathNode) => node.paramSchema).reduce(unnestR, []);\n\n      // Find the to params that have different values than the from params\n      let changedToParams = toSchema.filter((param: Param) => {\n        let idx = fromSchema.indexOf(param);\n        return idx === -1 || !fromSchema[idx].type.equals(toParams[param.id], fromParams[param.id]);\n      });\n\n      // Only trigger callback if a to param has changed or is new\n      if (changedToParams.length) {\n        let changedKeys = changedToParams.map(x => x.id);\n        // Filter the params to only changed/new to params.  `$transition$.params()` may be used to get all params.\n        controllerInstance.uiOnParamsChanged(filter(toParams, (val, key) => changedKeys.indexOf(key) !== -1), $transition$);\n      }\n    };\n    $scope.$on('$destroy', $transitions.onSuccess({}, paramsUpdated, hookOptions));\n  }\n\n  // Add component-level hook for uiCanExit\n  if (isFunction(controllerInstance.uiCanExit)) {\n    var criteria = {exiting: viewState.name};\n    $scope.$on('$destroy', $transitions.onBefore(criteria, controllerInstance.uiCanExit, hookOptions));\n  }\n}\n\nangular.module('ui.router.state').directive('uiView', uiView);\nangular.module('ui.router.state').directive('uiView', $ViewDirectiveFill);\n\n\n\n/** WEBPACK FOOTER **\n ** ./ng1/directives/viewDirective.ts\n **/","/** @module ng1 */ /** */\nimport {IServiceProviderFactory} from \"angular\";\n\n/**\n * @ngdoc object\n * @name ui.router.state.$uiViewScrollProvider\n *\n * @description\n * Provider that returns the {@link ui.router.state.$uiViewScroll} service function.\n */\nfunction $ViewScrollProvider() {\n\n  var useAnchorScroll = false;\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.$uiViewScrollProvider#useAnchorScroll\n   * @methodOf ui.router.state.$uiViewScrollProvider\n   *\n   * @description\n   * Reverts back to using the core [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll) service for\n   * scrolling based on the url anchor.\n   */\n  this.useAnchorScroll = function () {\n    useAnchorScroll = true;\n  };\n\n  /**\n   * @ngdoc object\n   * @name ui.router.state.$uiViewScroll\n   *\n   * @requires $anchorScroll\n   * @requires $timeout\n   *\n   * @description\n   * When called with a jqLite element, it scrolls the element into view (after a\n   * `$timeout` so the DOM has time to refresh).\n   *\n   * If you prefer to rely on `$anchorScroll` to scroll the view to the anchor,\n   * this can be enabled by calling {@link ui.router.state.$uiViewScrollProvider#methods_useAnchorScroll `$uiViewScrollProvider.useAnchorScroll()`}.\n   */\n  this.$get = ['$anchorScroll', '$timeout', function ($anchorScroll, $timeout) {\n    if (useAnchorScroll) {\n      return $anchorScroll;\n    }\n\n    return function ($element) {\n      return $timeout(function () {\n        $element[0].scrollIntoView();\n      }, 0, false);\n    };\n  }];\n}\n\nangular.module('ui.router.state').provider('$uiViewScroll', <IServiceProviderFactory> $ViewScrollProvider);\n\n\n\n/** WEBPACK FOOTER **\n ** ./ng1/viewScroll.ts\n **/"],"sourceRoot":""}