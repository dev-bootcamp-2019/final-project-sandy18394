{
  "_args": [
    [
      {
        "raw": "peer-id@~0.10.7",
        "scope": null,
        "escapedName": "peer-id",
        "name": "peer-id",
        "rawSpec": "~0.10.7",
        "spec": ">=0.10.7 <0.11.0",
        "type": "range"
      },
      "/Users/sandeepghosh/Desktop/blockchain/smart contracts/dappRoll2Win/dumed/node_modules/peer-info"
    ]
  ],
  "_from": "peer-id@~0.10.7",
  "_hasShrinkwrap": false,
  "_id": "peer-id@0.10.7",
  "_location": "/peer-info/peer-id",
  "_nodeVersion": "9.4.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/peer-id_0.10.7_1522942946317_0.7914165901469883"
  },
  "_npmUser": {
    "name": "daviddias",
    "email": "daviddias.p@gmail.com"
  },
  "_npmVersion": "5.8.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "peer-id@~0.10.7",
    "scope": null,
    "escapedName": "peer-id",
    "name": "peer-id",
    "rawSpec": "~0.10.7",
    "spec": ">=0.10.7 <0.11.0",
    "type": "range"
  },
  "_requiredBy": [
    "/peer-info"
  ],
  "_resolved": "https://registry.npmjs.org/peer-id/-/peer-id-0.10.7.tgz",
  "_shasum": "6c12634636fc90a0e7bc76360c95f73564461fdd",
  "_shrinkwrap": null,
  "_spec": "peer-id@~0.10.7",
  "_where": "/Users/sandeepghosh/Desktop/blockchain/smart contracts/dappRoll2Win/dumed/node_modules/peer-info",
  "author": {
    "name": "David Dias",
    "email": "daviddias@ipfs.io"
  },
  "bin": {
    "peer-id": "src/bin.js"
  },
  "bugs": {
    "url": "https://github.com/libp2p/js-peer-id/issues"
  },
  "contributors": [
    {
      "name": "David Dias",
      "email": "daviddias.p@gmail.com"
    },
    {
      "name": "David Dias",
      "email": "mail@daviddias.me"
    },
    {
      "name": "Friedel Ziegelmayer",
      "email": "dignifiedquire@gmail.com"
    },
    {
      "name": "Maciej Krüger",
      "email": "mkg20001@gmail.com"
    },
    {
      "name": "Prashanth Chandra",
      "email": "coolshanth94@gmail.com"
    },
    {
      "name": "Richard Littauer",
      "email": "richard.littauer@gmail.com"
    },
    {
      "name": "Richard Schneider",
      "email": "makaretu@gmail.com"
    },
    {
      "name": "Stephen Whitmore",
      "email": "stephen.whitmore@gmail.com"
    },
    {
      "name": "Yahya",
      "email": "ya7yaz@gmail.com"
    },
    {
      "name": "greenkeeperio-bot",
      "email": "support@greenkeeper.io"
    },
    {
      "name": "nginnever",
      "email": "ginneversource@gmail.com"
    },
    {
      "name": "npmcdn-to-unpkg-bot",
      "email": "npmcdn-to-unpkg-bot@users.noreply.github.com"
    },
    {
      "name": "ᴠɪᴄᴛᴏʀ ʙᴊᴇʟᴋʜᴏʟᴍ",
      "email": "victorbjelkholm@gmail.com"
    }
  ],
  "dependencies": {
    "async": "^2.6.0",
    "libp2p-crypto": "~0.12.1",
    "lodash": "^4.17.5",
    "multihashes": "~0.4.13"
  },
  "description": "IPFS Peer Id implementation in Node.js",
  "devDependencies": {
    "aegir": "^13.0.6",
    "chai": "^4.1.2",
    "dirty-chai": "^2.0.1",
    "pre-commit": "^1.2.2"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-VEpMFcL9q0NQijmR0jsj38OGbY4yzaWMEareVkDahopmlNT+Cpsot8btPgsgBBApP9NiZj2Enwvh8rZN30ocQw==",
    "shasum": "6c12634636fc90a0e7bc76360c95f73564461fdd",
    "tarball": "https://registry.npmjs.org/peer-id/-/peer-id-0.10.7.tgz",
    "fileCount": 14,
    "unpackedSize": 4623769
  },
  "engines": {
    "node": ">=6.0.0",
    "npm": ">=3.0.0"
  },
  "gitHead": "ffed0465953447c3c980c58e85141500817cf03a",
  "homepage": "https://github.com/libp2p/js-peer-id",
  "keywords": [
    "IPFS"
  ],
  "license": "MIT",
  "main": "src/index.js",
  "maintainers": [
    {
      "name": "daviddias",
      "email": "daviddias.p@gmail.com"
    }
  ],
  "name": "peer-id",
  "optionalDependencies": {},
  "pre-commit": [
    "lint",
    "test"
  ],
  "readme": "# peer-id\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io)\n[![](https://img.shields.io/badge/freenode-%23ipfs-blue.svg?style=flat-square)](http://webchat.freenode.net/?channels=%23ipfs)\n[![Build Status](https://travis-ci.org/libp2p/js-peer-id.svg?style=flat-square)](https://travis-ci.org/libp2p/js-peer-id)\n[![Coverage Status](https://coveralls.io/repos/github/libp2p/js-peer-id/badge.svg?branch=master)](https://coveralls.io/github/libp2p/js-peer-id?branch=master)\n[![Dependency Status](https://david-dm.org/libp2p/js-peer-id.svg?style=flat-square)](https://david-dm.org/libp2p/js-peer-id)\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat-square)](https://github.com/feross/standard)\n![](https://img.shields.io/badge/npm-%3E%3D3.0.0-orange.svg?style=flat-square)\n![](https://img.shields.io/badge/Node.js-%3E%3D6.0.0-orange.svg?style=flat-square)\n\n> [IPFS](https://github.com/ipfs/ipfs) Peer ID implementation in JavaScript.\n\n- [Description](#description)\n- [Example](#example)\n- [Installation](#installation)\n  - [npm](#npm)\n- [Setup](#setup)\n  - [Node.js](#nodejs)\n  - [Browser: Browserify, Webpack, other bundlers](#browser-browserify-webpack-other-bundlers)\n  - [Browser: `<script>` Tag](#browser-script-tag)\n- [API](#api)\n  - [Create](#create)\n    - [`new PeerId(id[, privKey, pubKey])`](#new-peeridid-privkey-pubkey)\n    - [`create([opts], callback)`](#createopts-callback)\n  - [Import](#import)\n    - [`createFromHexString(str)`](#createfromhexstringstr)\n    - [`createFromBytes(buf)`](#createfrombytesbuf)\n    - [`createFromB58String(str)`](#createfromb58stringstr)\n    - [`createFromPubKey(pubKey)`](#createfrompubkeypubkey)\n    - [`createFromPrivKey(privKey)`](#createfromprivkeyprivkey)\n    - [`createFromJSON(obj)`](#createfromjsonobj)\n  - [Export](#export)\n    - [`toHexString()`](#tohexstring)\n    - [`toBytes()`](#tobytes)\n    - [`toB58String()`](#tob58string)\n    - [`toJSON()`](#tojson)\n    - [`toPrint()`](#toprint)\n- [License](#license)\n\n# Description\n\nGenerate, import, and export PeerIDs, for use with [IPFS](https://github.com/ipfs/ipfs).\n\nA Peer ID is the SHA-256 [multihash](https://github.com/multiformats/multihash) of a public key.\n\nThe public key is a base64 encoded string of a protobuf containing an RSA DER buffer. This uses a node buffer to pass the base64 encoded public key protobuf to the multihash for ID generation.\n\n# Example\n\n```JavaScript\nconst PeerId = require('peer-id')\n\nPeerId.create({ bits: 1024 }, (err, id) => {\n  if (err) { throw err }\n  console.log(JSON.stringify(id.toJSON(), null, 2))\n})\n```\n```bash\n{\n  \"id\": \"Qma9T5YraSnpRDZqRR4krcSJabThc8nwZuJV3LercPHufi\",\n  \"privKey\": \"CAAS4AQwggJcAgEAAoGBAMBgbIqyOL26oV3nGPBYrdpbv..\",\n  \"pubKey\": \"CAASogEwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAMBgbIqyOL26oV3nGPBYrdpbvzCY...\"\n}\n```\n\n# Installation\n\n## npm\n\n```sh\n> npm i peer-id\n```\n\n# Setup\n\n## Node.js\n\n```js\nconst PeerId = require('peer-id')\n```\n\n## Browser: Browserify, Webpack, other bundlers\n\nThe code published to npm that gets loaded on require is in fact a ES5\ntranspiled version with the right shims added. This means that you can require\nit and use with your favourite bundler without having to adjust asset management\nprocess.\n\n```js\nconst PeerId = require('peer-id')\n```\n\n## Browser: `<script>` Tag\n\nLoading this module through a script tag will make the `PeerId` obj available in\nthe global namespace.\n\n```html\n<script src=\"https://unpkg.com/peer-id/dist/index.min.js\"></script>\n<!-- OR -->\n<script src=\"https://unpkg.com/peer-id/dist/index.js\"></script>\n```\n\n# API\n\n```js\nconst PeerId = require('peer-id')\n```\n\n## Create\n\n### `new PeerId(id[, privKey, pubKey])`\n\n- `id: Buffer` - The multihash of the publick key as `Buffer`\n- `privKey: RsaPrivateKey` - The private key\n- `pubKey: RsaPublicKey` - The public key\n\nThe key format is detailed in [libp2p-crypto](https://github.com/libp2p/js-libp2p-crypto).\n\n### `create([opts], callback)`\n\nGenerates a new Peer ID, complete with public/private keypair.\n\n- `opts: Object`: Default: `{bits: 2048}`\n- `callback: Function`\n\nCalls back `callback` with `err, id`.\n\n## Import\n\n### `createFromHexString(str)`\n\nCreates a Peer ID from hex string representing the key's multihash.\n\n### `createFromBytes(buf)`\n\nCreates a Peer ID from a buffer representing the key's multihash.\n\n### `createFromB58String(str)`\nCreates a Peer ID from a Base58 string representing the key's multihash.\n\n### `createFromPubKey(pubKey)`\n\n- `publicKey: Buffer`\n\nCreates a Peer ID from a buffer containing a public key.\n\n### `createFromPrivKey(privKey)`\n\n- `privKey: Buffer`\n\nCreates a Peer ID from a buffer containing a private key.\n\n### `createFromJSON(obj)`\n\n- `obj.id: String` - The multihash encoded in `base58`\n- `obj.pubKey: String` - The public key in protobuf format, encoded in 'base64'\n- `obj.privKey: String` - The private key in protobuf format, encoded in 'base 64'\n\n## Export\n\n### `toHexString()`\n\nReturns the Peer ID's `id` as a hex string.\n\n```\n1220d6243998f2fc56343ad7ed0342ab7886a4eb18d736f1b67d44b37fcc81e0f39f\n```\n\n### `toBytes()`\n\nReturns the Peer ID's `id` as a buffer.\n\n```\n<Buffer 12 20 d6 24 39 98 f2 fc 56 34 3a d7 ed 03 42 ab 78 86 a4 eb 18 d7 36 f1 b6 7d 44 b3 7f cc 81 e0 f3 9f>\n```\n\n### `toB58String()`\n\nReturns the Peer ID's `id` as a base58 string.\n\n```\nQmckZzdVd72h9QUFuJJpQqhsZqGLwjhh81qSvZ9BhB2FQi\n```\n\n### `toJSON()`\n\nReturns an `obj` of the form\n\n- `obj.id: String` - The multihash encoded in `base58`\n- `obj.pubKey: String` - The public key in protobuf format, encoded in 'base64'\n- `obj.privKey: String` - The private key in protobuf format, encoded in 'base 64'\n\n\n### `toPrint()`\n\nAlias for `.toJSON()`.\n\n### `isEqual(id)`\n\n- `id` can be a PeerId or a Buffer containing the id\n\n# License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/libp2p/js-peer-id.git"
  },
  "scripts": {
    "build": "aegir build",
    "coverage": "aegir coverage",
    "lint": "aegir lint",
    "release": "aegir release",
    "release-major": "aegir release --type major",
    "release-minor": "aegir release --type minor",
    "test": "aegir test",
    "test:browser": "aegir test -t browser -t webworker",
    "test:node": "aegir test -t node"
  },
  "version": "0.10.7"
}
