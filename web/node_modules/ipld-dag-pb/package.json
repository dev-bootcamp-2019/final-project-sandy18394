{
  "_args": [
    [
      {
        "raw": "ipld-dag-pb@~0.14.11",
        "scope": null,
        "escapedName": "ipld-dag-pb",
        "name": "ipld-dag-pb",
        "rawSpec": "~0.14.11",
        "spec": ">=0.14.11 <0.15.0",
        "type": "range"
      },
      "/Users/sandeepghosh/Desktop/blockchain/smart contracts/dappRoll2Win/dumed/node_modules/ipfs-api"
    ]
  ],
  "_from": "ipld-dag-pb@~0.14.11",
  "_hasShrinkwrap": false,
  "_id": "ipld-dag-pb@0.14.11",
  "_location": "/ipld-dag-pb",
  "_nodeVersion": "10.4.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/ipld-dag-pb_0.14.11_1540563691045_0.7861325457048098"
  },
  "_npmUser": {
    "name": "vmx",
    "email": "volker.mische@gmail.com"
  },
  "_npmVersion": "6.4.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "ipld-dag-pb@~0.14.11",
    "scope": null,
    "escapedName": "ipld-dag-pb",
    "name": "ipld-dag-pb",
    "rawSpec": "~0.14.11",
    "spec": ">=0.14.11 <0.15.0",
    "type": "range"
  },
  "_requiredBy": [
    "/ipfs-api"
  ],
  "_resolved": "https://registry.npmjs.org/ipld-dag-pb/-/ipld-dag-pb-0.14.11.tgz",
  "_shasum": "df235a301fec8443cf933387cebb38e42c22c2a8",
  "_shrinkwrap": null,
  "_spec": "ipld-dag-pb@~0.14.11",
  "_where": "/Users/sandeepghosh/Desktop/blockchain/smart contracts/dappRoll2Win/dumed/node_modules/ipfs-api",
  "bugs": {
    "url": "https://github.com/ipld/js-ipld-dag-pb/issues"
  },
  "contributors": [
    {
      "name": "Adam Stone",
      "email": "AdamStone@users.noreply.github.com"
    },
    {
      "name": "Alan Shaw",
      "email": "alan@tableflip.io"
    },
    {
      "name": "Arpit Agarwal",
      "email": "atvanguard@users.noreply.github.com"
    },
    {
      "name": "David Dias",
      "email": "daviddias.p@gmail.com"
    },
    {
      "name": "Diogo Silva",
      "email": "fsdiogo@gmail.com"
    },
    {
      "name": "Friedel Ziegelmayer",
      "email": "dignifiedquire@gmail.com"
    },
    {
      "name": "James Halliday",
      "email": "mail@substack.net"
    },
    {
      "name": "Jeff Downie",
      "email": "JeffDownie@users.noreply.github.com"
    },
    {
      "name": "Mitar",
      "email": "mitar.github@tnode.com"
    },
    {
      "name": "Oli Evans",
      "email": "oli@tableflip.io"
    },
    {
      "name": "Richard Littauer",
      "email": "richard.littauer@gmail.com"
    },
    {
      "name": "Richard Schneider",
      "email": "makaretu@gmail.com"
    },
    {
      "name": "Ryan Bell",
      "email": "ryan@piing.net"
    },
    {
      "name": "Stanisław Drozd",
      "email": "drozdziak1@gmail.com"
    },
    {
      "name": "Stephen Whitmore",
      "email": "stephen.whitmore@gmail.com"
    },
    {
      "name": "Vijayee Kulkaa",
      "email": "vijayee.kulkaa@hushmail.com"
    },
    {
      "name": "Volker Mische",
      "email": "volker.mische@gmail.com"
    },
    {
      "name": "Yahya",
      "email": "ya7yaz@gmail.com"
    },
    {
      "name": "achingbrain",
      "email": "alex@achingbrain.net"
    },
    {
      "name": "dmitriy ryajov",
      "email": "dryajov@dmitriys-MacBook-Pro.local"
    },
    {
      "name": "dryajov",
      "email": "dryajov@gmail.com"
    },
    {
      "name": "greenkeeper[bot]",
      "email": "greenkeeper[bot]@users.noreply.github.com"
    },
    {
      "name": "haad",
      "email": "haad@headbanggames.com"
    },
    {
      "name": "nginnever",
      "email": "ginneversource@gmail.com"
    },
    {
      "name": "ᴠɪᴄᴛᴏʀ ʙᴊᴇʟᴋʜᴏʟᴍ",
      "email": "victorbjelkholm@gmail.com"
    }
  ],
  "dependencies": {
    "async": "^2.6.1",
    "bs58": "^4.0.1",
    "cids": "~0.5.4",
    "class-is": "^1.1.0",
    "is-ipfs": "~0.4.2",
    "multihashing-async": "~0.5.1",
    "protons": "^1.0.1",
    "pull-stream": "^3.6.9",
    "pull-traverse": "^1.0.3",
    "stable": "~0.1.8"
  },
  "description": "JavaScript Implementation of the MerkleDAG Node in Protobuf.",
  "devDependencies": {
    "aegir": "^15.3.1",
    "chai": "^4.1.2",
    "chai-checkmark": "^1.0.1",
    "detect-node": "^2.0.4",
    "dirty-chai": "^2.0.1",
    "ipfs-block": "~0.7.1",
    "ipfs-block-service": "~0.14.0",
    "ipfs-repo": "~0.24.0",
    "lodash": "^4.17.11",
    "multihashes": "~0.4.14",
    "ncp": "^2.0.0",
    "rimraf": "^2.6.2"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-ja4FH6elDprVuJBkNObFlq7+9h1Q3aoQx5SSG/v3I9e7j19nwyuMhLJYwBhdv29LiqpyD2cEqNrJLm8lWn0lJg==",
    "shasum": "df235a301fec8443cf933387cebb38e42c22c2a8",
    "tarball": "https://registry.npmjs.org/ipld-dag-pb/-/ipld-dag-pb-0.14.11.tgz",
    "fileCount": 26,
    "unpackedSize": 946418,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJb0yLrCRA9TVsSAnZWagAA6BUP/375Xg79fx+5ghuQ8dVc\nUy2T6F/zqigRNsLwr1Ap6i50Vn2EqqCWGx6WMut/Uvz9hENXxVZoccLNrLve\nrHiusxWUzwoE0KBD23xARj2DoHMxzPO5jsWKWtxRrxYrCHRHrdzF8Rnypi/H\n5L9qz1dFnEDda1NRD/smtOh7Uqszz6FQAO7tYlciV3tFrAhVNhUBX8hL7ToE\nkWjltXghqjUG4oAQV6e/vTGSz7IQCnYJixIZ0FYswU8t84udO7EVeXSzArSd\nIgLE1AKMqP2bO/m4c8TxIVXSq1R4HefRLvm+3VrYMei2z14tZTJ334+9xFt+\nz2e+g16cJh5J8TetgInw3oH81DRdlBrF75WbYPCnZjYIpqYQLtBO+KI+f9B0\nGezd2ek0ISd9ngRQxm5lqocmyFDsB7YbHcpmEFV1LDeRhH0nXtGvVrnRw3lp\nWnVJ/HMtOunVtXVZXVcQKGp5HQ/LJ4EJIuzeV/I4e4FVS60jO5JAczePl/jn\n6im6oXEUGqP6Y+34YWtGAj7tb0aRfAJQvG1ZsktlO3naCEAmcNNjj+xz9oU0\ncZo8bdhlKC519J7rmCeMD9bQbk1QwUfzsLQxOeEErfjYNel8pywsePvRvazc\ngogH3jIsQIF8U7KCrutfUPMyagxWTMUkIA6GMIoJkMnW5tz8OusA78cAgRbJ\n2vBN\r\n=AQN6\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=6.0.0",
    "npm": ">=3.0.0"
  },
  "gitHead": "55655c58378d95f12bdd00883a50ac0fa8d8e54b",
  "homepage": "https://github.com/ipld/js-ipld-dag-pb#readme",
  "leadMaintainer": "Volker Mische <volker.mische@gmail.com>",
  "license": "MIT",
  "main": "src/index.js",
  "maintainers": [
    {
      "name": "daviddias",
      "email": "daviddias.p@gmail.com"
    },
    {
      "name": "vmx",
      "email": "volker.mische@gmail.com"
    }
  ],
  "name": "ipld-dag-pb",
  "optionalDependencies": {},
  "pre-push": [
    "lint",
    "test"
  ],
  "readme": "# js-ipld-dag-pb\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io)\n[![](https://img.shields.io/badge/project-IPLD-blue.svg?style=flat-square)](http://github.com/ipld/ipld)\n[![](https://img.shields.io/badge/freenode-%23ipfs-blue.svg?style=flat-square)](http://webchat.freenode.net/?channels=%23ipfs)\n[![Coverage Status](https://coveralls.io/repos/github/ipld/js-ipld-dag-pb/badge.svg?branch=master)](https://coveralls.io/github/ipld/js-ipld-dag-pb?branch=master)\n[![Dependency Status](https://david-dm.org/ipld/js-ipld-dag-pb.svg?style=flat-square)](https://david-dm.org/ipld/js-ipld-dag-pb)\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat-square)](https://github.com/feross/standard)\n[![standard-readme compliant](https://img.shields.io/badge/standard--readme-OK-green.svg?style=flat-square)](https://github.com/RichardLitt/standard-readme)\n[![Greenkeeper badge](https://badges.greenkeeper.io/ipld/js-ipld-dag-pb.svg)](https://greenkeeper.io/)\n![](https://img.shields.io/badge/npm-%3E%3D3.0.0-orange.svg?style=flat-square)\n![](https://img.shields.io/badge/Node.js-%3E%3D4.0.0-orange.svg?style=flat-square)\n\n> JavaScript Implementation of the IPLD Format MerkleDAG Node in Protobuf. In addition to the IPLD Format methods, this module also provides an API for creating the nodes and manipulating them (adding and removing links, etc).\n\n## Lead Maintainer\n\n[Volker Mische](https://github.com/vmx)\n\n## Table of Contents\n\n- [Install](#install)\n- [Usage](#usage)\n  - [Examples](#examples)\n    - [Create a DAGNode](#create-a-dagnode)\n    - [Add and remove a Link](#add-and-remove-a-link)\n- [API](#api)\n  - [DAGNode functions](#dagnode-functions)\n    - [DAGNode.create(data, links, hashAlg, callback)](#dagnodecreatedata-links-hashalg-callback)\n    - [addLink(node, link, callback)](#addlinknode-link-callback)\n    - [rmLink(node, nameOrMultihash, callback)](#rmlinknode-nameormultihash-callback)\n    - [clone(node, callback)](#clonenode-callback)\n  - [DAGNode instance methods and properties](#dagnode-instance-methods-and-properties)\n    - [`node.data`](#nodedata)\n    - [`node.links`](#nodelinks)\n    - [`node.size`](#nodesize)\n    - [`node.multihash`](#nodemultihash)\n    - [`node.serialized`](#nodeserialized)\n    - [`node.toJSON()`](#nodetojson)\n    - [`node.toString()`](#nodetostring)\n  - [DAGLink functions](#daglink-functions)\n    - [DAGLink.create(name, size, multihash, callback)](#daglinkcreatename-size-multihash-callback)\n  - [DAGLink instance methods and properties](#daglink-instance-methods-and-properties)\n    - [`link.name`](#linkname)\n    - [`link.size`](#linksize)\n    - [`link.multihash`](#linkmultihash)\n    - [`link.toJSON()`](#linktojson)\n    - [`link.toString()`](#linktostring)\n  - [[IPLD Format Specifics](https://github.com/ipld/interface-ipld-format) - Local (node/block scope) resolver](#ipld-format-specificshttpsgithubcomipldinterface-ipld-format---local-nodeblock-scope-resolver)\n    - [`dagPB.resolver.resolve`](#dagpbresolverresolve)\n    - [`dagPB.resolver.tree`](#dagpbresolvertree)\n    - [`dagPB.resolver.patch`](#dagpbresolverpatch)\n  - [[IPLD Format Specifics](https://github.com/ipld/interface-ipld-format) - util](#ipld-format-specificshttpsgithubcomipldinterface-ipld-format---util)\n  - [`dagPB.util.cid`](#dagpbutilcid)\n  - [`dagPB.util.serialize`](#dagpbutilserialize)\n  - [`dagPB.util.deserialize`](#dagpbutildeserialize)\n- [Contribute](#contribute)\n- [License](#license)\n\n## Install\n\n```bash\n> npm install ipld-dag-pb --save\n```\n\n## Usage\n\n```JavaScript\nconst dagPB = require('ipld-dag-pb')\n\ndagPB.DAGNode.create  // create a DAGNode\ndagPB.DAGNode.clone   // clone a DAGNode\ndagPB.DAGNode.addLink // add a Link to a DAGNode, creating a new one\ndagPB.DAGNode.rmLink  // remove a Link to a DAGNode, creating a new one\ndagPB.DAGLink.create  // create a DAGLink\n\n// IPLD Format specifics\ndagPB.resolver\ndagPB.util\n```\n\n### Examples\n\n#### Create a DAGNode\n\n```JavaScript\nDAGNode.create(new Buffer('some data'), (err, node1) => {\n  if (err) {\n    throw error\n  }\n  // node1 is your DAGNode instance.\n})\n\nDAGNode.create('some data', (err, node2) => {\n  // node2 will have the same data as node1.\n})\n```\n\n#### Add and remove a Link\n\n```JavaScript\nconst link = {\n  name: 'I am a link',\n  multihash: 'QmHash..',\n  size: 42\n}\n\nDAGNode.addLink(node, link, (err, nodeA) => {\n  if (err) {\n    throw err\n  }\n  // node - DAGNode instance with the link\n  console.log('with link', nodeA.toJSON())\n\n  DAGNode.rmLink(nodeA, 'I am a link', (err, nodeB) => {\n    if (err) {\n      throw err\n    }\n\n  // node - DAGNode instance without the link, equal to just node\n  console.log('without link', nodeB.toJSON())\n  })\n})\n```\n\n## API\n\n### DAGNode functions\n\nDAGNodes are immutable objects, in order to manipulate them you have to follow a function approach of applying function and getting new instances of the given DAGNode.\n\nYou can incude it in your project with:\n\n```JavaScript\nconst dagPB = require('ipld-dag-pb')\nconst DAGNode = dagPB.DAGNode\n```\n\n#### DAGNode.create(data, links, hashAlg, callback)\n\n- `data` - type: Buffer\n- `links`- type: Array of DAGLink instances or Array of DAGLink instances in its json format (link.toJSON)\n- `hashAlg` - type: String\n- `callback` - type: function with signature `function (err, node) {}`\n\nCreate a DAGNode.\n\n```JavaScript\nDAGNode.create('data', links, (err, dagNode) => {\n  // ...\n})\n```\n\nlinks can be a single or an array of DAGLinks instances or objects with the following pattern\n\n```JavaScript\n{\n  name: '<some name>',\n  hash: '<some multihash>', // can also be `multihash: <some multihash>`\n  size: <sizeInBytes>\n}\n```\n\n#### addLink(node, link, callback)\n\n- `node` - type: DAGNode\n- `link` - type: DAGLink or DAGLink in its json format\n- `callback` - type: function with signature `function (err, node) {}`\n\nCreates a link on node A to node B by using node B to get its multihash. Returns a *new* instance of DAGNode without modifying the old one.\n\nCreates a new DAGNode instance with the union of node.links plus the new link.\n\n`link` can be:\n- DAGLink instance\n- DAGNode instance\n- Object with the following properties:\n\n```JavaScript\n{\n  name: '<some string>', // optional\n  size: <size in bytes>,\n  multihash: <multihash> // can be a String multihash or multihash buffer\n}\n```\n\n\n#### rmLink(node, nameOrMultihash, callback)\n\n- `node` - type: DAGNode\n- `nameOrMultihash` - type: String or multihash buffer\n- `callback` - type: function with signature `function (err, node) {}`\n\nRemoves a link from the node by name. Returns a *new* instance of DAGNode without modifying the old one.\n\n```JavaScript\nDAGNode.rmLink(node, 'Link1' (err, dagNode) => ...) \n```\n\n#### clone(node, callback)\n\n- `node` - type: DAGNode\n- `callback` - type: function with signature `function (err, node) {}`\n\nCreates a clone of the DAGNode instance passed\n\n```JavaScript\nDAGNode.clone(node, (err, nodeClone) => {})\n```\n\n### DAGNode instance methods and properties\n\nYou have the following methods and properties available in every DAGNode instance.\n\n#### `node.data`\n\n#### `node.links`\n\nAn array of `DAGLinks`\n\n#### `node.size`\n\nSize of the node, in bytes\n\n#### `node.multihash`\n\n#### `node.serialized`\n\n#### `node.toJSON()`\n\n#### `node.toString()`\n\n\n### DAGLink functions\n\nFollowing the same pattern as [`DAGNode functions`]() above, DAGLink also offers a function for its creation. \n\nYou can incude it in your project with:\n\n```JavaScript\nconst dagPB = require('ipld-dag-pb')\nconst DAGLink = dagPB.DAGLink\n```\n\n#### DAGLink.create(name, size, multihash, callback)\n\n```JavaScript\nDAGLink.create(\n  'link-to-file',  // name of the link (can be empty)\n  10,              // size in bytes\n  'QmSomeHash...', // can be multihash buffer or string\n  (err, link) => {\n    if (err) {\n      throw err\n    }\n   // link is a DAGLink instance\n})\n```\n\nNote: DAGLinks are simpler objects and can be instantiated directly:\n\n```JavaScript\nconst link = new DAGLink(name, size, multihash)\n```\n\n### DAGLink instance methods and properties\n\n#### `link.name`\n\n#### `link.size`\n\n#### `link.multihash`\n\n#### `link.toJSON()`\n\n#### `link.toString()`\n\n### [IPLD Format Specifics](https://github.com/ipld/interface-ipld-format) - Local (node/block scope) resolver\n\n> See: https://github.com/ipld/interface-ipld-format#local-resolver-methods\n\n\n#### `dagPB.resolver.resolve`\n\n#### `dagPB.resolver.tree`\n\n#### `dagPB.resolver.patch`\n\n### [IPLD Format Specifics](https://github.com/ipld/interface-ipld-format) - util\n\n> See: https://github.com/ipld/interface-ipld-format#ipld-format-utils\n\n### `dagPB.util.cid`\n\n### `dagPB.util.serialize`\n\n### `dagPB.util.deserialize`\n\n## Contribute\n\nPlease contribute! [Look at the issues](https://github.com/ipld/js-ipld-dag-pb/issues)!\n\nCheck out our [contributing document](https://github.com/ipld/ipld/blob/master/contributing.md) for more information on how we work, and about contributing in general. Please be aware that all interactions related to IPLD are subject to the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\nSmall note: If editing the README, please conform to the [standard-readme](https://github.com/RichardLitt/standard-readme) specification.\n\n## License\n\n[ISC](LICENSE) © 2016 Protocol Labs Inc.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ipld/js-ipld-dag-pb.git"
  },
  "scripts": {
    "build": "aegir build",
    "coverage": "aegir coverage",
    "coverage-publish": "aegir coverage publish",
    "lint": "aegir lint",
    "release": "aegir release",
    "release-major": "aegir release --type major",
    "release-minor": "aegir release --type minor",
    "test": "aegir test",
    "test:browser": "aegir test --target browser",
    "test:node": "aegir test --target node"
  },
  "version": "0.14.11"
}
