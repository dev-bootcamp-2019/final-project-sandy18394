{
  "_args": [
    [
      {
        "raw": "protons@^1.0.1",
        "scope": null,
        "escapedName": "protons",
        "name": "protons",
        "rawSpec": "^1.0.1",
        "spec": ">=1.0.1 <2.0.0",
        "type": "range"
      },
      "/Users/sandeepghosh/Desktop/blockchain/smart contracts/dappRoll2Win/dumed/node_modules/ipfs-unixfs"
    ]
  ],
  "_from": "protons@>=1.0.1 <2.0.0",
  "_id": "protons@1.0.1",
  "_inCache": true,
  "_location": "/protons",
  "_nodeVersion": "8.8.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/protons-1.0.1.tgz_1512675023959_0.09943613200448453"
  },
  "_npmUser": {
    "name": "daviddias",
    "email": "daviddias.p@gmail.com"
  },
  "_npmVersion": "5.5.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "protons@^1.0.1",
    "scope": null,
    "escapedName": "protons",
    "name": "protons",
    "rawSpec": "^1.0.1",
    "spec": ">=1.0.1 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/ipfs-unixfs",
    "/ipld-dag-pb",
    "/libp2p-crypto",
    "/peer-id/libp2p-crypto",
    "/peer-info/libp2p-crypto"
  ],
  "_resolved": "https://registry.npmjs.org/protons/-/protons-1.0.1.tgz",
  "_shasum": "1c107144c07fc2d1cb8b6cb76451e6a938237676",
  "_shrinkwrap": null,
  "_spec": "protons@^1.0.1",
  "_where": "/Users/sandeepghosh/Desktop/blockchain/smart contracts/dappRoll2Win/dumed/node_modules/ipfs-unixfs",
  "author": {
    "name": "Friedel Ziegelmayer",
    "email": "dignifiedquire@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/ipfs/protons/issues"
  },
  "dependencies": {
    "protocol-buffers-schema": "^3.3.1",
    "safe-buffer": "^5.1.1",
    "signed-varint": "^2.0.1",
    "varint": "^5.0.0"
  },
  "description": "Protocol Buffers for Node.js without compiliation",
  "devDependencies": {
    "aegir": "^12.2.0",
    "benchmark": "^2.1.4",
    "protocol-buffers": "^3.2.1",
    "protons": "^1.0.0",
    "tape": "^4.8.0"
  },
  "directories": {
    "test": "test"
  },
  "dist": {
    "integrity": "sha512-+0ZKnfVs+4c43tbAQ5j0Mck8wPcLnlxUYzKQoB4iDW4ocdXGnN4P+0dDbgX1FTpoY9+7P2Tn2scJyHHqj+S/lQ==",
    "shasum": "1c107144c07fc2d1cb8b6cb76451e6a938237676",
    "tarball": "https://registry.npmjs.org/protons/-/protons-1.0.1.tgz"
  },
  "gitHead": "96187c9c2d9a936ce25250f7616feb4de1f1490b",
  "homepage": "https://github.com/ipfs/protons",
  "keywords": [
    "protobuf",
    "protocol",
    "buffers",
    "protocolbuffers",
    "encode",
    "decode",
    "google",
    "serialize",
    "parse",
    "levelup",
    "encodings",
    "encoding"
  ],
  "license": "MIT",
  "main": "src/index.js",
  "maintainers": [
    {
      "name": "daviddias",
      "email": "daviddias.p@gmail.com"
    },
    {
      "name": "dignifiedquire",
      "email": "dignifiedquire@gmail.com"
    }
  ],
  "name": "protons",
  "optionalDependencies": {},
  "readme": "# protons\n\n[![Dependency Status](https://david-dm.org/ipfs/protons.svg?style=flat-square)](https://david-dm.org/ipfs/protons)\n[![Travis CI](https://travis-ci.org/ipfs/protons.svg?branch=master)](https://travis-ci.org/ipfs/protons)\n\n> [Protocol Buffers](https://developers.google.com/protocol-buffers/) for Node.js and the browser without compilation and `eval`.\n>\n> Forked from [protocol-buffers](https://github.com/mafintos/protocol-buffers) to remove usage of `eval`.\n\n```\n> npm install protons\n```\n\n## Usage\n\nAssuming the following `test.proto` file exists\n\n```proto\nenum FOO {\n  BAR = 1;\n}\n\nmessage Test {\n  required float num  = 1;\n  required string payload = 2;\n}\n\nmessage AnotherOne {\n  repeated FOO list = 1;\n}\n```\n\nUse the above proto file to encode/decode messages by doing\n\n``` js\nconst protons = require('protons')\n\n// pass a proto file as a buffer/string or pass a parsed protobuf-schema object\nconst messages = protons(fs.readFileSync('test.proto'))\n\nconst buf = messages.Test.encode({\n  num: 42,\n  payload: 'hello world'\n})\n\nconsole.log(buf) // should print a buffer\n```\n\nTo decode a message use `Test.decode`\n\n``` js\nconst obj = messages.Test.decode(buf)\nconsole.log(obj) // should print an object similar to above\n```\n\nEnums are accessed in the same way as messages\n\n``` js\nconst buf = messages.AnotherOne.encode({\n  list: [\n    messages.FOO.BAR\n  ]\n})\n```\n\nNested emums are accessed as properties on the corresponding message\n\n``` js\nconst buf = message.SomeMessage.encode({\n  list: [\n    messages.SomeMessage.NESTED_ENUM.VALUE\n  ]\n})\n```\n\nSee the [Google Protocol Buffers docs](https://developers.google.com/protocol-buffers/) for more information about the\navailable types etc.\n\n## Performance\n\nThis module is pretty fast.\n\nYou can run the benchmarks yourself by doing `npm run bench`.\n\nOn my Macbook Pro it gives the following results\n\n```\nJSON (encode) x 516,087 ops/sec ±6.68% (73 runs sampled)\nJSON (decode) x 534,339 ops/sec ±1.79% (89 runs sampled)\nJSON(encode + decode) x 236,625 ops/sec ±5.42% (81 runs sampled)\nprotocol-buffers (encode) x 385,121 ops/sec ±3.89% (82 runs sampled)\nprotocol-buffers (decode) x 945,545 ops/sec ±2.39% (86 runs sampled)\nprotocol-buffers(encode + decode) x 279,605 ops/sec ±2.83% (86 runs sampled)\nnpm (encode) x 377,625 ops/sec ±3.15% (84 runs sampled)\nnpm (decode) x 948,428 ops/sec ±3.59% (87 runs sampled)\nnpm(encode + decode) x 251,929 ops/sec ±2.91% (81 runs sampled)\nlocal (encode) x 373,376 ops/sec ±6.90% (66 runs sampled)\nlocal (decode) x 1,770,870 ops/sec ±1.50% (83 runs sampled)\nlocal(encode + decode) x 322,507 ops/sec ±2.82% (79 runs sampled)\n```\n\nNote that JSON parsing/serialization in node is a native function that is *really* fast.\n\n## Leveldb encoding compatibility\n\nCompiled protocol buffers messages are valid levelup encodings.\nThis means you can pass them as `valueEncoding` and `keyEncoding`.\n\n``` js\nconst level = require('level')\nconst db = level('db')\n\ndb.put('hello', {payload:'world'}, {valueEncoding:messages.Test}, (err) => {\n  db.get('hello', {valueEncoding:messages.Test}, (err, message) => {\n    console.log(message)\n  })\n})\n```\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ipfs/protons.git"
  },
  "scripts": {
    "bench": "node bench",
    "lint": "aegir lint",
    "test": "tape test/*.js"
  },
  "version": "1.0.1"
}
