{
  "_args": [
    [
      {
        "raw": "class-is@^1.1.0",
        "scope": null,
        "escapedName": "class-is",
        "name": "class-is",
        "rawSpec": "^1.1.0",
        "spec": ">=1.1.0 <2.0.0",
        "type": "range"
      },
      "/Users/sandeepghosh/Desktop/blockchain/smart contracts/dappRoll2Win/dumed/node_modules/cids"
    ]
  ],
  "_from": "class-is@^1.1.0",
  "_hasShrinkwrap": false,
  "_id": "class-is@1.1.0",
  "_location": "/class-is",
  "_nodeVersion": "9.5.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/class-is_1.1.0_1522832076487_0.3628861749141816"
  },
  "_npmUser": {
    "name": "fsdiogo",
    "email": "fsdiogo@gmail.com"
  },
  "_npmVersion": "5.8.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "class-is@^1.1.0",
    "scope": null,
    "escapedName": "class-is",
    "name": "class-is",
    "rawSpec": "^1.1.0",
    "spec": ">=1.1.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/cids",
    "/ipfs-block",
    "/ipld-dag-pb",
    "/mafmt/multiaddr",
    "/multiaddr",
    "/peer-id",
    "/peer-info/multiaddr"
  ],
  "_resolved": "https://registry.npmjs.org/class-is/-/class-is-1.1.0.tgz",
  "_shasum": "9d3c0fba0440d211d843cec3dedfa48055005825",
  "_shrinkwrap": null,
  "_spec": "class-is@^1.1.0",
  "_where": "/Users/sandeepghosh/Desktop/blockchain/smart contracts/dappRoll2Win/dumed/node_modules/cids",
  "author": {
    "name": "Diogo Silva",
    "email": "fsdiogo@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/moxystudio/js-class-is/issues"
  },
  "commitlint": {
    "extends": [
      "@commitlint/config-conventional"
    ]
  },
  "dependencies": {},
  "description": "Enhances a JavaScript class by adding an is<Class> property to compare types between realms.",
  "devDependencies": {
    "@commitlint/cli": "^6.1.3",
    "@commitlint/config-conventional": "^6.1.3",
    "eslint": "^4.19.1",
    "eslint-config-moxy": "^5.2.1",
    "husky": "^0.14.3",
    "jest": "^22.4.3",
    "lint-staged": "^7.0.0",
    "standard-version": "^4.3.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-rhjH9AG1fvabIDoGRVH587413LPjTZgmDF9fOFCbFJQV4yuocX1mHxxvXI4g3cGwbVY9wAYIoKlg1N79frJKQw==",
    "shasum": "9d3c0fba0440d211d843cec3dedfa48055005825",
    "tarball": "https://registry.npmjs.org/class-is/-/class-is-1.1.0.tgz",
    "fileCount": 24,
    "unpackedSize": 25299
  },
  "gitHead": "1affc1c3a37f9152c5021e8b24e15418b74363e0",
  "homepage": "https://github.com/moxystudio/js-class-is",
  "keywords": [
    "withis",
    "with-is",
    "isclass",
    "is-class",
    "symbols",
    "realms",
    "instanceof",
    "instance-of"
  ],
  "license": "MIT",
  "lint-staged": {
    "*.js": [
      "eslint --fix",
      "git add"
    ]
  },
  "main": "index.js",
  "maintainers": [
    {
      "name": "acostalima",
      "email": "andreclima.pt@gmail.com"
    },
    {
      "name": "afonsovreis",
      "email": "a.reis_05@hotmail.com"
    },
    {
      "name": "andregoncalvesdev",
      "email": "andregoncalves20007@gmail.com"
    },
    {
      "name": "andreneves",
      "email": "andre.neves@moxy.studio"
    },
    {
      "name": "capelo",
      "email": "antonio.c.capelo@gmail.com"
    },
    {
      "name": "filipediasf",
      "email": "filipediasferreira@me.com"
    },
    {
      "name": "fsdiogo",
      "email": "fsdiogo@gmail.com"
    },
    {
      "name": "hugomrdias",
      "email": "mail@hugodias.me"
    },
    {
      "name": "ivolimasilva",
      "email": "ivolimasilva@outlook.com"
    },
    {
      "name": "jonnybel",
      "email": "jonnybel91@gmail.com"
    },
    {
      "name": "marcooliveira",
      "email": "marcooliveira@me.com"
    },
    {
      "name": "moxyhq",
      "email": "hello@moxy.studio"
    },
    {
      "name": "nlfonseca",
      "email": "nelsonfonseca.18@gmail.com"
    },
    {
      "name": "paulobmarcos",
      "email": "paulobmarcos@outlook.com"
    },
    {
      "name": "pedromiguelss",
      "email": "pedromiguelsousasantos@hotmail.com"
    },
    {
      "name": "ricardo-silva91",
      "email": "ricardo.silva@moxy.studio"
    },
    {
      "name": "ruimonteiro",
      "email": "ruimpmonteiro12345@gmail.com"
    },
    {
      "name": "ruipneves",
      "email": "rui.neves@moxy.studio"
    },
    {
      "name": "satazor",
      "email": "andremiguelcruz@msn.com"
    },
    {
      "name": "vascosantos",
      "email": "santos.vasco10@gmail.com"
    }
  ],
  "name": "class-is",
  "optionalDependencies": {},
  "readme": "# class-is\n\n[![NPM version][npm-image]][npm-url] [![Downloads][downloads-image]][npm-url] [![Build Status][travis-image]][travis-url] [![Coverage Status][codecov-image]][codecov-url] [![Dependency status][david-dm-image]][david-dm-url] [![Dev Dependency status][david-dm-dev-image]][david-dm-dev-url] [![Greenkeeper badge][greenkeeper-image]][greenkeeper-url]\n\n[npm-url]:https://npmjs.org/package/class-is\n[downloads-image]:http://img.shields.io/npm/dm/class-is.svg\n[npm-image]:http://img.shields.io/npm/v/class-is.svg\n[travis-url]:https://travis-ci.org/moxystudio/js-class-is\n[travis-image]:http://img.shields.io/travis/moxystudio/js-class-is/master.svg\n[codecov-url]:https://codecov.io/gh/moxystudio/js-class-is\n[codecov-image]:https://img.shields.io/codecov/c/github/moxystudio/js-class-is/master.svg\n[david-dm-url]:https://david-dm.org/moxystudio/js-class-is\n[david-dm-image]:https://img.shields.io/david/moxystudio/js-class-is.svg\n[david-dm-dev-url]:https://david-dm.org/moxystudio/js-class-is?type=dev\n[david-dm-dev-image]:https://img.shields.io/david/dev/moxystudio/js-class-is.svg\n[greenkeeper-image]:https://badges.greenkeeper.io/moxystudio/js-class-is.svg\n[greenkeeper-url]:https://greenkeeper.io/\n\nEnhances a JavaScript class by adding an `is<Class>` property to compare types between realms.\n\n\n## Motivation\n\nChecking if a value is an instance of a class in JavaScript is not an easy task.\n\nYou can use `instanceof`, but that doesn't work between different realms or different versions. Comparing with `constructor.name` could be a solution but if you need to Uglify the module it doesn't work, as it creates different names for the same module.\n\n[Symbols](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) to the rescue!\n\n\n## Installation\n\n`$ npm install class-is`\n\nIf you want to use this module in the browser you have to compile it yourself to your desired target.\n\n\n## Usage\n\n### ES6 classes:\n\n```js\n// Package X\nconst withIs = require('class-is');\n\nclass Person {\n    constructor(name, city) {\n        this.name = name;\n        this.city = city;\n    }\n}\n\nmodule.exports = withIs(Person, {\n    className: 'Person',\n    symbolName: '@org/package-x/Person',\n});\n```\n\n```js\n// Package Y\nconst withIs = require('class-is');\n\nclass Animal {\n    constructor(species) {\n        this.species = species;\n    }\n}\n\nmodule.exports = withIs(Animal, {\n    className: 'Animal',\n    symbolName: '@org/package-y/Animal',\n});\n```\n\n```js\nconst Person = require('package-x');\nconst Animal = require('package-y');\n\nconst diogo = new Person('Diogo', 'Porto');\nconst wolf = new Animal('Gray Wolf');\n\nconsole.log(Person.isPerson(diogo));\nconsole.log(Person.isPerson(wolf));\n```\n\nRunning the example above will print:\n\n```\ntrue\nfalse\n```\n\n### ES5 and below classes:\n\nIn ES5 it's not unusual to see constructors like the one below, so you can call it without using the `new` keyword.\n\n```js\nfunction Circle(radius) {\n    if (!(this instanceof Circle)) {\n        return new Circle();\n    }\n\n    this.radius = radius;\n}\n```\n\nIn such cases you can use the `withIs.proto` method:\n\n```js\nconst withIs = require('class-is');\n\nconst Circle = withIs.proto(function (radius) {\n    if (!(this instanceof Circle)) {\n        return new Circle();\n    }\n\n    this.radius = radius;\n}, {\n    className: 'Circle',\n    symbolName: '@org/package/Circle',\n});\n```\n\n...or even better:\n\n```js\nconst withIs = require('class-is');\n\nfunction Circle(radius) {\n    this.radius = radius;\n}\n\nmodule.exports = withIs.proto(Circle, {\n    className: 'Circle',\n    symbolName: '@org/package/Circle',\n    withoutNew: true,\n});\n```\n\n\n## API\n\n### withIs(Class, { className, symbolName })\n\n###### class\n\nType: `class`\n\nThe class to be enhanced.\n\n###### className\n\nType: `String`\n\nThe name of the class your passing.\n\n###### symbolName\n\nType: `String`\n\nUnique *id* for the class. This should be namespaced so different classes from different modules do not collide and give false positives.\n\nExample: `@organization/package/Class`\n\n### withIs.proto(Class, { className, symbolName, withoutNew })\n\nThe `className` and `symbolName` parameters are the same as above.\n\n###### withoutNew\n\nType: `Boolean`   \nDefault: `false`\n\nAllow creating an instance without the `new` operator.\n\n\n## Tests\n\n`$ npm test`   \n`$ npm test -- --watch` during development\n\n\n## License\n\n[MIT](http://www.opensource.org/licenses/mit-license.php)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/moxystudio/js-class-is.git"
  },
  "scripts": {
    "commitmsg": "commitlint -e $GIT_PARAMS",
    "lint": "eslint .",
    "precommit": "lint-staged",
    "prerelease": "npm t && npm run lint",
    "release": "standard-version",
    "test": "jest --env node --coverage"
  },
  "standard-version": {
    "scripts": {
      "posttag": "git push --follow-tags origin master && npm publish"
    }
  },
  "version": "1.1.0"
}
