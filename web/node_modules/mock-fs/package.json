{
  "_args": [
    [
      {
        "raw": "mock-fs@^4.1.0",
        "scope": null,
        "escapedName": "mock-fs",
        "name": "mock-fs",
        "rawSpec": "^4.1.0",
        "spec": ">=4.1.0 <5.0.0",
        "type": "range"
      },
      "/Users/sandeepghosh/Desktop/blockchain/smart contracts/dappRoll2Win/dumed/node_modules/swarm-js"
    ]
  ],
  "_from": "mock-fs@^4.1.0",
  "_hasShrinkwrap": false,
  "_id": "mock-fs@4.7.0",
  "_location": "/mock-fs",
  "_nodeVersion": "10.10.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/mock-fs_4.7.0_1536692141543_0.06134751236665026"
  },
  "_npmUser": {
    "name": "tschaub",
    "email": "tim.schaub@gmail.com"
  },
  "_npmVersion": "6.4.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "mock-fs@^4.1.0",
    "scope": null,
    "escapedName": "mock-fs",
    "name": "mock-fs",
    "rawSpec": "^4.1.0",
    "spec": ">=4.1.0 <5.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/swarm-js"
  ],
  "_resolved": "https://registry.npmjs.org/mock-fs/-/mock-fs-4.7.0.tgz",
  "_shasum": "9f17e219cacb8094f4010e0a8c38589e2b33c299",
  "_shrinkwrap": null,
  "_spec": "mock-fs@^4.1.0",
  "_where": "/Users/sandeepghosh/Desktop/blockchain/smart contracts/dappRoll2Win/dumed/node_modules/swarm-js",
  "author": {
    "name": "Tim Schaub",
    "url": "http://tschaub.net/"
  },
  "bugs": {
    "url": "https://github.com/tschaub/mock-fs/issues"
  },
  "dependencies": {},
  "description": "A configurable mock file system.  You know, for testing.",
  "devDependencies": {
    "chai": "^4.1.2",
    "eslint": "^4.8.0",
    "eslint-config-tschaub": "^8.0.0",
    "mocha": "^4.0.1",
    "rimraf": "^2.6.2",
    "semver": "^5.4.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-WlQNtUlzMRpvLHf8dqeUmNqfdPjGY29KrJF50Ldb4AcL+vQeR8QH3wQcFMgrhTwb1gHjZn9xggho+84tBskLgA==",
    "shasum": "9f17e219cacb8094f4010e0a8c38589e2b33c299",
    "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-4.7.0.tgz",
    "fileCount": 14,
    "unpackedSize": 88903,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbmA+uCRA9TVsSAnZWagAAfhIP/1KqrPHVchmddj2b85kh\nF6WYethaHDtR+qJiLBrbbtOTz8Vu5gdKg+ONjJyU5+MrPey2N2apqRbopUu1\nM13evEV2Gd9YYUet/TKwgaDTp3T7MhuHQSXvdw88grs24INmROAvqquX/cjL\n00v5IQjY//E9KUCI/ysNamTPhEPuHSx+Mve7hf2yYX/yRJhKdpcfv9cV78n5\nOkI3b5MwreuwhfkJJ6tpKIdsQqkDcTNzWLaAE7jbuDf/8S0BJ587rD2H2Tyc\nztKAQli1oc7faAPegHjOX57dpEyQUVXLAGhqUyTP7tFSu0Bil26V/SQFhVNp\nJVcDIaJNlHJu3OuhhHBT4pps7ZoYhYlcZcgWSOHQ6naDx8frWRoSZQHl/Auv\nnFugrnCyvRik2iBe4jWQBKY5TVMZO0hUx4rPg9RXvgSXqX2B3t6oMLTSwd40\nQSVEYLgntiimZOdH/6NFW2/b2CJPVEJOnh15DkYF7o84o87iPXWn9Dt5MR9H\nK/o/fHKdbz4C4gAjwB8F3iMZlYQ7PQMQepvEEIRCxCVPxHake31zeRV+hdPE\ndWrVoIlsATNabN78+HWbRmzwqrbmKNnPIztMjisrnfKXeQ/jb8BYyE9NBAWW\nOuwHSQ9QIJ8jGok8+BosnrP2rCDnznGkBgOp5bLwbldbvlx39Q23G5jxG9W3\nly+A\r\n=roGm\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "eslintConfig": {
    "extends": "tschaub"
  },
  "files": [
    "lib"
  ],
  "gitHead": "8f84cc731cd4ae3cf6816df94afa833119ce1735",
  "homepage": "https://github.com/tschaub/mock-fs",
  "keywords": [
    "mock",
    "fs",
    "test",
    "fixtures",
    "file system",
    "memory"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "tschaub",
      "email": "tim.schaub@gmail.com"
    }
  ],
  "name": "mock-fs",
  "optionalDependencies": {},
  "readme": "# `mock-fs`\n\nThe `mock-fs` module allows Node's built-in [`fs` module](http://nodejs.org/api/fs.html) to be backed temporarily by an in-memory, mock file system.  This lets you run tests against a set of mock files and directories instead of lugging around a bunch of test fixtures.\n\n## Example\n\nThe code below makes it so the `fs` module is temporarily backed by a mock file system with a few files and directories.\n\n```js\nconst mock = require('mock-fs');\n\nmock({\n  'path/to/fake/dir': {\n    'some-file.txt': 'file content here',\n    'empty-dir': {/** empty directory */}\n  },\n  'path/to/some.png': Buffer.from([8, 6, 7, 5, 3, 0, 9]),\n  'some/other/path': {/** another empty directory */}\n});\n```\n\nWhen you are ready to restore the `fs` module (so that it is backed by your real file system), call [`mock.restore()`](#mockrestore). Note that calling this may be **mandatory** in some cases. See [istanbuljs/nyc#324](https://github.com/istanbuljs/nyc/issues/324#issuecomment-234018654)\n\n```js\n// after a test runs\nmock.restore();\n```\n\n## Upgrading to version 4\n\nInstead of overriding all methods of the built-in `fs` module, the library now overrides `process.binding('fs')`.  The purpose of this change is to avoid conflicts with other libraries that override `fs` methods (e.g. `graceful-fs`) and to make it possible to work with multiple Node releases without maintaining copied and slightly modified versions of Node's `fs` module.\n\nBreaking changes:\n\n * The `mock.fs()` function has been removed.  This returned an object with `fs`-like methods without overriding the built-in `fs` module.\n * The object created by `fs.Stats` is no longer an instance of `fs.Stats` (though it has all the same properties and methods).\n * Lazy `require()` do not use the real filesystem.\n * Tests are no longer run in Node < 4.\n\nSome of these breaking changes may be restored in a future release.\n\n## Docs\n\n### <a id='mockconfigoptions'>`mock(config, options)`</a>\n\nConfigure the `fs` module so it is backed by an in-memory file system.\n\nCalling `mock` sets up a mock file system with two directories by default: `process.cwd()` and `os.tmpdir()` (or `os.tmpDir()` for older Node).  When called with no arguments, just these two directories are created.  When called with a `config` object, additional files, directories, and symlinks are created.  To avoid creating a directory for `process.cwd()` and `os.tmpdir()`, see the [`options`](#options) below.\n\nProperty names of the `config` object are interpreted as relative paths to resources (relative from `process.cwd()`).  Property values of the `config` object are interpreted as content or configuration for the generated resources.\n\n*Note that paths should always use forward slashes (`/`) - even on Windows.*\n\n### <a id='options'>`options`</a>\n\nThe second (optional) argument may include the properties below.\n\n * `createCwd` - `boolean` Create a directory for `process.cwd()`.  This is `true` by default.\n * `createTmp` - `boolean` Create a directory for `os.tmpdir()`.  This is `true` by default.\n\n### Creating files\n\nWhen `config` property values are a `string` or `Buffer`, a file is created with the provided content.  For example, the following configuration creates a single file with string content (in addition to the two default directories).\n```js\nmock({\n  'path/to/file.txt': 'file content here'\n});\n```\n\nTo create a file with additional properties (owner, permissions, atime, etc.), use the [`mock.file()`](#mockfileproperties) function described below.\n\n### <a id='mockfileproperties'>`mock.file(properties)`</a>\n\nCreate a factory for new files.  Supported properties:\n\n * **content** - `string|Buffer` File contents.\n * **mode** - `number` File mode (permission and sticky bits).  Defaults to `0666`.\n * **uid** - `number` The user id.  Defaults to `process.getuid()`.\n * **gid** - `number` The group id.  Defaults to `process.getgid()`.\n * **atime** - `Date` The last file access time.  Defaults to `new Date()`.  Updated when file contents are accessed.\n * **ctime** - `Date` The last file change time.  Defaults to `new Date()`.  Updated when file owner or permissions change.\n * **mtime** - `Date` The last file modification time.  Defaults to `new Date()`.  Updated when file contents change.\n * **birthtime** - `Date` The time of file creation.  Defaults to `new Date()`.\n\nTo create a mock filesystem with a very old file named `foo`, you could do something like this:\n```js\nmock({\n  foo: mock.file({\n    content: 'file content here',\n    ctime: new Date(1),\n    mtime: new Date(1)\n  })\n});\n```\n\nNote that if you want to create a file with the default properties, you can provide a `string` or `Buffer` directly instead of calling `mock.file()`.\n\n### Creating directories\n\nWhen `config` property values are an `Object`, a directory is created.  The structure of the object is the same as the `config` object itself.  So an empty directory can be created with a simple object literal (`{}`).  The following configuration creates a directory containing two files (in addition to the two default directories):\n```js\n// note that this could also be written as\n// mock({'path/to/dir': { /** config */ }})\nmock({\n  path: {\n    to: {\n      dir: {\n        file1: 'text content',\n        file2: Buffer.from([1, 2, 3, 4])\n      }\n    }\n  }\n});\n```\n\nTo create a directory with additional properties (owner, permissions, atime, etc.), use the [`mock.directory()`](mockdirectoryproperties) function described below.\n\n### <a id='mockdirectoryproperties'>`mock.directory(properties)`</a>\n\nCreate a factory for new directories.  Supported properties:\n\n * **mode** - `number` Directory mode (permission and sticky bits).  Defaults to `0777`.\n * **uid** - `number` The user id.  Defaults to `process.getuid()`.\n * **gid** - `number` The group id.  Defaults to `process.getgid()`.\n * **atime** - `Date` The last directory access time.  Defaults to `new Date()`.\n * **ctime** - `Date` The last directory change time.  Defaults to `new Date()`.  Updated when owner or permissions change.\n * **mtime** - `Date` The last directory modification time.  Defaults to `new Date()`.  Updated when an item is added, removed, or renamed.\n * **birthtime** - `Date` The time of directory creation.  Defaults to `new Date()`.\n * **items** - `Object` Directory contents.  Members will generate additional files, directories, or symlinks.\n\nTo create a mock filesystem with a directory with the relative path `some/dir` that has a mode of `0755` and two child files, you could do something like this:\n```js\nmock({\n  'some/dir': mock.directory({\n    mode: 0755,\n    items: {\n      file1: 'file one content',\n      file2: Buffer.from([8, 6, 7, 5, 3, 0, 9])\n    }\n  })\n});\n```\n\nNote that if you want to create a directory with the default properties, you can provide an `Object` directly instead of calling `mock.directory()`.\n\n### Creating symlinks\n\nUsing a `string` or a `Buffer` is a shortcut for creating files with default properties.  Using an `Object` is a shortcut for creating a directory with default properties.  There is no shortcut for creating symlinks.  To create a symlink, you need to call the [`mock.symlink()`](#mocksymlinkproperties) function described below.\n\n### <a id='mocksymlinkproperties'>`mock.symlink(properties)`</a>\n\nCreate a factory for new symlinks.  Supported properties:\n\n * **path** - `string` Path to the source (required).\n * **mode** - `number` Symlink mode (permission and sticky bits).  Defaults to `0666`.\n * **uid** - `number` The user id.  Defaults to `process.getuid()`.\n * **gid** - `number` The group id.  Defaults to `process.getgid()`.\n * **atime** - `Date` The last symlink access time.  Defaults to `new Date()`.\n * **ctime** - `Date` The last symlink change time.  Defaults to `new Date()`.\n * **mtime** - `Date` The last symlink modification time.  Defaults to `new Date()`.\n * **birthtime** - `Date` The time of symlink creation.  Defaults to `new Date()`.\n\nTo create a mock filesystem with a file and a symlink, you could do something like this:\n```js\nmock({\n  'some/dir': {\n    'regular-file': 'file contents',\n    'a-symlink': mock.symlink({\n      path: 'regular-file'\n    })\n  }\n});\n```\n\n### Restoring the file system\n\n### <a id='mockrestore'>`mock.restore()`</a>\n\nRestore the `fs` binding to the real file system.  This undoes the effect of calling `mock()`.  Typically, you would set up a mock file system before running a test and restore the original after.  Using a test runner with `beforeEach` and `afterEach` hooks, this might look like the following:\n\n```js\nbeforeEach(function() {\n  mock({\n    'fake-file': 'file contents'\n  });\n});\nafterEach(mock.restore);\n```\n\n## Install\n\nUsing `npm`:\n\n```\nnpm install mock-fs --save-dev\n```\n\n## Caveats\n\nWhen you require `mock-fs`, Node's own `fs` module is patched to allow the binding to the underlying file system to be swapped out.  If you require `mock-fs` *before* any other modules that modify `fs` (e.g. `graceful-fs`), the mock should behave as expected.\n\n**Note** `mock-fs` is not compatible with `graceful-fs@3.x` but works with `graceful-fs@4.x`.\n\nMock `fs.Stats` objects have the following properties: `dev`, `ino`, `nlink`, `mode`, `size`, `rdev`, `blksize`, `blocks`, `atime`, `ctime`, `mtime`, `birthtime`, `uid`, and `gid`.  In addition, all of the `is*()` method are provided (e.g. `isDirectory()`, `isFile()`, et al.).\n\nMock file access is controlled based on file mode where `process.getuid()` and `process.getgid()` are available (POSIX systems).  On other systems (e.g. Windows) the file mode has no effect.\n\nTested on Linux, OSX, and Windows using Node 0.10 through 10.x.  Check the tickets for a list of [known issues](https://github.com/tschaub/mock-fs/issues).\n\n### Using with Jest Snapshot Testing\n\n`.toMatchSnapshot` in [Jest](https://jestjs.io/docs/en/snapshot-testing) uses `fs` to load existing snapshots.\nIf `mockFs` is active, Jest isn't able to load existing snapshots. In such case it accepts all snapshots\nwithout diffing the old ones, which breaks the concept of snapshot testing.\n\nCalling `mock.restore()` in `afterEach` is too late and it's necessary to call it before snapshot matching:\n\n```js\nconst actual = testedFunction()\nmock.restore()\nexpect(actual).toMatchSnapshot()\n```\n\nNote: it's safe to call `mock.restore` multiple times, so it can still be called in `afterEach` and then manually\nin test cases which use snapshot testing.\n\n[![Current Status](https://secure.travis-ci.org/tschaub/mock-fs.png?branch=master)](https://travis-ci.org/tschaub/mock-fs)\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/tschaub/mock-fs.git"
  },
  "scripts": {
    "lint": "eslint benchmarks lib test",
    "pretest": "npm run lint",
    "test": "mocha --recursive test"
  },
  "version": "4.7.0"
}
