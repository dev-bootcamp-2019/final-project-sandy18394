{
  "_args": [
    [
      {
        "raw": "nodeify@^1.0.1",
        "scope": null,
        "escapedName": "nodeify",
        "name": "nodeify",
        "rawSpec": "^1.0.1",
        "spec": ">=1.0.1 <2.0.0",
        "type": "range"
      },
      "/Users/sandeepghosh/Desktop/blockchain/smart contracts/dappRoll2Win/dumed/node_modules/multihashing-async"
    ]
  ],
  "_from": "nodeify@>=1.0.1 <2.0.0",
  "_id": "nodeify@1.0.1",
  "_inCache": true,
  "_location": "/nodeify",
  "_nodeVersion": "6.4.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/nodeify-1.0.1.tgz_1488126259719_0.5255854076240212"
  },
  "_npmUser": {
    "name": "forbeslindesay",
    "email": "forbes@lindesay.co.uk"
  },
  "_npmVersion": "3.10.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "nodeify@^1.0.1",
    "scope": null,
    "escapedName": "nodeify",
    "name": "nodeify",
    "rawSpec": "^1.0.1",
    "spec": ">=1.0.1 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/libp2p-crypto-secp256k1",
    "/multihashing-async",
    "/peer-info/multihashing-async"
  ],
  "_resolved": "https://registry.npmjs.org/nodeify/-/nodeify-1.0.1.tgz",
  "_shasum": "64ab69a7bdbaf03ce107b4f0335c87c0b9e91b1d",
  "_shrinkwrap": null,
  "_spec": "nodeify@^1.0.1",
  "_where": "/Users/sandeepghosh/Desktop/blockchain/smart contracts/dappRoll2Win/dumed/node_modules/multihashing-async",
  "author": {
    "name": "ForbesLindesay"
  },
  "bugs": {
    "url": "https://github.com/then/nodeify/issues"
  },
  "dependencies": {
    "is-promise": "~1.0.0",
    "promise": "~1.3.0"
  },
  "description": "Convert promised code to use node style callbacks",
  "devDependencies": {
    "mocha": "~1.8.1",
    "mocha-as-promised": "~1.2.1"
  },
  "directories": {},
  "dist": {
    "shasum": "64ab69a7bdbaf03ce107b4f0335c87c0b9e91b1d",
    "tarball": "https://registry.npmjs.org/nodeify/-/nodeify-1.0.1.tgz"
  },
  "gitHead": "444f8a68890fd08b9b30113784833283c61d277e",
  "homepage": "https://github.com/then/nodeify#readme",
  "keywords": [
    "promise",
    "then",
    "nodeify",
    "callback"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "forbeslindesay",
      "email": "forbes@lindesay.co.uk"
    }
  ],
  "name": "nodeify",
  "optionalDependencies": {},
  "readme": "[![Build Status](https://img.shields.io/travis/then/nodeify/master.svg)](https://travis-ci.org/then/nodeify)\n# Nodeify\n\n  Convert promised code to use node style callbacks.  If no callback is provided it will just return the original promise.\n\n## Installation\n\n  Server:\n\n    $ npm install nodeify\n\n## Usage\n\n### Functional\n\n  Call `nodeify` directly passing the `promise` and an optional `callback` as arguments.  If a `callback` is provided it will be called as `callback(error, result)`.  If `callback` is not a function, `promise` is returned.\n\n```javascript\nvar nodeify = require('nodeify');\n\nfunction myAsyncMethod(arg, callback) {\n  return nodeify(myPromiseMethod(arg), callback);\n}\n```\n\n### Constructor / Method\n\n  The `nodeify.Promise` constructor returns a promise with a `.nodeify` method which behaves just like the functional version above except that the first argument is implicitly `this`.\n\n```javascript\nvar Promise = require('nodeify').Promise;\n\nfunction myAsyncMethod(arg, callback) {\n  return new Promise(function (resolver) {\n    //do async work\n  })\n  .nodeify(callback);\n}\n```\n\n### Extend\n\n#### Extend(promise)\n\n  Takes a promise and extends it to support the `.nodeify` method.  It will still support the nodeify method after calls to `.then`.\n\n```javascript\nvar Promise = require('promise');\nvar nodeify = require('nodeify');\n\nfunction myAsyncMethod(arg, callback) {\n  return nodeify.extend(myPromiseMethod(arg))\n    .nodeify(callback);\n}\n```\n\n#### Extend(PromiseConstructor)\n\n  Takes a PromiseConstructor and extends it to support the `.nodeify` method.\n\n```javascript\nvar PromiseConstructor = require('promise-constructor-used-by-my-promise-method');\n\nrequire('nodeify').extend(PromiseConstructor);\n\nfunction myAsyncMethod(arg, callback) {\n  return myPromiseMethod(arg).nodeify(callback);\n}\n```\n\n#### Extend()\n\n  Extends the default promise constructor (returned by calling `require('promise')`) and extends it to support `.nodeify`.\n\n```javascript\nrequire('nodeify').extend();\n\nfunction myAsyncMethod(arg, callback) {\n  //assuming myPromiseMethod uses `promise` as its promise library\n  return myPromiseMethod(arg).nodeify(callback);\n}\n```\n\n## Licence\n\n  MIT\n\n![viewcount](https://viewcount.jepso.com/count/then/nodeify.png)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/then/nodeify.git"
  },
  "scripts": {
    "prepublish": "npm test",
    "test": "mocha -R spec"
  },
  "version": "1.0.1"
}
