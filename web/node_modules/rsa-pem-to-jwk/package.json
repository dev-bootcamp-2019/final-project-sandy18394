{
  "_args": [
    [
      {
        "raw": "rsa-pem-to-jwk@^1.1.3",
        "scope": null,
        "escapedName": "rsa-pem-to-jwk",
        "name": "rsa-pem-to-jwk",
        "rawSpec": "^1.1.3",
        "spec": ">=1.1.3 <2.0.0",
        "type": "range"
      },
      "/Users/sandeepghosh/Desktop/blockchain/smart contracts/dappRoll2Win/dumed/node_modules/libp2p-crypto"
    ]
  ],
  "_from": "rsa-pem-to-jwk@>=1.1.3 <2.0.0",
  "_id": "rsa-pem-to-jwk@1.1.3",
  "_inCache": true,
  "_location": "/rsa-pem-to-jwk",
  "_npmUser": {
    "name": "abalmos",
    "email": "andrew@balmos.org"
  },
  "_npmVersion": "1.4.28",
  "_phantomChildren": {},
  "_requested": {
    "raw": "rsa-pem-to-jwk@^1.1.3",
    "scope": null,
    "escapedName": "rsa-pem-to-jwk",
    "name": "rsa-pem-to-jwk",
    "rawSpec": "^1.1.3",
    "spec": ">=1.1.3 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/libp2p-crypto",
    "/peer-id/libp2p-crypto",
    "/peer-info/libp2p-crypto"
  ],
  "_resolved": "https://registry.npmjs.org/rsa-pem-to-jwk/-/rsa-pem-to-jwk-1.1.3.tgz",
  "_shasum": "245e76bdb7e7234cfee7ca032d31b54c38fab98e",
  "_shrinkwrap": null,
  "_spec": "rsa-pem-to-jwk@^1.1.3",
  "_where": "/Users/sandeepghosh/Desktop/blockchain/smart contracts/dappRoll2Win/dumed/node_modules/libp2p-crypto",
  "author": {
    "name": "Andrew Balmos",
    "email": "andrew@balmos.org",
    "url": "https://github.com/abalmos"
  },
  "bugs": {
    "url": "https://github.com/OADA/rsa-pem-to-jwk/issues"
  },
  "contributors": [
    {
      "name": "Andrew Balmos",
      "email": "andrew@balmos.org"
    }
  ],
  "dependencies": {
    "object-assign": "^2.0.0",
    "rsa-unpack": "0.0.6"
  },
  "description": "Converts PEM encoded RSA public and private keys to the JWK (JSON Web Key) format.",
  "devDependencies": {
    "chai": "^1.10.0",
    "coveralls": "~2.11.2",
    "gulp": "^3.8.10",
    "gulp-jscs": "^1.3.1",
    "gulp-jshint": "^1.9.0",
    "istanbul": "^0.3.5",
    "jshint-stylish": "^1.0.0",
    "mocha": "^2.0.1"
  },
  "directories": {},
  "dist": {
    "shasum": "245e76bdb7e7234cfee7ca032d31b54c38fab98e",
    "tarball": "https://registry.npmjs.org/rsa-pem-to-jwk/-/rsa-pem-to-jwk-1.1.3.tgz"
  },
  "gitHead": "588d67f39e51c389742c12de909e2c8e9a3bfec9",
  "homepage": "https://github.com/OADA/rsa-pem-to-jwk",
  "keywords": [
    "RSA",
    "PEM",
    "public",
    "private",
    "jwk",
    "jwks"
  ],
  "license": "Apache 2.0",
  "main": "rsa-pem-to-jwk.js",
  "maintainers": [
    {
      "name": "abalmos",
      "email": "andrew@balmos.org"
    }
  ],
  "name": "rsa-pem-to-jwk",
  "optionalDependencies": {},
  "readme": "[![Build Status](https://travis-ci.org/OADA/rsa-pem-to-jwk.svg)](https://travis-ci.org/OADA/rsa-pem-to-jwk)\n[![Coverage Status](https://coveralls.io/repos/OADA/rsa-pem-to-jwk/badge.png?branch=master)](https://coveralls.io/r/OADA/rsa-pem-to-jwk?branch=master)\n[![Dependency Status](https://david-dm.org/oada/rsa-pem-to-jwk.svg)](https://david-dm.org/oada/rsa-pem-to-jwk)\n[![License](http://img.shields.io/:license-Apache%202.0-green.svg)](http://www.apache.org/licenses/LICENSE-2.0.html)\n\n# Table of Contents\n\n- [rsa-pem-to-jwk](#rsa-pem-to-jwk)\n- [Getting Started](#getting-started)\n  - [Installation](#installation)\n  - [Running the tests, coverage, and style checks](#running-the-tests-coverage-and-style-checks)\n  - [PEM Format](#pem-format)\n    - [Private Keys](#private-keys)\n    - [Public Keys](#public-keys)\n- [API Reference](#api-reference)\n  - [rsaPemToJwk(pem, extraKeys, type)](#rsapemtojwkpem-extrakeys-type)\n    - [Parameters](#parameters)\n    - [Usage Example](#usage-example)\n\n# rsa-pem-to-jwk\n\nConverts PEM encoded RSA public and private keys to the [JWK (JSON Web\nKey)][jwk] format.\n\nFor example, given the following PEM encoded RSA key:\n\n```\n-----BEGIN RSA PRIVATE KEY-----\nMIICXQIBAAKBgQDfn1nKQshOSj8xw44oC2klFWSNLmK3BnHONCJ1bZfq0EQ5gIfg\ntlvB+Px8Ya+VS3OnK7Cdi4iU1fxO9ktN6c6TjmmmFevk8wIwqLthmCSF3r+3+h4e\nddj7hucMsXWv05QUrCPoL6YUUz7Cgpz7ra24rpAmK5z7lsV+f3BEvXkrUQIDAQAB\nAoGAC0G3QGI6OQ6tvbCNYGCqq043YI/8MiBl7C5dqbGZmx1ewdJBhMNJPStuckhs\nkURaDwk4+8VBW9SlvcfSJJrnZhgFMjOYSSsBtPGBIMIdM5eSKbenCCjO8Tg0BUh/\nxa3CHST1W4RQ5rFXadZ9AeNtaGcWj2acmXNO3DVETXAX3x0CQQD13LrBTEDR44ei\nlQ/4TlCMPO5bytd1pAxHnrqgMnWovSIPSShAAH1feFugH7ZGu7RoBO7pYNb6N3ia\nC1idc7yjAkEA6Nfc6c8meTRkVRAHCF24LB5GLfsjoMB0tOeEO9w9Ous1a4o+D24b\nAePMUImAp3woFoNDRfWtlNktOqLel5PjewJBAN9kBoA5o6/Rl9zeqdsIdWFmv4DB\n5lEqlEnC7HlAP+3oo3jWFO9KQqArQL1V8w2D4aCd0uJULiC9pCP7aTHvBhcCQQDb\nW0mOp436T6ZaELBfbFNulNLOzLLi5YzNRPLppfG1SRNZjbIrvTIKVL4N/YxLvQbT\nNrQw+2OdQACBJiEHsdZzAkBcsTk7frTH4yGx0VfHxXDPjfTj4wmD6gZIlcIr9lZg\n4H8UZcVFN95vEKxJiLRjAmj6g273pu9kK4ymXNEjWWJn\n-----END RSA PRIVATE KEY-----\n```\n\nthe following private RSA JWK is returned:\n\n```json\n{\n  \"kty\": \"RSA\",\n  \"n\": \"AN-fWcpCyE5KPzHDjigLaSUVZI0uYrcGcc40InVtl-rQRDmAh-C2W8H4_Hxhr5VLc6crsJ2LiJTV_E72S03pzpOOaaYV6-TzAjCou2GYJIXev7f6Hh512PuG5wyxda_TlBSsI-gvphRTPsKCnPutrbiukCYrnPuWxX5_cES9eStR\",\n  \"e\": \"AQAB\",\n  \"d\": \"C0G3QGI6OQ6tvbCNYGCqq043YI_8MiBl7C5dqbGZmx1ewdJBhMNJPStuckhskURaDwk4-8VBW9SlvcfSJJrnZhgFMjOYSSsBtPGBIMIdM5eSKbenCCjO8Tg0BUh_xa3CHST1W4RQ5rFXadZ9AeNtaGcWj2acmXNO3DVETXAX3x0\",\n  \"p\": \"APXcusFMQNHjh6KVD_hOUIw87lvK13WkDEeeuqAydai9Ig9JKEAAfV94W6Aftka7tGgE7ulg1vo3eJoLWJ1zvKM\",\n  \"q\": \"AOjX3OnPJnk0ZFUQBwhduCweRi37I6DAdLTnhDvcPTrrNWuKPg9uGwHjzFCJgKd8KBaDQ0X1rZTZLTqi3peT43s\",\n  \"dp\": \"AN9kBoA5o6_Rl9zeqdsIdWFmv4DB5lEqlEnC7HlAP-3oo3jWFO9KQqArQL1V8w2D4aCd0uJULiC9pCP7aTHvBhc\",\n  \"dq\": \"ANtbSY6njfpPploQsF9sU26U0s7MsuLljM1E8uml8bVJE1mNsiu9MgpUvg39jEu9BtM2tDD7Y51AAIEmIQex1nM\",\n  \"qi\": \"XLE5O360x-MhsdFXx8Vwz4304-MJg-oGSJXCK_ZWYOB_FGXFRTfebxCsSYi0YwJo-oNu96bvZCuMplzRI1liZw\"\n}\n```\n\nalternatively, the PEM can also be converted to a public RSA JWK:\n\n```json\n{\n  \"kty\": \"RSA\",\n  \"n\": \"AN-fWcpCyE5KPzHDjigLaSUVZI0uYrcGcc40InVtl-rQRDmAh-C2W8H4_Hxhr5VLc6crsJ2LiJTV_E72S03pzpOOaaYV6-TzAjCou2GYJIXev7f6Hh512PuG5wyxda_TlBSsI-gvphRTPsKCnPutrbiukCYrnPuWxX5_cES9eStR\",\n  \"e\": \"AQAB\"\n}\n```\n\n# Getting Started\n\n## Installation\nThe library can be installed with `npm` using\n```sh\n$ npm install rsa-pem-to-jwk\n```\n\n## Running the tests, coverage, and style checks\nThe module's tests are run with:\n```sh\n$ npm test\n```\n\nThe coverage report is generated with:\n```sh\n$ npm run cover\n```\n\n`jshint` (lint) and `jscs` (style) is automated with gulp:\n```sh\n$ gulp lint\n$ gulp style\n```\n\nor just\n```sh\n$ gulp\n```\n\n## PEM Format\n\nThis module expects the input RSA keys to be in \"PEM\" format. Most tools agree\non what this means for private keys but some tools have different definitions\nfor public keys.\n\n### Private Keys\n\nBoth OpenSSH and OpenSSL use the same RSA private key PEM format. Below is an\nexample of generating such a PEM of a 2048 bit RSA private key with each tool:\n\n**OpenSSL:**\n```sh\n$ openssl genrsa -out private.pem 2048\n```\n\n**OpenSSH:**\n```sh\n$ ssh-keygen -t rsa -b 2048 -m PEM -f private.pem\n```\n\n### Public Keys\n\nThe expected PEM format for public keys is `RSAPublicKey`. This is the default\noutput PEM format for the OpenSSH key generation tool but not for OpenSSL\n(requires -RSAPublicKey_out flag). Below is an example of generating the public\nkey from a RSA private key PEM with each tool:\n\n**OpenSSL**:\n```sh\n$ openssl rsa -in private.pem -RSAPublicKey_out -out public.pem\n```\n\n**OpenSSH**:\n```sh\n$ ssh-keygen -f private.pem -e -m PEM > public.pem\n```\n\n# API Reference\n\n## rsaPemToJwk(pem, extraKeys, type)\nConverts PEM encoded RSA public and private keys to the [JWK (JSON Web\nToken)][jwk] format.\n\n### Parameters\n`pem` {String} of a PEM encoded RSA public or private key.\n\n`extraKeys` {Object} whose keys appear in the JWK body. **Default**: *{}*\n\n`type` {String} equal to:\n  - *public* -- JWK will only contain the public portions of the RSA key.\n  - *private* -- JWK will contain both the public and private portions of the RSA\n    key.\n\n    **Default**: *type of input PEM*\n\n### Usage Example\n```javascript\nvar fs = require('fs');\nvar rsaPemToJwk = require('rsa-pem-to-jwk');\n\nvar pem = fs.readFileSync('privateKey.pem');\n\nvar jwk = rsaPemToJwk(pem, {use: 'sig'}, 'public');\n```\n\n[jwk]: https://tools.ietf.org/id/draft-ietf-jose-json-web-key.txt\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/OADA/rsa-pem-to-jwk.git"
  },
  "scripts": {
    "clean": "rm -rf ./coverage",
    "cover": "istanbul cover --include-all-sources -x gulpfile.js node_modules/.bin/_mocha -- -R spec",
    "test": "_mocha -w"
  },
  "version": "1.1.3"
}
