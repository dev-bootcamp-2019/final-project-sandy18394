{
  "_args": [
    [
      {
        "raw": "libp2p-crypto-secp256k1@~0.2.2",
        "scope": null,
        "escapedName": "libp2p-crypto-secp256k1",
        "name": "libp2p-crypto-secp256k1",
        "rawSpec": "~0.2.2",
        "spec": ">=0.2.2 <0.3.0",
        "type": "range"
      },
      "/Users/sandeepghosh/Desktop/blockchain/smart contracts/dappRoll2Win/dumed/node_modules/libp2p-crypto"
    ]
  ],
  "_from": "libp2p-crypto-secp256k1@~0.2.2",
  "_hasShrinkwrap": false,
  "_id": "libp2p-crypto-secp256k1@0.2.3",
  "_location": "/libp2p-crypto-secp256k1",
  "_nodeVersion": "10.13.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/libp2p-crypto-secp256k1_0.2.3_1546962322605_0.34900602432471617"
  },
  "_npmUser": {
    "name": "daviddias",
    "email": "mail@daviddias.me"
  },
  "_npmVersion": "6.4.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "libp2p-crypto-secp256k1@~0.2.2",
    "scope": null,
    "escapedName": "libp2p-crypto-secp256k1",
    "name": "libp2p-crypto-secp256k1",
    "rawSpec": "~0.2.2",
    "spec": ">=0.2.2 <0.3.0",
    "type": "range"
  },
  "_requiredBy": [
    "/libp2p-crypto",
    "/peer-id/libp2p-crypto",
    "/peer-info/libp2p-crypto"
  ],
  "_resolved": "https://registry.npmjs.org/libp2p-crypto-secp256k1/-/libp2p-crypto-secp256k1-0.2.3.tgz",
  "_shasum": "212fc171d39dae7be3eaf4d9d311e0a8e9619c78",
  "_shrinkwrap": null,
  "_spec": "libp2p-crypto-secp256k1@~0.2.2",
  "_where": "/Users/sandeepghosh/Desktop/blockchain/smart contracts/dappRoll2Win/dumed/node_modules/libp2p-crypto",
  "browser": {
    "secp256k1": "secp256k1/js"
  },
  "bugs": {
    "url": "https://github.com/libp2p/js-libp2p-crypto-secp256k1/issues"
  },
  "contributors": [
    {
      "name": "David Dias",
      "email": "daviddias.p@gmail.com"
    },
    {
      "name": "Friedel Ziegelmayer",
      "email": "dignifiedquire@gmail.com"
    },
    {
      "name": "Hugo Dias",
      "email": "hugomrdias@gmail.com"
    },
    {
      "name": "Victor Bjelkholm",
      "email": "victorbjelkholm@gmail.com"
    },
    {
      "name": "Yusef Napora",
      "email": "yusef@napora.org"
    }
  ],
  "dependencies": {
    "async": "^2.6.1",
    "multihashing-async": "~0.5.1",
    "nodeify": "^1.0.1",
    "safe-buffer": "^5.1.2",
    "secp256k1": "^3.6.1"
  },
  "description": "Support for secp256k1 keys in libp2p-crypto",
  "devDependencies": {
    "aegir": "^18.0.3",
    "benchmark": "^2.1.4",
    "chai": "^4.2.0",
    "dirty-chai": "^2.0.1",
    "libp2p-crypto": "~0.15.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-DFrK89VdboacqM3vqWV8yt8FH9Ni181JJAOU2tRkJfUN9tNEV7VfZEg390NJxEQQbLsyH4HZ7on3QTpPHMHQZQ==",
    "shasum": "212fc171d39dae7be3eaf4d9d311e0a8e9619c78",
    "tarball": "https://registry.npmjs.org/libp2p-crypto-secp256k1/-/libp2p-crypto-secp256k1-0.2.3.tgz",
    "fileCount": 12,
    "unpackedSize": 1773905,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcNMWTCRA9TVsSAnZWagAAPHUQAInWT5Lsh5fci+orILzZ\nsm+mpO130OpsoN5UnXtSuwzg6aURyHMcnYcpfHmDO5X5r0x+4Q6lJ3sqXbJE\npX36biaDDKUTIGDDa5C1KgsAna2798LGFo1ts69mNnaRrOeIyX34SZpGcUAt\n+0xqT/0+zNCQ5eOXYczrB8QG6vmF4+VKrkfPpC1STZczFQNw2B+o+XtmAJnX\nd+CrJrkBPJpbB/di+SS/AtOvhedBvH8IFPjZKpcH70kbxBxQ2o5hHf7ATC52\nzUJH8pWYE2FD7wulJrH0a2jNEHngrHmUN4oItvCWWDv3jJXB0HfSu7310/1G\nHJloDKVO0tIv3dGfNjJx9i8Kjwp7Wa+iEX44pzEwzYkdevA4OIiuAiJBS/q9\nsMDRg0PkaJCglF8vNnQfAqnSFoj882sMYX797CMq7BwSnVTVe0bkzT2Nuawg\nfUZzTaFgB2OOTJvJtliPNaEbFyxDWAtpOs6uHr4nx2r55jOozfLkyQskI3xC\n9u6mZz4Pqd3BrUA7lDScoqw+dMLHJ/PX193vxLkE0g5D0sBiJ36OZjwOLF4X\nJmm76v88At7hRr2qq4nCnX88eLTq0paIHABM18xtVfYJ5jBuThTlduJp/8K+\nlkjCdjB8/tWhJ3yKkrmo1KvlyNaqP7lCEdVa6VKWIJYKnVB2Y4HWFxe1lFtI\nBU6P\r\n=EnCx\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=6.0.0",
    "npm": ">=3.0.0"
  },
  "gitHead": "3a8bab9f44c218d42c88e4ff70a52b09851da673",
  "homepage": "https://github.com/libp2p/js-libp2p-crypto-secp256k1",
  "keywords": [
    "IPFS",
    "libp2p",
    "crypto",
    "secp256k1"
  ],
  "leadMaintainer": "Friedel Ziegelmayer <dignifiedquire@gmail.com>",
  "license": "MIT",
  "main": "src/index.js",
  "maintainers": [
    {
      "name": "daviddias",
      "email": "daviddias.p@gmail.com"
    },
    {
      "name": "dignifiedquire",
      "email": "dignifiedquire@gmail.com"
    }
  ],
  "name": "libp2p-crypto-secp256k1",
  "optionalDependencies": {},
  "readme": "# js-libp2p-crypto-secp256k1\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n[![](https://img.shields.io/badge/freenode-%23ipfs-blue.svg?style=flat-square)](http://webchat.freenode.net/?channels=%23ipfs)\n[![standard-readme compliant](https://img.shields.io/badge/standard--readme-OK-green.svg?style=flat-square)](https://github.com/RichardLitt/standard-readme)\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat-square)](https://github.com/feross/standard)\n![](https://img.shields.io/badge/npm-%3E%3D3.0.0-orange.svg?style=flat-square)\n![](https://img.shields.io/badge/Node.js-%3E%3D4.0.0-orange.svg?style=flat-square)\n\n> Support for secp256k1 keys in js-libp2p-crypto\n\nThis repo contains a [js-libp2p-crypto](https://github.com/libp2p/js-libp2p-crypto)-compatible \nimplementation of cryptographic signature generation and verification using the \n[secp256k1 elliptic curve](https://en.bitcoin.it/wiki/Secp256k1) popularized by Bitcoin and other \ncrypto currencies.  \n\n## Lead Captain\n\n[Friedel Ziegelmayer](https://github.com/dignifiedquire/)\n\n## Table of Contents\n\n- [Install](#install)\n- [Usage](#usage)\n  - [Example](#example)\n- [API](#api)\n  - [`generateKeyPair([bits,] callback)`](#generatekeypairbits-callback)\n  - [`unmarshalSecp256k1PublicKey(bytes)`](#unmarshalsecp256k1publickeybytes)\n  - [`unmarshalSecp256k1PrivateKey(bytes, callback)`](#unmarshalsecp256k1privatekeybytes-callback)\n  - [`Secp256k1PublicKey`](#secp256k1publickey)\n    - [`.verify(data, sig, callback)`](#verifydata-sig-callback)\n  - [`Secp256k1PrivateKey`](#secp256k1privatekey)\n    - [`.public`](#public)\n    - [`.sign(data, callback)`](#signdata-callback)\n- [Contribute](#contribute)\n- [License](#license)\n\n## Install\n\n```sh\nnpm install --save libp2p-crypto-secp256k1\n```\n\n## Usage\n\nThis module is designed to work with [js-libp2p-crypto](https://github.com/libp2p/js-libp2p-crypto).  \nInstalling `libp2p-crypto-secp256k1` will automatically add support for the `'secp256k1'` key type, which\ncan be used as an argument to the [libp2p-crypto API functions](https://github.com/libp2p/js-libp2p-crypto#api)\n`generateKeyPair`, `unmarshalPublicKey`, and `marshalPrivateKey`.  The keys returned from those functions will be\ninstances of the `Secp256k1PublicKey` or `Secp256k1PrivateKey` classes provided by this module.\n\n### Example\n\n```js\nconst crypto = require('libp2p-crypto')\n\nconst msg = Buffer.from('Hello World')\n\ncrypto.generateKeyPair('secp256k1', 256, (err, key) => {\n  // assuming no error, key will be an instance of Secp256k1PrivateKey\n  // the public key is available as key.public\n  key.sign(msg, (err, sig) => {\n    key.public.verify(msg, sig, (err, valid) => {\n      assert(valid, 'Something went horribly wrong')\n    })\n  })\n})\n```\n\n## API\n\nThe functions below are the public API of this module.\nFor usage within libp2p-crypto, see the [libp2p-crypto API documentation](https://github.com/libp2p/js-libp2p-crypto#api).\n\n### `generateKeyPair([bits, ] callback)`\n- `bits: Number` - Optional, included for compatibility with js-libp2p-crypto. Ignored if present; private keys will always be 256 bits.\n- `callback: Function`\n\n### `unmarshalSecp256k1PublicKey(bytes)`\n- `bytes: Buffer`\n\nConverts a serialized secp256k1 public key into an instance of `Secp256k1PublicKey` and returns it\n\n### `unmarshalSecp256k1PrivateKey(bytes, callback)`\n- `bytes: Buffer`\n- `callback: Function`\n\nConverts a serialized secp256k1 private key into an instance of `Secp256k1PrivateKey`, passing it to `callback` on success\n\n### `Secp256k1PublicKey`\n\n#### `.verify(data, sig, callback)`\n- `data: Buffer`\n- `sig: Buffer`\n- `callback: Function`\n\nCalculates the SHA-256 hash of `data`, and verifies the DER-encoded signature in `sig`, passing the result to `callback`\n\n### `Secp256k1PrivateKey`\n\n#### `.public`\n\nAccessor for the `Secp256k1PublicKey` associated with this private key.\n\n#### `.sign(data, callback)`\n- `data: Buffer`\n\nCalculates the SHA-256 hash of `data` and signs it, passing the DER-encoded signature to `callback`\n\n## Contribute\n\nFeel free to join in. All welcome. Open an [issue](https://github.com/libp2p/js-libp2p-crypto/issues)!\n\nThis repository falls under the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/contributing.md)\n\n## License\n\n[MIT](LICENSE)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/libp2p/js-libp2p-crypto-secp256k1.git"
  },
  "scripts": {
    "build": "aegir build",
    "coverage": "aegir coverage",
    "coverage-publish": "aegir coverage publish",
    "lint": "aegir lint",
    "release": "aegir release",
    "release-major": "aegir release --type major",
    "release-minor": "aegir release --type minor",
    "test": "npm run test:node && npm run test:browser",
    "test:browser": "aegir test --env browser",
    "test:node": "aegir test --env node"
  },
  "version": "0.2.3"
}
