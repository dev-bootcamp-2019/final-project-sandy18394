{
  "_args": [
    [
      {
        "raw": "json-text-sequence@~0.1.0",
        "scope": null,
        "escapedName": "json-text-sequence",
        "name": "json-text-sequence",
        "rawSpec": "~0.1.0",
        "spec": ">=0.1.0 <0.2.0",
        "type": "range"
      },
      "/Users/sandeepghosh/Desktop/blockchain/smart contracts/dappRoll2Win/dumed/node_modules/borc"
    ]
  ],
  "_from": "json-text-sequence@>=0.1.0 <0.2.0",
  "_id": "json-text-sequence@0.1.1",
  "_inCache": true,
  "_location": "/json-text-sequence",
  "_nodeVersion": "6.0.0",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/json-text-sequence-0.1.1.tgz_1462210657081_0.966913087759167"
  },
  "_npmUser": {
    "name": "hildjj",
    "email": "joe-github@cursive.net"
  },
  "_npmVersion": "3.8.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "json-text-sequence@~0.1.0",
    "scope": null,
    "escapedName": "json-text-sequence",
    "name": "json-text-sequence",
    "rawSpec": "~0.1.0",
    "spec": ">=0.1.0 <0.2.0",
    "type": "range"
  },
  "_requiredBy": [
    "/borc"
  ],
  "_resolved": "https://registry.npmjs.org/json-text-sequence/-/json-text-sequence-0.1.1.tgz",
  "_shasum": "a72f217dc4afc4629fff5feb304dc1bd51a2f3d2",
  "_shrinkwrap": null,
  "_spec": "json-text-sequence@~0.1.0",
  "_where": "/Users/sandeepghosh/Desktop/blockchain/smart contracts/dappRoll2Win/dumed/node_modules/borc",
  "author": {
    "name": "Joe Hildebrand"
  },
  "bugs": {
    "url": "https://github.com/hildjj/json-text-sequence/issues"
  },
  "dependencies": {
    "delimit-stream": "0.1.0"
  },
  "description": "Parse and generate RS-delimited JSON sequences according to draft-ietf-json-text-sequence",
  "devDependencies": {
    "coffee-script": "latest",
    "coffeelint": "latest",
    "coveralls": "latest",
    "istanbul": "latest",
    "live-server": "latest",
    "nodeunit": "latest",
    "npm-run-all": "latest",
    "source-map-support": "latest",
    "watch": "latest"
  },
  "directories": {
    "lib": "lib"
  },
  "dist": {
    "shasum": "a72f217dc4afc4629fff5feb304dc1bd51a2f3d2",
    "tarball": "https://registry.npmjs.org/json-text-sequence/-/json-text-sequence-0.1.1.tgz"
  },
  "gitHead": "f23b7f84901749c12a08ed3ab0b0d6690fb1bb9e",
  "homepage": "https://github.com/hildjj/json-text-sequence",
  "keywords": [
    "json",
    "sequence",
    "stream",
    "RS"
  ],
  "license": "MIT",
  "main": "./lib/index.js",
  "maintainers": [
    {
      "name": "hildjj",
      "email": "joe-github@cursive.net"
    }
  ],
  "name": "json-text-sequence",
  "optionalDependencies": {},
  "readme": "Parse and generate JSON text sequences as defined in [RFC 7464](https://tools.ietf.org/html/rfc7464).\n\nJSON text sequences are nice for unambiguous JSON log files.  They are resilient\nto many forms of damage such as truncation, multiple writers incorrectly\nconfigured to write to the same file, corrupted JSON, etc.  An example sequence:\n\n    ␞{\"d\":\"2014-09-22T21:58:35.270Z\",\"value\":6}␤\n    ␞{\"d\":\"2014-09-22T21:59:15.117Z\",\"value\":12}␤\n\nWhere \"␞\" is the ASCII \"Record Separator\" character (U+001E), and \"␤\" is the\nASCII \"LINE FEED\" character (U+000A), otherwise known as \"\\n\".\n\nTo install:\n\n    npm install json-text-sequence\n\nTo parse the format, pipe an input source into a parser stream:\n\n    var parser = require('json-text-sequence').parser;\n    var fs = require('fs');\n\n    var p = new parser()\n      .on('json', function(obj) {\n        console.log('JSON:', obj);\n      })\n      .on('truncated', function(buf) {\n        console.log('Truncated:', buf);\n      })\n      .on('invalid', function(buf) {\n        console.log('Invalid:', buf);\n      })\n      .on('finish', function() {\n        console.log('DONE');\n      });\n\n    fs.createReadStream('example.log').pipe(p);\n\nTo generate the format, create a generator, pipe its output somewhere\ninteresting, then write objects to the generator:\n\n    var generator = require('json-text-sequence').generator;\n    var fs = require('fs');\n\n    var g = new generator();\n    g.pipe(fs.createWriteStream('example.log'));\n\n    g.write({\n      d: new Date(),\n      count: 0\n    });\n\n[![Build Status](https://travis-ci.org/hildjj/json-text-sequence.svg?branch=master)](https://travis-ci.org/hildjj/json-text-sequence)\n[![Coverage Status](https://coveralls.io/repos/hildjj/json-text-sequence/badge.png?branch=master)](https://coveralls.io/r/hildjj/json-text-sequence?branch=master)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/hildjj/json-text-sequence.git"
  },
  "scripts": {
    "ci": "npm run coverage  -s && cat ./coverage/lcov.info | coveralls",
    "clean": "rm -rf coverage lib doc man",
    "coffee": "coffee -cm -o lib/ src",
    "coverage": "istanbul cover nodeunit test/*.coffee",
    "dev": "npm-run-all -p --silent watch live",
    "lint": "coffeelint src test",
    "live": "live-server --port=4001 --ignorePattern='(js|css|png)$' coverage/lcov-report",
    "precoverage": "npm run coffee -s",
    "prepublish": "npm run coffee -s",
    "pretest": "npm run coffee -s",
    "release": "npm version patch && git push --follow-tags && npm publish",
    "test": "nodeunit test/*.coffee",
    "watch": "watch 'npm run coverage' src/"
  },
  "version": "0.1.1"
}
